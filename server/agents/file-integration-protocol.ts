// CRITICAL FILE INTEGRATION PROTOCOL
// Mandatory instructions for all SSELFIE Studio agents to prevent orphaned files

export const FILE_INTEGRATION_PROTOCOL = `
## üö® MANDATORY FILE INTEGRATION PROTOCOL - NEVER SKIP THIS

**CRITICAL RULE: EVERY FILE CREATED MUST BE INTEGRATED INTO THE LIVE APPLICATION**

### **SSELFIE STUDIO PLATFORM ARCHITECTURE:**

**Frontend Architecture (client/src/):**
- **Components**: \`client/src/components/[category]/ComponentName.tsx\`
- **Pages**: \`client/src/pages/page-name.tsx\` 
- **Types**: \`shared/types/TypeName.ts\`
- **Utils**: \`client/src/lib/utils.ts\`
- **Styles**: \`client/src/index.css\` (Tailwind CSS)

**Backend Architecture (server/):**
- **Routes**: \`server/routes.ts\` or \`server/routes/category-routes.ts\`
- **Services**: \`server/service-name.ts\`
- **Database**: \`shared/schema.ts\` (Drizzle ORM)
- **Types**: \`shared/types/TypeName.ts\`

### **CRITICAL DECISION: ANALYZE BEFORE CREATING**

**FIRST: ALWAYS CHECK IF FILE EXISTS**
Before creating any new file, analyze the current codebase:
- ‚úÖ **Redesign Request**: "Admin dashboard redesign" = modify existing admin-dashboard.tsx, DON'T create new file
- ‚úÖ **Enhancement Request**: "Improve user profile" = modify existing user-profile.tsx
- ‚úÖ **New Feature Request**: "Create blog system" = create new files with proper integration
- ‚úÖ **Component Request**: "Add hero section" = check if hero component exists first

**ANALYSIS PROTOCOL:**
1. üîç **Search existing files** - Use filesystem search to find current implementation
2. üìñ **Read current code** - Understand existing structure and functionality  
3. üéØ **Determine approach**:
   - **MODIFY EXISTING**: If file exists and request is redesign/improvement
   - **CREATE NEW**: Only if genuinely new feature/component needed

### **5-STEP MANDATORY INTEGRATION CHECKLIST:**

**STEP 1: ANALYZE THEN CREATE/MODIFY FILE**
- ‚úÖ **For Existing Pages**: Modify client/src/pages/existing-page.tsx directly
- ‚úÖ **For New Components**: Create in client/src/components/[category]/ComponentName.tsx
- ‚úÖ **For New Pages**: Create in client/src/pages/page-name.tsx
- ‚úÖ **For Types**: Use shared/types/TypeName.ts
- ‚úÖ **For Services**: Use server/service-name.ts
- ‚ùå NEVER create new files when modifying existing ones
- ‚ùå NEVER create React components in shared/types/

**STEP 2: ADD ROUTING (FOR NEW PAGES ONLY)**
If creating a NEW page (not modifying existing), ALWAYS update client/src/App.tsx:
- Add import: import NewPage from '@/pages/new-page';
- Add route in routing section: <Route path="/new-page" component={NewPage} />

**STEP 3: UPDATE PARENT COMPONENTS**
If creating a component, update the parent that will use it:
- Add import: import NewComponent from '@/components/category/NewComponent';
- Use in JSX: <NewComponent prop="value" />

**STEP 4: UPDATE NAVIGATION & FOOTER (MANDATORY FOR NEW PAGES)**
For ANY new page created, ALWAYS update navigation:
- ‚úÖ **Main Navigation**: Update client/src/components/layout/Navigation.tsx
- ‚úÖ **Admin Navigation**: Update admin navigation if admin page
- ‚úÖ **Footer Links**: Update client/src/components/layout/Footer.tsx 
- ‚úÖ **Breadcrumbs**: Add to relevant breadcrumb components if applicable

**NAVIGATION UPDATE EXAMPLES:**
1. First check existing navigation structure in client/src/components/layout/Navigation.tsx
2. Add to Navigation.tsx following existing pattern: <Link href="/new-page" className="nav-link">New Page</Link>
3. Check Footer.tsx structure in client/src/components/layout/Footer.tsx
4. Add to Footer.tsx in appropriate section following existing pattern: <Link href="/new-page" className="footer-link">New Page</Link>
5. For admin pages, check admin navigation structure
6. Add to admin navigation following admin-specific patterns

**SPECIFIC NAVIGATION REQUIREMENTS:**
- ‚úÖ **Check Current Structure**: Always read existing navigation components first
- ‚úÖ **Follow Existing Patterns**: Match current styling, className patterns, link structure
- ‚úÖ **Proper Categorization**: Admin pages in admin nav, public pages in main nav
- ‚úÖ **Footer Organization**: Place links in appropriate footer sections (About, Services, Legal, etc.)
- ‚úÖ **Accessibility**: Include proper aria-labels and semantic HTML structure

**STEP 5: VERIFY INTEGRATION**
Always confirm:
- ‚úÖ File created/modified in correct location
- ‚úÖ Proper TypeScript imports (no errors)
- ‚úÖ Component/page accessible in live preview
- ‚úÖ Navigation links work and point to correct routes
- ‚úÖ Footer links updated and functional
- ‚úÖ No broken routes or missing imports

### **ANALYZE FIRST - CREATE OR MODIFY DECISION TREE:**

**WHEN TO MODIFY EXISTING FILES:**
‚úÖ REQUEST: "Redesign admin dashboard" ‚Üí MODIFY: client/src/pages/admin-dashboard.tsx
‚úÖ REQUEST: "Improve user profile page" ‚Üí MODIFY: client/src/pages/user-profile.tsx  
‚úÖ REQUEST: "Update navigation design" ‚Üí MODIFY: client/src/components/layout/Navigation.tsx
‚úÖ REQUEST: "Enhance hero section" ‚Üí MODIFY: existing hero component
‚ùå WRONG: Creating new files for redesign requests

**WHEN TO CREATE NEW FILES:**
‚úÖ REQUEST: "Create blog system" ‚Üí CREATE: client/src/pages/blog.tsx + routing
‚úÖ REQUEST: "Add testimonials component" ‚Üí CREATE: client/src/components/ui/Testimonials.tsx
‚úÖ REQUEST: "Build contact form" ‚Üí CREATE: client/src/components/forms/ContactForm.tsx
‚ùå WRONG: Creating new files when existing ones should be modified

**CORRECT FILE LOCATIONS BY TYPE:**

**REACT COMPONENTS:**
‚úÖ MODIFY: client/src/components/admin/AdminDashboard.tsx (for redesigns)
‚úÖ CREATE: client/src/components/ui/NewButton.tsx (for new components)
‚úÖ MODIFY: client/src/components/layout/Header.tsx (for improvements)
‚ùå WRONG: shared/types/AdminDashboard.tsx
‚ùå WRONG: server/AdminDashboard.tsx

**PAGES:**
‚úÖ MODIFY: client/src/pages/admin-dashboard.tsx (for page redesigns)
‚úÖ CREATE: client/src/pages/new-feature.tsx (for new pages)
‚ùå WRONG: client/src/components/admin-dashboard.tsx
‚ùå WRONG: client/src/admin-dashboard.tsx

**TYPES:**
‚úÖ CORRECT: shared/types/UserTypes.ts
‚úÖ CORRECT: shared/types/AdminTypes.ts
‚ùå WRONG: client/src/types/UserTypes.ts
‚ùå WRONG: server/types/UserTypes.ts

**SERVICES:**
‚úÖ CORRECT: server/email-service.ts
‚úÖ CORRECT: server/routes/user-routes.ts
‚ùå WRONG: client/src/services/email-service.ts
‚ùå WRONG: shared/email-service.ts

### **IMPORT PATH STANDARDS:**

**Use SSELFIE Studio import aliases:**
‚úÖ CORRECT: import Component from '@/components/ui/Component';
‚úÖ CORRECT: import { Type } from '@shared/types/Types';
‚úÖ CORRECT: import utils from '@/lib/utils';
‚ùå WRONG: import Component from '../../../components/ui/Component';
‚ùå WRONG: import Component from './Component';

### **PLATFORM-SPECIFIC INTEGRATION REQUIREMENTS:**

**FOR ADMIN DASHBOARD COMPONENTS:**
- Must be accessible from /admin route or sub-routes
- Must use luxury editorial design (Times New Roman, black/white/gray palette)
- Must integrate with existing admin navigation

**FOR USER-FACING COMPONENTS:**
- Must integrate with main application routing
- Must follow SSELFIE Studio design system
- Must be accessible to authenticated users

**FOR API ENDPOINTS:**
- Must be added to server/routes.ts
- Must include proper authentication middleware
- Must follow existing API patterns

### **CRITICAL FAILURE PREVENTION:**

**NEVER DO THIS:**
‚ùå Create new files for redesign/improvement requests (modify existing instead)
‚ùå Create React components in shared/types/
‚ùå Create pages without adding routes to App.tsx AND navigation links
‚ùå Create files and leave them orphaned
‚ùå Use relative imports when aliases exist
‚ùå Skip TypeScript type definitions
‚ùå Forget to update navigation and footer links for new pages

**ALWAYS DO THIS:**
‚úÖ **ANALYZE FIRST** - Check if file exists before creating new ones
‚úÖ **MODIFY EXISTING** - For redesigns, improvements, enhancements of current features  
‚úÖ **CREATE NEW ONLY** - For genuinely new features/components/pages
‚úÖ Add proper routing for new pages
‚úÖ **UPDATE NAVIGATION & FOOTER** - Mandatory for all new pages (check existing structure first)
‚úÖ **FOLLOW EXISTING PATTERNS** - Match current navigation styling and organization
‚úÖ Update parent components to use new components
‚úÖ Use import aliases (@/ and @shared/)
‚úÖ Verify integration works in live preview

### **VERIFICATION COMMANDS:**

After creating any file, verify integration:
- Check TypeScript compilation: npm run build
- Check for import errors: npm run type-check
- Verify routing works: curl http://localhost:5000/your-new-route

### **REPLIT VISUAL EDITOR INTEGRATION:**

When working in the Admin Visual Editor:
- Files created appear in Files tab immediately
- Use Multi-Tab Editor for direct file editing
- Live preview shows changes instantly
- Console panel shows any integration errors

**SUCCESS CRITERIA:**
1. File created in correct location ‚úÖ
2. Proper imports with no TypeScript errors ‚úÖ  
3. Component/page accessible in live preview ‚úÖ
4. Routes work correctly ‚úÖ
5. No broken navigation or missing files ‚úÖ

## üö® THIS PROTOCOL IS MANDATORY - NO EXCEPTIONS

Every agent must follow this protocol for every file operation to ensure:
- **Analyze before acting** - Modify existing files for redesigns, create new only when needed
- **No orphaned files** - Every file properly integrated into application
- **Complete navigation integration** - All new pages added to navigation and footer
- **Proper platform integration** - Following SSELFIE Studio architecture patterns
- **Consistent architecture** - Using correct file locations and import patterns
- **Professional development standards** - TypeScript compliance and live preview verification
- **Sandra's luxury brand experience** - Maintaining design and user experience standards

**REMEMBER: "Admin dashboard redesign" = MODIFY existing admin-dashboard.tsx, NOT create new file!**
`;