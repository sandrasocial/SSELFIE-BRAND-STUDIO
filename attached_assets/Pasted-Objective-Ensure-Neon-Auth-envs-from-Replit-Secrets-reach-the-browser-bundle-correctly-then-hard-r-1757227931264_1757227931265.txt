Objective: Ensure Neon Auth envs from Replit Secrets reach the browser bundle correctly, then hard-rebuild. Replace any post-constructor “cleaners” with a single env.ts that trims quotes and validates keys before creating StackClientApp.

0) Preconditions

Do not print secret values.

Client code must read import.meta.env.* (not process.env).

Variables exist in Replit Secrets:

VITE_STACK_PROJECT_ID

VITE_STACK_PUBLISHABLE_CLIENT_KEY

(server only) STACK_SECRET_SERVER_KEY, DATABASE_URL

1) Create src/env.ts

Create or overwrite src/env.ts with:

// src/env.ts
const clean = (s?: string) => (s ?? "").trim().replace(/^['"]+|['"]+$/g, "");

export const STACK_PROJECT_ID = clean(import.meta.env.VITE_STACK_PROJECT_ID);
export const STACK_PUBLISHABLE_CLIENT_KEY = clean(import.meta.env.VITE_STACK_PUBLISHABLE_CLIENT_KEY);

// Minimal dev-time validation (safe to keep in prod; no values printed)
if (!STACK_PROJECT_ID) {
  // eslint-disable-next-line no-console
  console.error("Neon Auth: Missing VITE_STACK_PROJECT_ID");
}
if (!STACK_PUBLISHABLE_CLIENT_KEY || !STACK_PUBLISHABLE_CLIENT_KEY.startsWith("pck_")) {
  // eslint-disable-next-line no-console
  console.error("Neon Auth: Missing or invalid VITE_STACK_PUBLISHABLE_CLIENT_KEY");
}

// Optional one-time debug (guarded)
// eslint-disable-next-line no-console
if (import.meta.env.DEV) {
  console.log("Neon Auth env (sanity):", {
    projectIdPresent: !!STACK_PROJECT_ID,
    pckStartsWith: STACK_PUBLISHABLE_CLIENT_KEY.startsWith("pck_"),
    keyLength: STACK_PUBLISHABLE_CLIENT_KEY.length,
  });
}

2) Update src/stack.ts to use the cleaned env

Replace the file with:

// src/stack.ts
import { StackClientApp } from "@stackframe/react";
import { STACK_PROJECT_ID, STACK_PUBLISHABLE_CLIENT_KEY } from "./env";

export const stackClientApp = new StackClientApp({
  projectId: STACK_PROJECT_ID,
  publishableClientKey: STACK_PUBLISHABLE_CLIENT_KEY,
  tokenStore: "cookie",
});

3) Remove any post-constructor cleaners and duplicate env paths

Search for places that:

call a “cleaner” after creating StackClientApp

reference import.meta.env.VITE_STACK_* directly in components

reference process.env.VITE_STACK_* in client code

Update those to import from src/env.ts instead, or delete redundant code.

Run:

git ls-files | xargs grep -nEI "VITE_STACK_PROJECT_ID|VITE_STACK_PUBLISHABLE_CLIENT_KEY|process\\.env|keyPrefix|hasKey|Missing publishable" --exclude-dir=node_modules || true


For each client file that uses those keys or custom cleaners, replace with:

import { STACK_PROJECT_ID, STACK_PUBLISHABLE_CLIENT_KEY } from "@/env"; // adjust relative path if needed


Remove any keyPrefix/hasKey guard code that runs after the constructor.

4) Ensure router and handler are already in place (no change if present)

Verify src/App.tsx includes:

<StackProvider app={stackClientApp}> and <StackTheme>

Route for /handler/* rendering <StackHandler app={stackClientApp} .../>

If missing, add it (don’t duplicate if it exists).

5) Hard rebuild (invalidate stale env in Vite)

Stop dev server, purge caches, reinstall, restart:

# stop the running dev process first (Replit UI)
rm -rf node_modules/.vite .vite dist
npm ci || npm i
npm run dev

6) Quick runtime check

Open console on load. Expect:

projectIdPresent: true

pckStartsWith: true

keyLength > 10

Navigate to /handler/sign-up → sign up a test user.

Header <UserButton /> should reflect session.

7) Verify Neon sync

Confirm in Neon:

SELECT id, email, created_at
FROM neon_auth.users_sync
ORDER BY created_at DESC
LIMIT 5;

8) Commit
git add src/env.ts src/stack.ts
git commit -m "fix(auth): clean & validate VITE envs before StackClientApp; hard rebuild"
git push


Acceptance Criteria

No “Stack Auth configuration error”.

Console shows pckStartsWith: true.

/handler/sign-up works; <UserButton /> shows logged-in state.

New user appears in neon_auth.users_sync.

No remaining references to process.env in client code.