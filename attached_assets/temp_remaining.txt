        .hero-eyebrow { font-size:11px; letter-spacing:.4em; text-transform:uppercase; color:rgba(255,255,255,.7); margin-bottom:30px; font-weight:300; }
        .hero-title { font-family:'Times New Roman',serif; font-size:clamp(3rem,8vw,6rem); line-height:.9; font-weight:200; letter-spacing:.1em; text-transform:uppercase; margin-bottom:20px; color:var(--white); }
        .hero-subtitle { font-family:'Times New Roman',serif; font-size:clamp(1rem,3vw,2rem); font-style:italic; letter-spacing:.05em; opacity:.9; margin-bottom:40px; }
        .hero-cta { display:inline-block; padding:16px 32px; font-size:11px; font-weight:400; letter-spacing:.3em; text-transform:uppercase; text-decoration:none; border:1px solid var(--white); color:var(--white); background:transparent; transition:all 300ms ease; cursor:pointer; }
        .hero-cta:hover { background:var(--white); color:var(--black); }

        .main-container { display:flex; min-height:100vh; max-width:1400px; margin:0 auto; }
        .sidebar { width:300px; background:var(--editorial-gray); border-right:1px solid var(--accent-line); padding:40px 0; overflow-y:auto; }
        .sidebar-section { padding:0 30px; margin-bottom:40px; }
        .sidebar-title { font-size:11px; font-weight:400; letter-spacing:.3em; text-transform:uppercase; color:var(--soft-gray); margin-bottom:20px; }
        .new-session-btn { width:100%; padding:16px 0; background:var(--black); color:var(--white); border:none; font-size:11px; font-weight:400; letter-spacing:.3em; text-transform:uppercase; cursor:pointer; transition:all 300ms ease; margin-bottom:30px; }
        .new-session-btn:hover { background:var(--soft-gray); }
        .session-item { padding:12px 0; border-bottom:1px solid var(--accent-line); cursor:pointer; transition:all 200ms ease; }
        .session-item:hover { background:rgba(10,10,10,0.05); }
        .session-title { font-size:14px; font-weight:400; margin-bottom:4px; line-height:1.4; }
        .session-preview { font-size:12px; color:var(--soft-gray); line-height:1.3; }
        .more-sessions { color:var(--soft-gray); font-size:12px; text-align:center; padding:20px 0; }

        .chat-area { flex:1; display:flex; flex-direction:column; background:var(--white); }
        .chat-header { padding:30px 40px; border-bottom:1px solid var(--accent-line); background:var(--white); }
        .chat-title { font-family:'Times New Roman',serif; font-size:24px; font-weight:200; margin-bottom:8px; text-transform:uppercase; letter-spacing:.06em; }
        .chat-subtitle { font-size:14px; color:var(--soft-gray); }

        .intent-bar { margin-top:18px; display:flex; gap:12px; flex-wrap:wrap; }
        .chip { padding:10px 14px; font-size:11px; letter-spacing:.3em; text-transform:uppercase;
          border:1px solid var(--accent-line); background:#fff; cursor:pointer; transition:all .25s ease; }
        .chip.active, .chip:hover { border-color:var(--black); }

        .messages-container { flex:1; overflow-y:auto; padding:40px; }
        .welcome-state { text-align:center; max-width:620px; margin:60px auto; }
        .maya-avatar { width:80px; height:80px; border-radius:50%; margin:0 auto 30px; overflow:hidden; border:2px solid var(--accent-line); }
        .maya-avatar img { width:100%; height:100%; object-fit:cover; }
        .welcome-eyebrow { font-size:11px; font-weight:400; letter-spacing:.4em; text-transform:uppercase; color:var(--soft-gray); margin-bottom:20px; }
        .welcome-title { font-family:'Times New Roman',serif; font-size:clamp(2rem,4vw,3rem); font-weight:200; letter-spacing:-.01em; line-height:1; text-transform:uppercase; margin-bottom:16px; }
        .welcome-description { font-size:16px; line-height:1.6; margin-bottom:28px; color:var(--soft-gray); }
        .style-quickselect { display:grid; grid-template-columns:repeat(3,1fr); gap:15px; margin-top:28px; }
        .style-option { aspect-ratio:1; background:var(--editorial-gray); border:1px solid var(--accent-line); cursor:pointer; transition:all .3s ease; position:relative; overflow:hidden; }
        .style-option:hover { transform:scale(1.03); border-color:var(--black); }
        .style-preview { width:100%; height:100%; display:flex; align-items:center; justify-content:center; font-size:10px; letter-spacing:.2em; text-transform:uppercase; color:var(--soft-gray); }
        .style-label { position:absolute; bottom:0; left:0; right:0; background:linear-gradient(transparent, rgba(10,10,10,.75)); color:#fff; padding:14px 10px 10px; font-size:10px; letter-spacing:.2em; text-transform:uppercase; text-align:center; transform:translateY(100%); transition:transform .3s ease; }
        .style-option:hover .style-label { transform:translateY(0); }

        .message { margin-bottom:30px; max-width:700px; }
        .message.maya { margin-right:auto; }
        .message.user { margin-left:auto; text-align:right; }
        .message-header { display:flex; align-items:center; margin-bottom:12px; gap:12px; }
        .message.user .message-header { justify-content:flex-end; }
        .message-avatar { width:32px; height:32px; border-radius:50%; background:var(--editorial-gray); display:flex; align-items:center; justify-content:center; font-size:10px; color:var(--soft-gray); overflow:hidden; }
        .message-avatar img { width:100%; height:100%; object-fit:cover; }
        .message.user .message-avatar { background:var(--black); color:var(--white); }
        .message-sender { font-size:11px; font-weight:400; letter-spacing:.3em; text-transform:uppercase; color:var(--soft-gray); }
        .message-time { font-size:10px; color:var(--soft-gray); opacity:.6; }
        .message-content { background:var(--editorial-gray); padding:24px; position:relative; }
        .message.user .message-content { background:var(--black); color:var(--white); }
        .message-text { font-size:15px; line-height:1.6; }

        .look-actions { margin-top:16px; display:flex; gap:10px; flex-wrap:wrap; }
        .look-btn { padding:12px 20px; font-size:11px; letter-spacing:.3em; text-transform:uppercase; border:none; color:#fff; background:var(--black); cursor:pointer; transition:all .25s; }
        .look-btn.secondary { background:#777; }
        .look-btn:disabled { background:#bbb; cursor:not-allowed; }

        .image-grid { margin-top:16px; display:grid; grid-template-columns:repeat(2,1fr); gap:16px; }
        .image-item { position:relative; cursor:pointer; }
        .image-item img { width:100%; height:192px; object-fit:cover; transition:transform .2s ease; }
        .image-item:hover img { transform:scale(1.03); }
        .save-btn { position:absolute; top:8px; right:8px; width:32px; height:32px; display:flex; align-items:center; justify-content:center; background:rgba(255,255,255,.9); border:1px solid #e5e5e5; border-radius:50%; transition:all .2s; backdrop-filter:blur(8px); opacity:0; }
        .image-item:hover .save-btn { opacity:1; }
        .save-btn:hover { background:#fff; border-color:#ccc; }

        .typing-indicator { display:flex; align-items:center; gap:12px; margin-bottom:30px; }
        .typing-dots { display:flex; gap:4px; }
        .typing-dot { width:6px; height:6px; border-radius:50%; background:var(--soft-gray); animation:typing 1.4s infinite; }
        .typing-dot:nth-child(2){ animation-delay:.2s; } .typing-dot:nth-child(3){ animation-delay:.4s; }
        @keyframes typing { 0%,60%,100%{opacity:.3;} 30%{opacity:1;} }
        .typing-text { font-size:12px; color:var(--soft-gray); }

        .input-area { padding:30px 40px; border-top:1px solid var(--accent-line); background:#fff; }
        .input-container { display:flex; gap:15px; align-items:flex-end; }
        .input-field { flex:1; border:1px solid var(--accent-line); background:#fff; padding:16px 20px; font-size:14px; line-height:1.4; font-family:inherit; resize:none; min-height:24px; max-height:120px; }
        .input-field:focus { outline:none; border-color:var(--black); }
        .input-field::placeholder { color:var(--soft-gray); text-transform:uppercase; font-size:11px; letter-spacing:.3em; }
        .send-btn { padding:16px 24px; background:var(--black); color:#fff; border:none; font-size:11px; font-weight:400; letter-spacing:.3em; text-transform:uppercase; cursor:pointer; transition:all .3s; }
        .send-btn:hover { background:var(--soft-gray); }
        .send-btn:disabled { background:var(--accent-line); cursor:not-allowed; }

        @media (max-width:768px) {
          .main-container { flex-direction:column; height:auto; }
          .sidebar { width:100%; height:auto; order:2; }
          .chat-area { order:1; min-height:70vh; }
          .messages-container,.input-area,.chat-header { padding:20px; }
          .style-quickselect { grid-template-columns:repeat(2,1fr); }
        }
      `,
        }}
      />

      {/* Hero (unchanged) */}
      <section className="hero">
        <div className="hero-bg">
          <img
            src="https://i.postimg.cc/mkqSzq3M/out-1-20.png"
            alt="Maya - Your Personal Brand Stylist"
          />
        </div>
        <div className="hero-content">
          <div className="hero-eyebrow">Professional photos, no photographer needed</div>
          <h1 className="hero-title">Maya</h1>
          <p className="hero-subtitle">Your Personal Brand Stylist</p>
          <button className="hero-cta" onClick={scrollToChat}>
            Start Creating
          </button>
        </div>
      </section>

      <div className="main-container">
        {/* Sidebar */}
        <aside className="sidebar">
          <div className="sidebar-section">
            <button className="new-session-btn" onClick={startNewSession}>
              New Session
            </button>
          </div>

          <div className="sidebar-section">
            <div className="sidebar-title">Previous Sessions</div>
            <ChatHistoryLinks
              onChatSelect={(chatId) => {
                loadChatHistory(chatId);
                window.history.replaceState({}, '', `/maya?chat=${chatId}`);
              }}
            />
          </div>
        </aside>

        {/* Chat Area */}
        <main className="chat-area">
          {/* Header with INTENT CHIPS (simple, luxe) */}
          <div className="chat-header">
            <h1 className="chat-title">Maya Studio</h1>
            <p className="chat-subtitle">Create photos that build your brand</p>

            {/* Intent chips */}
            <div className="intent-bar" aria-label="Quick Intent">
              {/* Framing */}
              {(['close', 'half', 'full'] as Framing[]).map((f) => (
                <button
                  key={f}
                  className={`chip ${intent.framing === f ? 'active' : ''}`}
                  onClick={() => setIntent({ ...intent, framing: f })}
                  title={`Framing: ${f}`}
                >
                  {f === 'close' ? 'Close-Up' : f === 'half' ? 'Half Body' : 'Full Scene'}
                </button>
              ))}
              {/* Style */}
              {(
                [
                  ['future_ceo', 'Future CEO'],
                  ['off_duty', 'Off-Duty Model'],
                  ['social_queen', 'Social Queen'],
                  ['date_night', 'Date Night'],
                  ['everyday_icon', 'Everyday Icon'],
                  ['power_player', 'Power Player'],
                ] as [Style, string][]
              ).map(([key, label]) => (
                <button
                  key={key}
                  className={`chip ${intent.style === key ? 'active' : ''}`}
                  onClick={() => setIntent({ ...intent, style: key })}
                  title={`Style: ${label}`}
                >
                  {label}
                </button>
              ))}
              {/* Vibe */}
              {(
                [
                  ['quiet_luxury', 'Quiet Luxury'],
                  ['cinematic', 'Cinematic'],
                  ['natural_light', 'Natural Light'],
                  ['studio_clean', 'Studio Clean'],
                ] as [Vibe, string][]
              ).map(([key, label]) => (
                <button
                  key={key}
                  className={`chip ${intent.vibe === key ? 'active' : ''}`}
                  onClick={() => setIntent({ ...intent, vibe: key })}
                  title={`Vibe: ${label}`}
                >
                  {label}
                </button>
              ))}

              {/* Compose button */}
              <button
                className="chip"
                onClick={() => composeWithMaya()}
                title="Ask Maya to compose looks"
                disabled={isTyping}
              >
                Compose Look
              </button>
            </div>
          </div>

          {/* Messages */}
          <div className="messages-container">
            {messages.length === 0 ? (
              <div className="welcome-state">
                <div className="maya-avatar">
                  <img
                    src="https://i.postimg.cc/mkqSzq3M/out-1-20.png"
                    alt="Maya - Your Personal Brand Stylist"
                  />
                </div>
                <div className="welcome-eyebrow">Personal Brand Photos</div>
                <h2 className="welcome-title">Ready to look incredible in every photo?</h2>
                <p className="welcome-description">
                  I’m Maya. Tap a few moods above and I’ll style you like a pro—outfit, light,
                  camera, movement—then I’ll create it for you in one click.
                </p>

                {/* Quick “style” tiles (gray placeholders only) */}
                <div className="style-quickselect">
                  {[
                    ['Future CEO', { style: 'future_ceo' as Style }],
                    ['Off-Duty Model', { style: 'off_duty' as Style }],
                    ['Social Queen', { style: 'social_queen' as Style }],
                    ['Date Night', { style: 'date_night' as Style }],
                    ['Everyday Icon', { style: 'everyday_icon' as Style }],
                    ['Power Player', { style: 'power_player' as Style }],
                  ].map(([label, delta]) => (
                    <div
                      key={label}
                      className="style-option"
                      onClick={() => composeWithMaya(delta)}
                      title={label}
                    >
                      <div className="style-preview">{label}</div>
                      <div className="style-label">Compose with Maya</div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div>
                {messages.map((message, index) => {
                  const isMaya = message.role === 'maya';
                  return (
                    <div key={index} className={`message ${message.role}`}>
                      <div className="message-header">
                        {isMaya && (
                          <>
                            <div className="message-avatar">
                              <img
                                src="https://i.postimg.cc/mkqSzq3M/out-1-20.png"
                                alt="Maya"
                              />
                            </div>
                            <div className="message-sender">Maya</div>
                          </>
                        )}
                        <div className="message-time">{formatTimestamp(message.timestamp)}</div>
                        {!isMaya && (
                          <>
                            <div className="message-sender">{user?.firstName || 'You'}</div>
                            <div className="message-avatar">{user?.firstName?.[0] || 'U'}</div>
                          </>
                        )}
                      </div>

                      <div className="message-content">
                        <div className="message-text">
                          {message.content.split('\n').map((line, i) => (
                            <span key={i}>
                              {line}
                              {i < message.content.split('\n').length - 1 && <br />}
                            </span>
                          ))}
                        </div>

                        {/* If Maya has variants but no images yet, show subtle gray placeholders */}
                        {isMaya && message.variants && !message.imagePreview && (
                          <div className="image-grid" style={{ marginTop: 12 }}>
                            <GrayTile ratio={intent.framing === 'full' ? '4 / 5' : '3 / 4'} />
                            <GrayTile ratio={intent.framing === 'full' ? '4 / 5' : '3 / 4'} />
                          </div>
                        )}

                        {/* Images */}
                        {message.imagePreview && message.imagePreview.length > 0 && (
                          <div className="image-grid">
                            {message.imagePreview.map((imageUrl, imgIndex) => (
                              <div key={imgIndex} className="image-item">
                                <img
                                  src={imageUrl}
                                  alt={`Generated ${imgIndex + 1}`}
                                  onClick={() => setSelectedImage(imageUrl)}
                                />
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    saveToGallery(imageUrl);
                                  }}
                                  disabled={savingImages.has(imageUrl)}
                                  className="save-btn"
                                  title={
                                    savedImages.has(imageUrl)
                                      ? 'Saved to gallery'
                                      : 'Save to gallery'
                                  }
                                >
                                  {savingImages.has(imageUrl) ? (
                                    <div
                                      style={{
                                        width: 14,
                                        height: 14,
                                        border: '2px solid #999',
                                        borderTopColor: 'transparent',
                                        borderRadius: '50%',
                                        animation: 'spin 1s linear infinite',
                                      }}
                                    />
                                  ) : savedImages.has(imageUrl) ? (
                                    <span style={{ color: '#ef4444', fontSize: 14 }}>♥</span>
                                  ) : (
                                    <span style={{ color: '#999', fontSize: 14 }}>♡</span>
                                  )}
                                </button>
                              </div>
                            ))}
                          </div>
                        )}

                        {/* Actions */}
                        {isMaya && message.canGenerate && message.variants && (
                          <div className="look-actions">
                            <button
                              className="look-btn"
                              onClick={() => generateFromMessage(index)}
                              disabled={isGenerating}
                            >
                              {isGenerating
                                ? `Creating... ${generationProgress}%`
                                : 'Create with Maya'}
                            </button>

                            {/* Optionally let them ask Maya for totally new variants */}
                            <button
                              className="look-btn secondary"
                              onClick={() => composeWithMaya()}
                              disabled={isTyping || isGenerating}
                              title="Ask Maya for a fresh direction"
                            >
                              New Look
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  );
                })}

                {/* Typing indicator */}
                {isTyping && (
                  <div className="typing-indicator">
                    <div className="message-avatar">
                      <img
                        src="https://i.postimg.cc/mkqSzq3M/out-1-20.png"
                        alt="Maya"
                      />
                    </div>
                    <div className="typing-dots">
                      <div className="typing-dot"></div>
                      <div className="typing-dot"></div>
                      <div className="typing-dot"></div>
                    </div>
                    <div className="typing-text">Maya is styling your look...</div>
                  </div>
                )}

                <div ref={messagesEndRef} />
              </div>
            )}
          </div>

          {/* Input (kept, but simple) */}
          <div className="input-area">
            <div className="input-container">
              <textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={handleKeyPress}
                className="input-field"
                placeholder="Tell Maya what kind of photos you want to create..."
                rows={1}
                disabled={isTyping}
                style={{ minHeight: '24px', maxHeight: '120px', height: 'auto' }}
                onInput={(e) => {
                  const t = e.target as HTMLTextAreaElement;
                  t.style.height = 'auto';
                  t.style.height = Math.min(t.scrollHeight, 120) + 'px';
                }}
              />
              <button onClick={sendMessage} disabled={!input.trim() || isTyping} className="send-btn">
                Send
              </button>
            </div>
          </div>
        </main>
      </div>

      {/* Image Modal */}
      {selectedImage && (
        <div
          className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50 p-4"
          onClick={() => setSelectedImage(null)}
        >
          <div className="relative max-w-5xl max-h-full">
            <img
              src={selectedImage}
              alt="Full size view"
              className="max-w-full max-h-full object-contain rounded-lg shadow-2xl"
              onClick={(e) => e.stopPropagation()}
            />
            <div className="absolute top-4 right-4 flex gap-2">
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  saveToGallery(selectedImage);
                }}
                disabled={savingImages.has(selectedImage)}
                className="w-10 h-10 flex items-center justify-center bg-white/90 hover:bg-white border border-gray-200 hover:border-gray-300 rounded-full transition-all shadow-lg"
                title={savedImages.has(selectedImage) ? 'Saved to gallery' : 'Save to gallery'}
              >
                {savingImages.has(selectedImage) ? (
                  <div className="w-4 h-4 border border-gray-400 border-t-transparent rounded-full animate-spin"></div>
                ) : savedImages.has(selectedImage) ? (
                  <span className="text-red-500 text-lg">♥</span>
                ) : (
                  <span className="text-gray-400 hover:text-red-500 text-lg transition-colors">♡</span>
                )}
              </button>

              <button
                onClick={() => setSelectedImage(null)}
                className="w-10 h-10 flex items-center justify-center bg-white/90 hover:bg-white text-gray-700 hover:text-black rounded-full transition-all shadow-lg"
                title="Close"
              >
                <span className="text-xl leading-none">×</span>
              </button>
            </div>

            <div className="absolute bottom-4 left-4 bg-black/60 text-white px-4 py-2 rounded-lg backdrop-blur-sm">
              <div className="text-sm font-medium">Maya Personal Brand Photo</div>
              <div className="text-xs text-white/80">Save to use for your content and brand</div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
