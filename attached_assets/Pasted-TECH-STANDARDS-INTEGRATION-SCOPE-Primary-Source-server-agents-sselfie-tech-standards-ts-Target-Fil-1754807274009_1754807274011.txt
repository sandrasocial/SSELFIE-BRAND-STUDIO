TECH STANDARDS INTEGRATION SCOPE:
Primary Source: server/agents/sselfie-tech-standards.ts
Target Files:
server/member-agent-personalities.ts (member-facing agents)
server/agent-personalities-consulting.ts (consulting agents)
KNOWLEDGE INTEGRATION PRIORITIES:
A. Core Architecture Knowledge:

üèóÔ∏è ARCHITECTURE ESSENTIALS:
- React 18 + TypeScript + Vite stack
- Wouter routing (NO Next.js)
- Express.js backend with PostgreSQL
- Replit Auth ‚Üí PostgreSQL users flow
- Drizzle ORM for database operations
B. Critical File Structure:

üìÅ KEY PATHS:
- client/src/pages/ - Page components
- client/src/components/ - Reusable components
- server/routes/ - API endpoints
- shared/schema.ts - Database schemas
C. Authentication Pattern:

üîê AUTH IMPLEMENTATION:
- Frontend: const { user, isAuthenticated } = useAuth()
- Backend: req.isAuthenticated() middleware
- Database: PostgreSQL users table
D. Deployment Knowledge:

üöÄ DEPLOYMENT SPECS:
- Production environment setup
- Database migration procedures
- Authentication flow verification
- Performance optimization guidelines
AGENT-SPECIFIC CUSTOMIZATION:
For each agent, add this section maintaining their unique voice:

**PROJECT KNOWLEDGE**:
- Stack: React 18 + TypeScript + Express
- Database: PostgreSQL with Drizzle ORM
- Auth: Replit Auth with session management
- Routing: Wouter (NO Next.js patterns)
- Structure: client/src/ (frontend), server/ (backend)
MEMBER-FACING AGENTS (Maya, Victoria): Add simplified tech knowledge focused on:
Basic React component understanding
Authentication flows for members
File structure for content creation
Deployment status awareness
CONSULTING AGENTS: Add comprehensive tech knowledge including:
Full stack architecture details
Database schema understanding
Authentication implementation
Deployment procedures
‚è±Ô∏è Implementation Timeline:

Day 1: Core knowledge integration
Day 2: Agent-specific customization
Day 3: Review and refinement
üîç Quality Standards:

Maintain each agent's unique personality
Ensure technical accuracy
Verify authentication patterns
Test knowledge integration
