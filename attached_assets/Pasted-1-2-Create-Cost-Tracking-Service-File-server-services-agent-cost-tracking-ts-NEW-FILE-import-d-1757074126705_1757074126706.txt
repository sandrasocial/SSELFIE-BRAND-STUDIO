1.2 Create Cost Tracking Service
File: server/services/agent-cost-tracking.ts (NEW FILE)

import { db } from '../db';
import { agentCostTracking, agentBudgets } from '../../shared/schema';
import { eq, and, gte, sql } from 'drizzle-orm';
export class AgentCostTrackingService {
  // Track API usage and costs
  static async trackAgentUsage(userId: string, agentId: string, conversationId: string, tokensUsed: number, taskType: string) {
    const estimatedCost = (tokensUsed * 0.000015); // Rough Claude API pricing
    
    await db.insert(agentCostTracking).values({
      userId,
      agentId,
      conversationId,
      tokensUsed,
      estimatedCost: estimatedCost.toFixed(4),
      taskType
    });
    
    // Check budget limits
    return this.checkBudgetLimits(userId, agentId, estimatedCost);
  }
  
  // Check if agent should be paused due to budget
  static async checkBudgetLimits(userId: string, agentId: string, newCost: number) {
    const today = new Date().toISOString().split('T')[0];
    
    const dailyBudget = await db.select().from(agentBudgets)
      .where(and(
        eq(agentBudgets.userId, userId),
        eq(agentBudgets.agentId, agentId),
        eq(agentBudgets.budgetType, 'daily'),
        eq(agentBudgets.isActive, true)
      )).limit(1);
    
    if (dailyBudget.length > 0) {
      const newTotal = parseFloat(dailyBudget[0].currentSpend) + newCost;
      const budgetLimit = parseFloat(dailyBudget[0].budgetLimit);
      
      if (newTotal >= budgetLimit) {
        return { shouldPause: true, reason: 'Daily budget exceeded', remaining: 0 };
      } else if (newTotal >= (budgetLimit * 0.8)) {
        return { shouldPause: false, warning: true, reason: '80% of daily budget used', remaining: budgetLimit - newTotal };
      }
    }
    
    return { shouldPause: false, remaining: 1000 }; // Default high limit
  }
  
  // Get cost summary for dashboard
  static async getCostSummary(userId: string, timeframe: 'today' | 'week' | 'month' = 'today') {
    // Implementation for dashboard cost display
  }
}