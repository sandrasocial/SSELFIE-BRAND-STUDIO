**GOAL**
Resolve frontend error `import_react2.default.use is not a function` by ensuring a single React 19 is used across the app and all sub-deps. Do not print secrets.

--------------------------------
STEP 1 — Inspect current tree
--------------------------------
echo "== Current React tree =="
npm ls react react-dom || true
echo "== Key libs =="
npm ls @stackframe/react wouter @tanstack/react-query || true

--------------------------------
STEP 2 — Upgrade to one React 19 everywhere
--------------------------------
# Try stable React 19 first; if not available in this env, fall back to rc.
set -e
STABLE="19.0.0"
RC="19.0.0-rc.1"

# Try to set stable
npm pkg set dependencies.react="$STABLE" || npm pkg set dependencies.react="$RC"
npm pkg set dependencies.react-dom="$STABLE" || npm pkg set dependencies.react-dom="$RC"

# Ensure @stackframe/react is latest (it expects React 19 features)
npm pkg set dependencies.@stackframe/react="^latest"

# Optional: keep other libs modern/compatible
npm pkg set dependencies.wouter="^3.2.0"
npm pkg set dependencies.@tanstack/react-query="^5.48.0" || true

# React 19 ships its own types; remove v18 types to avoid conflicts
npm pkg delete devDependencies.@types/react || true
npm pkg delete devDependencies.@types/react-dom || true

# Add npm "overrides" to force sub-deps to use the SAME React version
node -e "const fs=require('fs');const p=require('./package.json');p.overrides=p.overrides||{};p.overrides.react=p.dependencies.react;p.overrides['react-dom']=p.dependencies['react-dom'];fs.writeFileSync('package.json',JSON.stringify(p,null,2));"

# Clean & reinstall
rm -rf node_modules package-lock.json
npm i --no-audit --no-fund
npm dedupe

echo "== After install =="
npm ls react react-dom || true

--------------------------------
STEP 3 — Ensure Vite resolves to the one true React
--------------------------------
# Add alias to vite.config.ts (create if missing), without breaking existing config
if [ ! -f vite.config.ts ]; then
  cat > vite.config.ts <<'EOF'
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      react: path.resolve(__dirname, 'node_modules/react'),
      'react-dom': path.resolve(__dirname, 'node_modules/react-dom'),
    },
  },
});
EOF
else
  node -e "const fs=require('fs');let t=fs.readFileSync('vite.config.ts','utf8');if(!t.includes('alias:')){if(!t.includes(\"import path from 'path'\")) t=\"import path from 'path';\\n\"+t;t=t.replace(/defineConfig\\((\\{)/,'defineConfig($1\\n  resolve: { alias: {\\n    react: path.resolve(__dirname, \\\"node_modules/react\\\"),\\n    \\\"react-dom\\\": path.resolve(__dirname, \\\"node_modules/react-dom\\\")\\n  } },');fs.writeFileSync('vite.config.ts',t);}console.log('vite.config.ts alias ensured');"
fi

--------------------------------
STEP 4 — Add one-line sanity log (React.use must exist)
--------------------------------
# Insert once in src/main.tsx (or src/App.tsx) if not present
node -e "const fs=require('fs');['src/main.tsx','src/App.tsx'].forEach(f=>{if(fs.existsSync(f)){let s=fs.readFileSync(f,'utf8');if(!s.includes('React sanity')){s = \"import * as React from 'react';\\n\"+s; s+=\"\\nif (import.meta.env?.DEV) { console.log('React sanity:', { version: React.version, hasUse: typeof (React).use === 'function' }); }\\n\"; fs.writeFileSync(f,s);}});"

--------------------------------
STEP 5 — Hard rebuild
--------------------------------
rm -rf node_modules/.vite .vite dist
npm run build || true
npm run dev & sleep 3

--------------------------------
STEP 6 — Acceptance
--------------------------------
# EXPECT: Browser console logs -> React sanity: { version: '19.x', hasUse: true }
# Then /handler/sign-up renders, and <UserButton /> works.
