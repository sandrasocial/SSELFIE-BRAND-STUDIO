// Approval queue for customer-facing content
export const approvalQueue = pgTable("approval_queue", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").references(() => users.id, { onDelete: "cascade" }).notNull(),
  agentId: varchar("agent_id").notNull(),
  contentType: varchar("content_type").notNull(), // "email", "social_post", "ad_campaign", "website_change"
  contentTitle: varchar("content_title").notNull(),
  contentPreview: text("content_preview").notNull(),
  fullContent: jsonb("full_content").notNull(),
  targetAudience: varchar("target_audience"),
  impactLevel: varchar("impact_level").default("medium"), // "low", "medium", "high", "critical"
  estimatedCost: decimal("estimated_cost", { precision: 10, scale: 2 }),
  status: varchar("status").default("pending"), // "pending", "approved", "rejected", "modified"
  adminComments: text("admin_comments"),
  originalConversationId: varchar("original_conversation_id"),
  createdAt: timestamp("created_at").defaultNow(),
  reviewedAt: timestamp("reviewed_at"),
  approvedBy: varchar("approved_by"),
}, (table) => [
  index("idx_approval_queue_status").on(table.status, table.createdAt),
  index("idx_approval_queue_user").on(table.userId, table.status),
]);

// Agent pause/handoff requests
export const agentHandoffRequests = pgTable("agent_handoff_requests", {
  id: serial("id").primaryKey(),
  fromAgentId: varchar("from_agent_id").notNull(),
  toTargetType: varchar("to_target_type").notNull(), // "sandra", "agent", "approval_queue"
  toTargetId: varchar("to_target_id"), // Sandra's ID or another agent ID
  requestType: varchar("request_type").notNull(), // "approval_needed", "guidance_required", "decision_needed"
  contextSummary: text("context_summary").notNull(),
  urgencyLevel: varchar("urgency_level").default("normal"), // "low", "normal", "high", "urgent"
  conversationId: varchar("conversation_id"),
  originalTask: text("original_task"),
  currentProgress: jsonb("current_progress"),
  status: varchar("status").default("pending"), // "pending", "assigned", "completed", "escalated"
  responseRequired: boolean("response_required").default(true),
  createdAt: timestamp("created_at").defaultNow(),
  respondedAt: timestamp("responded_at"),
});