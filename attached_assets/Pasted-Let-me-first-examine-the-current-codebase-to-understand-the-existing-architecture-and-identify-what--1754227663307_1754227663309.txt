Let me first examine the current codebase to understand the existing architecture and identify what's already built for the Build/Training functionality.

[Search Results] { "summary": "UNLIMITED ACCESS: Found 100 files across entire repository (LIMIT REACHED - more files available)", "results": [ { "fileName": "api/index.js", "content": "// Production API handler for Replit deployment\nconst express = require('express');\nconst path = require('path');\n\nconst app = express();\n\nlet serverInitialized = false;\nlet initializationPromise = null;\n\n// Synchronous server initialization with proper error handling\nfunction initializeServer() {\n if (serverInitialized) {\n return Promise.resolve(app);\n }\n \n if (initializationPromise) {\n return initializationPromise;\n }\n \n initializationPromise = (async () => {\n try {\n console.log('üöÄ Initializing production server...');\n \n // Import the compiled server code\n const { default: createApp } = await import('../dist/index.js');\n const initializedApp = await createApp();\n \n console.log('‚úÖ Production server initialized successfully');\n serverInitialized = true;\n \n return initializedApp || app;\n } catch (error) {\n console.error('‚ùå Failed to initialize server:', error);\n // Return basic express app as fallback\n return app;\n }\n })();\n \n return initializationPromise;\n}\n\n// Middleware to ensure server is initialized before handling requests\napp.use(async (req, res, next) => {\n if (!serverInitialized) {\n try {\n await initializeServer();\n } catch (error) {\n console.error('Server initialization failed:', error);\n return res.status(500).json({ \n error: 'Server initialization failed',\n message: 'Please try again in a moment'\n });\n }\n }\n next();\n});\n\n// Initialize server immediately\ninitializeServer();\n\nmodule.exports = app;", "reason": "üìÅ Code file" }, { "fileName": "client/features/README.md", "content": "# Feature-based Organization Structure\n\nThis directory contains feature-specific components and logic organized by domain.\n\n## Directory Structure\n\n\n/features\n /chat - Chat interface components\n /builder - Studio builder components\n /settings - User settings and preferences\n\n\n## Guidelines\n\n1. Each feature directory should contain:\n - Components\n - Feature-specific hooks\n - Feature-specific utilities\n - Tests\n - Documentation\n\n2. Shared code should be moved to:\n - /shared/ui for common UI components\n - /shared/hooks for common hooks\n - /shared/utils for common utilities\n\n3. Feature Integration:\n - Use lazy loading for feature modules\n - Maintain clear boundaries between features\n - Document dependencies between features", "reason": "üíª Code: build" }, { "fileName": "client/index.html", "content": "<!DOCTYPE html>\n<html lang="en">\n <head>\n <meta charset="UTF-8" />\n <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />\n \n <!-- Primary Meta Tags -->\n <title>SSELFIE Studio - AI Personal Branding Platform | Transform Selfies Into Business</title>\n <meta name="title" content="SSELFIE Studio - AI Personal Branding Platform | Transform Selfies Into Business" />\n <meta name="description" content="Build your personal brand with AI. Upload selfies, get professional photos, and launch your business in 20 minutes. Maya AI photographer & Victoria AI strategist included. Start free today." />\n <meta name="keywords" content="AI personal branding, AI photographer, personal brand builder, selfie to professional photos, business launch platform, AI brand strategist, professional headshots AI, personal branding tools" />\n <meta name="author" content="Sandra Sigurj√≥nsd√≥ttir" />\n <meta name="robots" content="index, follow" />\n <link rel="canonical" href="https://sselfie.ai" />\n \n <!-- Open Graph / Facebook -->\n <meta property="og:type" content="website" />\n <meta property="og:url" content="https://sselfie.ai" />\n <meta property="og:title" content="SSELFIE Studio - AI Personal Branding Platform" />\n <meta property="og:description" content="Build your personal brand with AI. Upload selfies, get professional photos, and launch your business in 20 minutes. Start free today." />\n <meta property="og:image" content="https://sselfie.ai/og-image.jpg" />\n <meta property="og:image:width" content="1200" />\n <meta property="og:image:height" content="630" />\n <meta property="og:site_name" content="SSELFIE Studio" />\n <meta property="og:locale" content="en_US" />\n \n <!-- Twitter -->\n <meta property="twitter:card" content="summary_large_image" />\n <meta property="twitter:url" content="https://sselfie.ai" />\n <meta property="twitter:title" content="SSELFIE Studio - AI Personal Bran", "reason": "üíª Code: build, üíª Code: upload" }, { "fileName": "client/src/App.tsx", "content": "import React, { useEffect, lazy, Suspense } from "react";\nimport { Switch, Route, useLocation, Redirect } from "wouter";\nimport { queryClient } from "./lib/queryClient";\nimport { QueryClientProvider } from "@tanstack/react-query";\nimport { Toaster } from "@/components/ui/toaster";\nimport { TooltipProvider } from "@/components/ui/tooltip";\nimport { useAuth } from "@/hooks/use-auth";\nimport { useQuery } from "@tanstack/react-query";\nimport { redirectToHttps, detectBrowserIssues, showDomainHelp } from "./utils/browserCompat";\n// import { pwaManager } from "./utils/pwa";\nimport NotFound from "@/pages/not-found";\nimport Landing from "@/pages/landing";\nimport EditorialLanding from "@/pages/editorial-landing";\nimport Pricing from "@/pages/pricing";\nimport Workspace from "@/pages/workspace";\nimport Onboarding from "@/pages/onboarding";\nimport About from "@/pages/about";\nimport Blog from "@/pages/blog";\nimport Contact from "@/pages/contact";\nimport FAQ from "@/pages/faq";\nimport Terms from "@/pages/terms";\nimport Privacy from "@/pages/privacy";\nimport HowItWorks from "@/pages/how-it-works";\nimport SelfieGuide from "@/pages/selfie-guide";\nimport Profile from "@/pages/profile";\nimport PaymentSuccess from "@/pages/payment-success";\nimport Checkout from "@/pages/checkout";\nimport SimpleCheckout from "@/pages/simple-checkout";\nimport ThankYou from "@/pages/thank-you";\nimport SandraPhotoshoot from "@/pages/sandra-photoshoot";\nimport SandraAI from "@/pages/sandra-ai";\nimport RachelChat from "@/pages/rachel-chat";\nimport RachelActivation from "@/pages/rachel-activation";\nimport SSELFIEGallery from "@/pages/sselfie-gallery";\nimport AIGenerator from "@/pages/ai-generator";\nimport AIPhotoshoot from "@/pages/ai-photoshoot";\nimport SimpleTraining from "@/pages/simple-training";\n\n\nimport AdminDashboard from "@/pages/admin-dashboard";\nimport AdminBusinessOverview from "@/pages/admin-business-overview";\nimport AdminConsultingAgents from "@/pages/admin-consulting-agents";\nimport AdminSubscri", "reason": "üîë Client source file, üíª Code: training, üíª Code: build, üíª Code: model, üìÅ Code file" }, { "fileName": "client/src/components/AdminLayout.tsx", "content": "import { ReactNode } from 'react';\nimport { Link } from 'wouter';\n\ninterface AdminLayoutProps {\n children: ReactNode;\n title: string;\n subtitle?: string;\n}\n\nexport default function AdminLayout({ children, title, subtitle }: AdminLayoutProps) {\n const sidebarItems = [\n { \n href: '/admin', \n label: 'O V E R V I E W', \n icon: '‚óä',\n image: '/gallery/sandra-power-1.jpg'\n },\n { \n href: '/admin/users', \n label: 'U S E R S', \n icon: '‚óä',\n image: '/gallery/sandra-confidence-1.jpg'\n },\n { \n href: '/admin/content', \n label: 'C O N T E N T', \n icon: '‚óä',\n image: '/gallery/sandra-creative-1.jpg'\n },\n { \n href: '/admin/analytics', \n label: 'A N A L Y T I C S', \n icon: '‚óä',\n image: '/gallery/sandra-success-1.jpg'\n },\n { \n href: '/admin/settings', \n label: 'S E T T I N G S', \n icon: '‚óä',\n image: '/gallery/sandra-luxury-1.jpg'\n }\n ];\n\n return (\n <div className="min-h-screen bg-white flex">\n {/* Luxury Sidebar /}\n <div className="w-80 bg-black text-white flex flex-col">\n {/ Logo /}\n <div className="p-8 border-b border-gray-800">\n <Link href="/">\n <div \n className="text-2xl font-light tracking-[0.2em] text-center"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {'S S E L F I E'.split('').join(' ')}\n </div>\n <div \n className="text-sm font-light tracking-[0.3em] text-center mt-2 text-gray-400"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {'A D M I N S T U D I O'.split('').join(' ')}\n </div>\n </Link>\n </div>\n\n {/ Navigation Cards /}\n <div className="flex-1 p-6 space-y-4">\n {sidebarItems.map((item) => (\n <Link key={item.href} href={item.href}>\n <div className="relative bg-white rounded-lg overfl", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/AdminNavigation.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/use-auth';\n\ninterface AdminNavigationProps {\n transparent?: boolean;\n}\n\nexport function AdminNavigation({ transparent = true }: AdminNavigationProps) {\n const [, setLocation] = useLocation();\n const [location] = useLocation();\n const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n const [scrolled, setScrolled] = useState(false);\n const { user } = useAuth();\n const [isLoading, setIsLoading] = useState(false);\n\n useEffect(() => {\n const handleScroll = () => {\n const isScrolled = window.scrollY > 50;\n setScrolled(isScrolled);\n };\n\n window.addEventListener('scroll', handleScroll);\n return () => window.removeEventListener('scroll', handleScroll);\n }, []);\n\n // Ensure page starts at top\n useEffect(() => {\n window.scrollTo(0, 0);\n }, []);\n\n const isActive = (path: string) => {\n if (path === '/admin-dashboard' && location === '/admin-dashboard') return true;\n if (path !== '/admin-dashboard' && location.startsWith(path)) return true;\n return false;\n };\n \n // Determine current account from auth state\n const currentAccount = user?.email || 'ssa@ssasocial.com';\n\n const accounts = [\n { email: 'ssa@ssasocial.com', label: 'SSA Admin' },\n { email: 'shannon@soulresets.com', label: 'Shannon' }\n ];\n\n // Admin navigation items\n const navItems = [\n { path: '/workspace', label: 'Workspace' },\n { path: '/visual-editor', label: 'Visual Editor' },\n { path: '/analytics', label: 'Analytics' },\n ];\n\n const switchAccount = async (email: string) => {\n if (email === currentAccount || isLoading) return;\n \n setIsLoading(true);\n try {\n if (email === 'shannon@soulresets.com') {\n // Switch to Shannon's account\n const response = await fetch('/api/admin/impersonate-user', {\n method: 'POST',\n headers: { \n 'Content-Type': 'application/json',\n ", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/AgentSystemFixed.tsx", "content": "", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/BrandedLoginButton.tsx", "content": "interface BrandedLoginButtonProps {\n text?: string;\n subtitle?: string;\n className?: string;\n showBrand?: boolean;\n}\n\nexport default function BrandedLoginButton({ \n text = "Sign in to continue",\n subtitle = "Access your AI photography studio",\n className = "",\n showBrand = true \n}: BrandedLoginButtonProps) {\n\n const handleLogin = () => {\n window.location.href = "/login";\n };\n\n return (\n <div className={text-center ${className}}>\n {showBrand && (\n <div className="mb-6">\n <h2 className="font-serif text-2xl font-light text-black mb-2">\n SSELFIE STUDIO\n </h2>\n <p className="text-gray-600 text-sm">\n {subtitle}\n </p>\n </div>\n )}\n\n <button\n onClick={handleLogin}\n className="bg-black text-white py-3 px-8 font-medium tracking-wide uppercase text-sm hover:bg-gray-900 transition-colors w-full max-w-xs"\n >\n {text}\n </button>\n\n <p className="text-xs text-gray-500 mt-4 leading-relaxed">\n Secure authentication ‚Ä¢ Your data is protected\n </p>\n </div>\n );\n}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/Card.tsx", "content": "import React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface CardProps {\n children: React.ReactNode;\n className?: string;\n variant?: 'default' | 'elevated' | 'outlined' | 'luxury';\n padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';\n}\n\nexport const Card: React.FC<CardProps> = ({\n children,\n className,\n variant = 'default',\n padding = 'md',\n ...props\n}) => {\n const variantClasses = {\n default: 'bg-white border border-gray-200 rounded-lg',\n elevated: 'bg-white shadow-lg rounded-lg border border-gray-100',\n outlined: 'bg-transparent border-2 border-gray-300 rounded-lg',\n luxury: 'bg-gradient-to-b from-primary-50 to-white border border-accent-gold/20 rounded-lg shadow-xl'\n };\n\n const paddingClasses = {\n none: '',\n sm: 'p-3',\n md: 'p-6',\n lg: 'p-8',\n xl: 'p-12'\n };\n\n return (\n <div\n className={cn(\n variantClasses[variant],\n paddingClasses[padding],\n 'transition-all duration-300 ease-in-out',\n className\n )}\n {...props}\n >\n {children}\n </div>\n );\n};", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/ComponentDemo.tsx", "content": "import React, { useState } from 'react';\n\ninterface ComponentDemoProps {\n title?: string;\n onAction?: () => void;\n}\n\nconst ComponentDemo: React.FC<ComponentDemoProps> = ({ \n title = 'Multi-Agent Coordination & Delegation Component',\n onAction \n}) => {\n const [isActive, setIsActive] = useState(false);\n\n const handleClick = () => {\n setIsActive(!isActive);\n onAction?.();\n };\n\n return (\n <div className="luxury-component">\n <style jsx>{\n .luxury-component {\n max-width: 800px;\n margin: 0 auto;\n padding: 3rem 2rem;\n background: #ffffff;\n font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n }\n \n .luxury-headline {\n font-family: 'Times New Roman', serif;\n font-size: 2.5rem;\n font-weight: 400;\n color: #0a0a0a;\n margin: 0 0 1.5rem 0;\n line-height: 1.1;\n letter-spacing: -0.02em;\n }\n \n .luxury-description {\n font-size: 1.125rem;\n line-height: 1.6;\n color: #666666;\n margin: 0 0 2rem 0;\n }\n \n .luxury-button {\n background: ${isActive ? '#333333' : '#0a0a0a'};\n color: #ffffff;\n border: none;\n padding: 1rem 2rem;\n font-size: 1rem;\n font-weight: 500;\n cursor: pointer;\n transition: all 0.3s ease;\n text-transform: uppercase;\n letter-spacing: 0.1em;\n }\n \n .luxury-button:hover {\n background: #333333;\n transform: translateY(-2px);\n box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n }\n \n .luxury-status {\n margin-top: 1.5rem;\n padding: 1rem;\n background: #f5f5f5;\n color: #666666;\n font-style: italic;\n }\n }</style>\n \n <h1 className="luxury-headline">{title}</h1>\n <p className="luxury-description">\n T", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/DashboardHero.tsx", "content": "import React from 'react';\n\ninterface DashboardHeroProps {\n totalUsers: number;\n totalRevenue: number;\n premiumUsers: number;\n monthlyGrowth: number;\n}\n\nexport const DashboardHero: React.FC<DashboardHeroProps> = ({\n totalUsers,\n totalRevenue,\n premiumUsers,\n monthlyGrowth\n}) => {\n return (\n <div className="bg-white border-b border-gray-200">\n <div className="max-w-7xl mx-auto px-8 py-16">\n {/ Hero Header /}\n <div className="mb-16">\n <h1 className="text-6xl font-normal text-black mb-4" style={{ fontFamily: 'Times New Roman, serif' }}>\n SSELFIE Studio\n </h1>\n <p className="text-2xl text-gray-600 font-light leading-relaxed max-w-2xl">\n Administrative Dashboard\n </p>\n </div>\n\n {/ Metrics Grid /}\n <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">\n {/ Total Users /}\n <div className="bg-gray-50 p-8 border border-gray-200">\n <div className="mb-6">\n <h3 className="text-sm font-medium text-gray-500 uppercase tracking-widest mb-2">\n Total Users\n </h3>\n <p className="text-4xl font-light text-black" style={{ fontFamily: 'Times New Roman, serif' }}>\n {totalUsers.toLocaleString()}\n </p>\n </div>\n <div className="text-sm text-gray-600">\n Active community members\n </div>\n </div>\n\n {/ Total Revenue /}\n <div className="bg-gray-50 p-8 border border-gray-200">\n <div className="mb-6">\n <h3 className="text-sm font-medium text-gray-500 uppercase tracking-widest mb-2">\n Total Revenue\n </h3>\n <p className="text-4xl font-light text-black" style={{ fontFamily: 'Times New Roman, serif' }}>\n ‚Ç¨{totalRevenue.toLocaleString()}\n </p>\n </div>\n <div className="text-sm text", "reason": "üîë Client source file, üíª Code: training, üíª Code: build, üíª Code: flux, üìÅ Code file" }, { "fileName": "client/src/components/EditorialGrid.tsx", "content": "import React from 'react';\n\nexport const EditorialGrid: React.FC = () => {\n return (\n <section className="py-20 bg-white">\n <div className="max-w-7xl mx-auto px-4">\n <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-12">\n {/ Feature Block 1 /}\n <div className="space-y-4">\n <h3 className="font-times-new-roman text-2xl tracking-tight">Creative Vision</h3>\n <p className="text-gray-600 leading-relaxed">\n Transform your artistic concepts into compelling visual narratives.\n </p>\n </div>\n\n {/ Feature Block 2 /}\n <div className="space-y-4">\n <h3 className="font-times-new-roman text-2xl tracking-tight">Editorial Excellence</h3>\n <p className="text-gray-600 leading-relaxed">\n Curate your content with the precision of a luxury magazine editor.\n </p>\n </div>\n\n {/ Feature Block 3 /}\n <div className="space-y-4">\n <h3 className="font-times-new-roman text-2xl tracking-tight">Digital Atelier</h3>\n <p className="text-gray-600 leading-relaxed">\n Your sophisticated workspace for creating timeless digital content.\n </p>\n </div>\n </div>\n </div>\n </section>\n );\n};", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/EditorialHero.tsx", "content": "import React from 'react';\n\nexport const EditorialHero: React.FC = () => {\n return (\n <section className="relative h-screen flex items-center justify-center bg-black text-white">\n <div className="absolute inset-0 z-0">\n <div className="absolute inset-0 bg-black/60"></div>\n </div>\n \n <div className="relative z-10 max-w-5xl mx-auto px-4 text-center">\n <h1 className="font-times-new-roman text-6xl md:text-7xl lg:text-8xl tracking-tighter mb-8">\n SSELFIE Studio\n </h1>\n <p className="text-xl md:text-2xl font-light tracking-wide max-w-2xl mx-auto">\n Where creativity meets editorial sophistication\n </p>\n </div>\n </section>\n );\n};", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/ElenaTestWorking.tsx", "content": "", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/Hero.tsx", "content": "import React from 'react';\n\nconst Hero: React.FC = () => {\n return (\n <div className="bg-white">\n <div className="max-w-7xl mx-auto px-8 py-24">\n <div className="text-center space-y-12">\n {/ Main Headline /}\n <div className="space-y-6">\n <h1 className="text-6xl md:text-7xl font-light text-black leading-tight" style={{ fontFamily: 'Times New Roman, serif' }}>\n Command Your\n <br />\n <span className="italic">Creative Vision</span>\n </h1>\n \n <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">\n The sophisticated admin interface for SSELFIE Studio.\n Monitor your platform, analyze user behavior, and orchestrate growth\n with editorial precision.\n </p>\n </div>\n\n {/ Stats Display /}\n <div className="grid grid-cols-1 md:grid-cols-3 gap-16 max-w-4xl mx-auto pt-16">\n <div className="text-center space-y-2">\n <div className="text-4xl font-light text-black" style={{ fontFamily: 'Times New Roman, serif' }}>\n 1,247\n </div>\n <div className="text-sm uppercase tracking-wider text-gray-600">\n Total Users\n </div>\n </div>\n \n <div className="text-center space-y-2">\n <div className="text-4xl font-light text-black" style={{ fontFamily: 'Times New Roman, serif' }}>\n ‚Ç¨15,132\n </div>\n <div className="text-sm uppercase tracking-wider text-gray-600">\n Monthly Revenue\n </div>\n </div>\n \n <div className="text-center space-y-2">\n <div className="text-4xl font-light text-black" style={{ fontFamily: 'Times New Roman, serif' }}>\n 324\n </div>\n <div className="text-sm uppercase tracking-wider text-gray-", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/HeroFullBleed.tsx", "content": "interface HeroFullBleedProps {\n backgroundImage: string;\n tagline?: string;\n title: string | React.ReactNode;\n subtitle?: string;\n ctaText?: string;\n ctaLink?: string;\n overlay?: number;\n alignment?: 'left' | 'center';\n fullHeight?: boolean;\n}\n\nexport const HeroFullBleed: React.FC<HeroFullBleedProps> = ({\n backgroundImage,\n tagline,\n title,\n subtitle,\n ctaText,\n ctaLink,\n overlay = 0.4,\n alignment = 'center',\n fullHeight = true\n}) => {\n const handleCTAClick = (e: React.MouseEvent) => {\n if (ctaLink?.startsWith('#')) {\n e.preventDefault();\n const element = document.querySelector(ctaLink);\n element?.scrollIntoView({ behavior: 'smooth' });\n }\n };\n\n return (\n <section \n className={relative w-full ${fullHeight ? 'h-screen' : 'min-h-[600px]'} flex items-center overflow-hidden bg-luxury-black}\n >\n {/ Background Image /}\n <div className="absolute inset-0 z-0">\n <img \n src={backgroundImage} \n alt=""\n className="w-full h-full object-cover editorial-hover"\n />\n <div \n className="absolute inset-0 bg-black"\n style={{ opacity: overlay }}\n />\n </div>\n \n {/ Content Container /}\n <div className="relative z-10 w-full h-full flex items-center justify-center">\n <div className={max-w-6xl mx-auto px-8 ${alignment === 'center' ? 'text-center' : ''}}>\n \n {/ Top Tagline /}\n {tagline && (\n <p className="text-xs tracking-ultra-wide uppercase text-white/60 mb-8 system-font font-light">\n {tagline}\n </p>\n )}\n \n {/ Main Title - Ultra-Stretched /}\n <h1 className="hero-title text-white text-[clamp(4rem,12vw,10rem)] mb-8">\n {title}\n </h1>\n \n {/ Subtitle /}\n {subtitle && (\n <p className="text-2xl tracking-ultra-wide uppercase text-white/80 mb-12 system-font font-light">\n ", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/LoginPrompt.tsx", "content": "import { Link } from "wouter";\n\ninterface LoginPromptProps {\n title?: string;\n message?: string;\n showFeatures?: boolean;\n}\n\nexport default function LoginPrompt({ \n title = "Access Your AI Studio",\n message = "Sign in to continue with your personalized AI photography experience",\n showFeatures = true \n}: LoginPromptProps) {\n\n const handleLogin = () => {\n window.location.href = "/login";\n };\n\n return (\n <div className="min-h-screen bg-white flex items-center justify-center px-4">\n <div className="max-w-lg w-full text-center">\n {/ SSELFIE Branding /}\n <div className="mb-12">\n <h1 className="font-serif text-4xl font-light text-black mb-4">\n SSELFIE STUDIO\n </h1>\n <h2 className="font-serif text-2xl font-light text-black mb-4">\n {title}\n </h2>\n <p className="text-gray-600 text-lg leading-relaxed">\n {message}\n </p>\n </div>\n\n {/ Login Card /}\n <div className="bg-gray-50 border border-gray-200 p-8 mb-8">\n <button\n onClick={handleLogin}\n className="w-full bg-black text-white py-4 px-8 font-medium tracking-wide uppercase text-sm hover:bg-gray-900 transition-colors mb-6"\n >\n Sign In to Continue\n </button>\n\n <p className="text-xs text-gray-500 leading-relaxed">\n Secure sign-in ‚Ä¢ Your personal AI models and data are protected\n </p>\n </div>\n\n {showFeatures && (\n <div className="space-y-3 text-sm text-gray-700">\n <div className="font-medium text-black">Your AI Studio includes:</div>\n <div>Personal FLUX model training with your selfies</div>\n <div>Maya AI photographer for editorial image generation</div>\n <div>Victoria AI strategist for business development</div>\n <div>Professional landing page templates</div>\n <div>Unlimited creative possibilities</div>\n ", "reason": "üîë Client source file, üíª Code: training, üíª Code: model, üíª Code: flux, üìÅ Code file" }, { "fileName": "client/src/components/LuxuryChatInterface.tsx", "content": "import React, { useState } from 'react';\n\ninterface Message {\n id: string;\n type: 'user' | 'agent';\n content: string;\n timestamp: Date;\n agentName?: string;\n}\n\ninterface LuxuryChatInterfaceProps {\n agentName: string;\n agentRole: string;\n status: 'active' | 'working' | 'thinking' | 'offline';\n onSendMessage?: (message: string) => void;\n messages?: Message[];\n}\n\nconst LuxuryChatInterface: React.FC<LuxuryChatInterfaceProps> = ({\n agentName,\n agentRole,\n status,\n onSendMessage,\n messages = []\n}) => {\n const [inputValue, setInputValue] = useState('');\n\n const handleSubmit = (e: React.FormEvent) => {\n e.preventDefault();\n if (inputValue.trim() && onSendMessage) {\n onSendMessage(inputValue.trim());\n setInputValue('');\n }\n };\n\n const statusColors = {\n active: 'text-green-600',\n working: 'text-blue-600',\n thinking: 'text-yellow-600',\n offline: 'text-gray-400'\n };\n\n const statusDots = {\n active: 'bg-green-500',\n working: 'bg-blue-500 animate-pulse',\n thinking: 'bg-yellow-500 animate-pulse',\n offline: 'bg-gray-400'\n };\n\n return (\n <div className="h-full flex flex-col bg-white border border-gray-200">\n \n {/ Chat Header /}\n <header className="border-b border-gray-200 p-6">\n <div className="flex items-center justify-between">\n <div>\n <h2 className="text-xl font-serif text-black">{agentName}</h2>\n <p className="text-sm text-gray-600 mt-1">{agentRole}</p>\n </div>\n <div className="flex items-center space-x-2">\n <div className={w-2 h-2 rounded-full ${statusDots[status]}} />\n <span className={text-xs uppercase tracking-wide ${statusColors[status]}}>\n {status}\n </span>\n </div>\n </div>\n </header>\n\n {/ Messages Area /}\n <div className="flex-1 overflow-y-auto p-6 space-y-6">\n {messages.length === 0 ? (\n <div className="text-center py-12">\n <", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/LuxuryHero.tsx", "content": "import React from 'react';\n\ninterface LuxuryHeroProps {\n headline: string;\n subheadline: string;\n ctaText: string;\n backgroundImage?: string;\n onCtaClick: () => void;\n}\n\nexport const LuxuryHero: React.FC<LuxuryHeroProps> = ({\n headline,\n subheadline,\n ctaText,\n backgroundImage,\n onCtaClick\n}) => {\n return (\n <section className="luxury-hero">\n <div className="hero-container">\n <div className="hero-content">\n <h1 className="hero-headline">\n {headline}\n </h1>\n <p className="hero-subheadline">\n {subheadline}\n </p>\n <button \n className="hero-cta"\n onClick={onCtaClick}\n aria-label={ctaText}\n >\n {ctaText}\n </button>\n </div>\n {backgroundImage && (\n <div className="hero-image">\n <img \n src={backgroundImage} \n alt="SSELFIE luxury branding"\n loading="eager"\n />\n </div>\n )}\n </div>\n\n <style jsx>{\n .luxury-hero {\n position: relative;\n min-height: 100vh;\n display: flex;\n align-items: center;\n background: #ffffff;\n overflow: hidden;\n }\n\n .hero-container {\n max-width: 1400px;\n margin: 0 auto;\n padding: 0 2rem;\n display: grid;\n grid-template-columns: 1fr 1fr;\n gap: 4rem;\n align-items: center;\n width: 100%;\n }\n\n .hero-content {\n z-index: 2;\n }\n\n .hero-headline {\n font-family: 'Times New Roman', serif;\n font-size: clamp(3rem, 6vw, 5rem);\n font-weight: 400;\n line-height: 1.1;\n color: #0a0a0a;\n margin: 0 0 1.5rem 0;\n letter-spacing: -0.02em;\n }\n\n .hero-subheadline {\n font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n fo", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/MayaTestWorking.tsx", "content": "", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/MoodboardSection.tsx", "content": "interface MoodboardSectionProps {\n title: string;\n images: string[];\n backgroundColor?: string;\n padding?: string;\n}\n\nexport const MoodboardSection: React.FC<MoodboardSectionProps> = ({\n title,\n images\n}) => {\n return (\n <div className=\"text-center\">\n <h4 className=\"font-serif text-lg mb-6 tracking-wide\">{title}</h4>\n <div className=\"grid grid-cols-1 gap-4\">\n {images.map((image, index) => (\n <div key={index} className=\"aspect-[4/5] overflow-hidden\">\n <img \n src={image} \n alt={${title} ${index + 1}}\n className=\"w-full h-full object-cover\"\n />\n </div>\n ))}\n </div>\n </div>\n );\n};\n", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/NewComponent.tsx", "content": "", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/PreviewFix.tsx", "content": "import React from 'react';\n\nexport default function PreviewFix() {\n return (\n <div className=\"min-h-screen bg-white p-8\">\n <div className=\"max-w-4xl mx-auto\">\n <h1 className=\"text-4xl font-bold text-black mb-8\" style={{ fontFamily: 'Times New Roman, serif' }}>\n IFRAME PREVIEW WORKING\n </h1>\n \n <div className=\"bg-gray-50 border border-gray-200 p-8 mb-8\">\n <h2 className=\"text-2xl font-semibold mb-4\">Status: OPERATIONAL</h2>\n <div className=\"space-y-3\">\n <div className=\"flex justify-between\">\n <span>Iframe Loading:</span>\n <span className=\"text-green-600 font-semibold\">‚úì SUCCESS</span>\n </div>\n <div className=\"flex justify-between\">\n <span>Cross-Origin Issues:</span>\n <span className=\"text-green-600 font-semibold\">‚úì RESOLVED</span>\n </div>\n <div className=\"flex justify-between\">\n <span>Agent File Creation:</span>\n <span className=\"text-green-600 font-semibold\">‚úì WORKING</span>\n </div>\n <div className=\"flex justify-between\">\n <span>Development Preview:</span>\n <span className=\"text-green-600 font-semibold\">‚úì ACTIVE</span>\n </div>\n </div>\n </div>\n\n <div className=\"bg-blue-50 border border-blue-200 p-6\">\n <h3 className=\"text-lg font-semibold mb-2\">Solution Applied</h3>\n <p className=\"text-gray-700\">\n Updated iframe source from protected routes to public /about route. \n This resolves the 403 Forbidden errors while maintaining live preview functionality.\n </p>\n </div>\n </div>\n </div>\n );\n}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/QuickAccessPanel.tsx", "content": "import React from 'react';\n\nexport default function QuickAccessPanel() {\n return (\n <div className=\"fixed bottom-6 right-6 z-50\">\n <div className=\"bg-white border-2 border-black shadow-lg p-4 min-w-[200px]\">\n <h3 className=\"text-sm font-medium mb-3 text-center uppercase tracking-wide\" \n style={{ fontFamily: 'Times New Roman, serif' }}>\n Quick Access\n </h3>\n <div className=\"space-y-2\">\n <button\n onClick={() => window.open('/', '_blank')}\n className=\"w-full px-4 py-2 bg-gray-100 text-black border border-gray-300 hover:bg-gray-200 transition-colors text-sm\"\n >\n üöÄ Open Full Preview\n </button>\n <button\n onClick={() => window.location.href = '/visual-editor'}\n className=\"w-full px-4 py-2 bg-black text-white border border-black hover:bg-gray-800 transition-colors text-sm\"\n >\n üé® Visual Editor\n </button>\n <div className=\"text-xs text-gray-500 text-center mt-2\">\n Preview has \"Open Full Preview\" button\n </div>\n </div>\n </div>\n </div>\n );\n}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/RollbackButton.tsx", "content": "import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface RollbackButtonProps {\n filePath: string;\n className?: string;\n}\n\nexport function RollbackButton({ filePath, className }: RollbackButtonProps) {\n const [isRollingBack, setIsRollingBack] = useState(false);\n const { toast } = useToast();\n\n const handleRollback = async () => {\n if (!confirm(Are you sure you want to rollback ${filePath}? This will restore the previous version.)) {\n return;\n }\n\n setIsRollingBack(true);\n try {\n const response = await apiRequest('POST', '/api/admin/rollback-file', {\n filePath,\n adminToken: 'sandra-admin-2025'\n });\n\n if (response.ok) {\n toast({\n title: \"File Rolled Back\",\n description: ${filePath} has been restored to its previous version.,\n });\n \n // Trigger page reload to show changes\n setTimeout(() => {\n window.location.reload();\n }, 1000);\n } else {\n throw new Error('Rollback failed');\n }\n } catch (error) {\n toast({\n title: \"Rollback Failed\",\n description: \"Could not rollback the file. Please try again.\",\n variant: \"destructive\",\n });\n } finally {\n setIsRollingBack(false);\n }\n };\n\n return (\n <Button\n onClick={handleRollback}\n disabled={isRollingBack}\n variant=\"outline\"\n size=\"sm\"\n className={border-red-200 text-red-600 hover:bg-red-50 ${className}}\n >\n {isRollingBack ? 'Rolling back...' : 'Rollback'}\n </Button>\n );\n}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/SandraNavigation.tsx", "content": "import React from 'react';\nimport { Link, useLocation } from 'wouter';\n\nexport default function SandraNavigation() {\n const [location] = useLocation();\n\n const navItems = [\n { path: '/sandra-ai', label: 'Personal Brand Mentor', description: 'Strategic guidance & coaching' },\n { path: '/sandra-photoshoot', label: 'AI Photographer', description: 'Authentic story photography' },\n { path: '/workspace', label: 'Studio Workspace', description: 'Complete business platform' }\n ];\n\n return (\n <nav className=\"bg-white border-b border-[#e0e0e0]\">\n <div className=\"max-w-6xl mx-auto px-8 py-6\">\n {/* Brand Header */}\n <div className=\"text-center mb-8\">\n <Link href=\"/workspace\">\n <h1 className=\"font-times text-[clamp(2rem,4vw,3rem)] leading-none font-extralight tracking-[0.2em] uppercase text-black cursor-pointer hover:opacity-70 transition-opacity\">\n SSELFIE STUDIO\n </h1>\n </Link>\n <p className=\"text-xs font-light tracking-[0.4em] uppercase text-gray-600 mt-2\">\n AI-Powered Personal Branding Platform\n </p>\n </div>\n\n {/* Navigation Menu */}\n <div className=\"grid grid-cols-1 md:grid-cols-3 gap-1 max-w-4xl mx-auto\">\n {navItems.map((item) => {\n const isActive = location === item.path;\n \n return (\n <Link key={item.path} href={item.path}>\n <div className={p-6 border border-[#e0e0e0] text-center cursor-pointer transition-all duration-200 ${\n isActive \n ? 'bg-black text-white' \n : 'bg-white text-black hover:bg-[#f5f5f5]'\n }}>\n <div className=\"font-times text-lg font-extralight tracking-[0.1em] uppercase mb-2\">\n {item.label}\n </div>\n <div className={text-xs font-light tracking-[0.05em] uppercase ${\n isActive ? 'text-white/70' ", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/SecureIframe.tsx", "content": "// components/shared/SecureIframe.tsx - Luxury iframe wrapper\nimport React from 'react';\n\ninterface SecureIframeProps {\n src: string;\n title: string;\n className?: string;\n height?: string;\n}\n\nexport default function SecureIframe({ \n src, \n title, \n className = "w-full h-96 border-0", \n height = "400px" \n}: SecureIframeProps) {\n return (\n <iframe\n src={src}\n title={title}\n className={className}\n style={{ height }}\n sandbox="allow-scripts allow-same-origin allow-forms allow-popups"\n loading="lazy"\n referrerPolicy="strict-origin-when-cross-origin"\n />\n );\n}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/SystemVerificationComplete.tsx", "content": "", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/TestClaudeAccess.tsx", "content": "import React from 'react';\n\ninterface TestClaudeAccessProps {\n className?: string;\n}\n\nconst TestClaudeAccess: React.FC<TestClaudeAccessProps> = ({ className = '' }) => {\n return (\n <div className={luxury-test-container ${className}}>\n {/ Hero Section /}\n <section className="luxury-hero">\n <h1 className="luxury-headline">\n Claude Access\n </h1>\n <p className="luxury-subtitle">\n Editorial Luxury Design System\n </p>\n </section>\n\n {/ Content Grid /}\n <section className="luxury-grid">\n <div className="luxury-card">\n <h2 className="luxury-card-title">\n Component Architecture\n </h2>\n <p className="luxury-body-text">\n Sophisticated TypeScript implementation with complete type safety and editorial design principles.\n </p>\n </div>\n\n <div className="luxury-card">\n <h2 className="luxury-card-title">\n Typography Excellence\n </h2>\n <p className="luxury-body-text">\n Times New Roman typography hierarchy creating visual sophistication and readability perfection.\n </p>\n </div>\n\n <div className="luxury-card">\n <h2 className="luxury-card-title">\n Color Sophistication\n </h2>\n <p className="luxury-body-text">\n Curated palette of black, white, and editorial gray creating timeless luxury aesthetics.\n </p>\n </div>\n </section>\n\n {/ Status Section /}\n <section className="luxury-status">\n <div className="status-indicator">\n <div className="status-dot"></div>\n <span className="status-text">System Operational</span>\n </div>\n <p className="luxury-caption">\n Claude AI integration successfully established with full workspace access\n </p>\n </section>\n\n <style jsx>{\n .luxury-test-container {\n min-height: 100vh;\n", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/TestComponent.tsx", "content": "import React, { useState } from 'react';\n\ninterface TestComponentProps {\n title?: string;\n onAction?: () => void;\n}\n\nconst TestComponent: React.FC<TestComponentProps> = ({ \n title = 'Multi-Agent Coordination & Delegation Component',\n onAction \n}) => {\n const [isActive, setIsActive] = useState(false);\n\n const handleClick = () => {\n setIsActive(!isActive);\n onAction?.();\n };\n\n return (\n <div className=\"luxury-component\">\n <style jsx>{\n .luxury-component {\n max-width: 800px;\n margin: 0 auto;\n padding: 3rem 2rem;\n background: #ffffff;\n font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n }\n \n .luxury-headline {\n font-family: 'Times New Roman', serif;\n font-size: 2.5rem;\n font-weight: 400;\n color: #0a0a0a;\n margin: 0 0 1.5rem 0;\n line-height: 1.1;\n letter-spacing: -0.02em;\n }\n \n .luxury-description {\n font-size: 1.125rem;\n line-height: 1.6;\n color: #666666;\n margin: 0 0 2rem 0;\n }\n \n .luxury-button {\n background: ${isActive ? '#333333' : '#0a0a0a'};\n color: #ffffff;\n border: none;\n padding: 1rem 2rem;\n font-size: 1rem;\n font-weight: 500;\n cursor: pointer;\n transition: all 0.3s ease;\n text-transform: uppercase;\n letter-spacing: 0.1em;\n }\n \n .luxury-button:hover {\n background: #333333;\n transform: translateY(-2px);\n box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n }\n \n .luxury-status {\n margin-top: 1.5rem;\n padding: 1rem;\n background: #f5f5f5;\n color: #666666;\n font-style: italic;\n }\n }</style>\n \n <h1 className=\"luxury-headline\">{title}</h1>\n <p className=\"luxury-description\">\n T", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/TestImplementation.tsx", "content": "import React from 'react';\n\ninterface TestImplementationProps {\n title?: string;\n message?: string;\n}\n\nconst TestImplementation: React.FC<TestImplementationProps> = ({ \n title = \"Test Implementation\", \n message = \"This is a simple test component created by Zara\" \n}) => {\n return (\n <div className=\"p-6 max-w-md mx-auto bg-white rounded-xl shadow-lg space-y-4\">\n <div className=\"text-center\">\n <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n {title}\n </h2>\n <p className=\"text-gray-600\">\n {message}\n </p>\n </div>\n \n <div className=\"border-t pt-4\">\n <div className=\"flex items-center justify-center space-x-2\">\n <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n <span className=\"text-sm text-gray-500\">Component Active</span>\n </div>\n </div>\n \n <div className=\"text-xs text-gray-400 text-center\">\n Created: {new Date().toLocaleDateString()}\n </div>\n </div>\n );\n};\n\nexport default TestImplementation;", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/UsageTracker.tsx", "content": "import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\n\ninterface UsageStatus {\n canGenerate: boolean;\n remainingGenerations: number;\n totalUsed: number;\n totalAllowed: number;\n monthlyUsed?: number;\n monthlyAllowed?: number;\n resetDate?: string;\n reason?: string;\n}\n\ninterface UsageStats {\n plan: string;\n planLimits: {\n totalGenerations: number | null;\n monthlyGenerations: number | null;\n cost: number;\n description: string;\n resetMonthly: boolean;\n };\n usage: UsageStatus;\n totalCostIncurred: number;\n lastGenerationAt: string | null;\n}\n\nexport default function UsageTracker() {\n const [isExpanded, setIsExpanded] = useState(false);\n\n const { data: usageStatus } = useQuery<UsageStatus>({\n queryKey: [\"/api/usage/status\"],\n refetchInterval: 30000, // Refresh every 30 seconds\n });\n\n const { data: usageStats } = useQuery<UsageStats>({\n queryKey: [\"/api/usage/stats\"],\n refetchInterval: 60000, // Refresh every minute\n });\n\n if (!usageStatus) {\n return null;\n }\n\n const getStatusColor = () => {\n // Admin users always show green\n if (usageStatus.remainingGenerations >= 999999) return \"text-emerald-600\";\n if (!usageStatus.canGenerate) return \"text-red-500\";\n if (usageStatus.remainingGenerations <= 10) return \"text-yellow-600\";\n return \"text-emerald-600\";\n };\n\n const getProgressPercentage = () => {\n if (usageStatus.monthlyAllowed) {\n // Monthly subscription\n return Math.min((usageStatus.monthlyUsed || 0) / usageStatus.monthlyAllowed * 100, 100);\n } else {\n // One-time AI Pack\n return Math.min(usageStatus.totalUsed / usageStatus.totalAllowed * 100, 100);\n }\n };\n\n const formatResetDate = (dateString: string) => {\n const date = new Date(dateString);\n const now = new Date();\n const diffDays = Math.ceil((date.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n \n if (diffDays <= 0) return \"Resets today\";\n if (diffDays === 1) retu", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/VictoriaChat.tsx", "content": "import React, { useState, useEffect, useRef } from 'react';\nimport { Send, Mic, MicOff, Sparkles } from 'lucide-react';\n\ninterface Message {\n id: string;\n content: string;\n sender: 'user' | 'victoria';\n timestamp: Date;\n typing?: boolean;\n}\n\nexport default function VictoriaChat() {\n const [messages, setMessages] = useState<Message[]>([]);\n const [inputMessage, setInputMessage] = useState('');\n const [isTyping, setIsTyping] = useState(false);\n const [isListening, setIsListening] = useState(false);\n const messagesEndRef = useRef<HTMLDivElement>(null);\n\n const scrollToBottom = () => {\n messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n };\n\n useEffect(() => {\n scrollToBottom();\n }, [messages]);\n\n // Initialize with Sandra's authentic welcome\n useEffect(() => {\n const welcomeMessage: Message = {\n id: 'welcome',\n content: \"Hey gorgeous! I'm Victoria, Sandra's AI voice twin. I literally sound EXACTLY like her - same energy, same realness, same 'your mess is your message' vibe. What are you working on today? Let's build something that actually works. üí´\",\n sender: 'victoria',\n timestamp: new Date()\n };\n setMessages([welcomeMessage]);\n }, []);\n\n const sendMessage = async () => {\n if (!inputMessage.trim()) return;\n\n const userMessage: Message = {\n id: Date.now().toString(),\n content: inputMessage,\n sender: 'user',\n timestamp: new Date()\n };\n\n setMessages(prev => [...prev, userMessage]);\n setInputMessage('');\n setIsTyping(true);\n\n // Simulate typing delay for authenticity\n setTimeout(async () => {\n const response = await getVictoriaResponse(inputMessage);\n const victoriaMessage: Message = {\n id: (Date.now() + 1).toString(),\n content: response,\n sender: 'victoria',\n timestamp: new Date()\n };\n \n setMessages(prev => [...prev, victoriaMessage]);\n setIsTyping(false);\n }, 1500);\n };\n\n const getVictoriaResponse =", "reason": "üîë Client source file, üíª Code: build, üíª Code: model, üìÅ Code file" }, { "fileName": "client/src/components/VictoriaTestWorking.tsx", "content": "", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/Workspace.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { cn } from '@/lib/utils';\nimport { AiImage } from '@shared/schema';\n\nexport default function Workspace() {\n const { user, isAuthenticated } = useAuth();\n const [activeStep, setActiveStep] = useState<number | null>(null);\n\n const { data: aiImages = [], isLoading } = useQuery({\n queryKey: ['/api/ai-images'],\n enabled: isAuthenticated,\n });\n\n const { data: subscriptionData } = useQuery({\n queryKey: ['/api/subscription/status'],\n enabled: isAuthenticated,\n });\n\n const isPremium = (subscriptionData as any)?.subscription?.status === 'active';\n\n const getJourneySteps = () => {\n const hasImages = (aiImages as any).length > 0;\n \n return [\n {\n number: 1,\n title: 'TRAIN Your AI Model',\n subtitle: 'Just you, your phone, and 15 minutes',\n description: 'Hey gorgeous! I remember feeling so awkward taking selfies at first. But here\\'s what I learned: your phone already knows how to make you look incredible. Trust me on this one.',\n status: hasImages ? 'completed' : 'current',\n action: hasImages ? 'View Your Training' : 'Let\\'s Do This',\n path: '/ai-training',\n sandraNote: 'I was shaking when I took my first selfies. Now look where we are.'\n },\n {\n number: 2,\n title: 'STYLE Your Vision',\n subtitle: 'Maya knows exactly what works',\n description: 'This is where the magic happens, babe. Maya\\'s going to help you figure out your visual story. No more guessing what \"on brand\" means - she\\'ll show you.',\n status: hasImages ? 'current' : 'upcoming',\n action: 'Chat with Maya',\n path: '/maya',\n sandraNote: 'Maya gets it. She\\'ll help yo", "reason": "üîë Client source file, üíª Code: training, üíª Code: build, üíª Code: model, üìÅ Code file" }, { "fileName": "client/src/components/ZaraToolAccessTest.tsx", "content": "import React, { useState } from 'react';\n\ninterface ZaraToolAccessTestProps {\n title?: string;\n onAction?: () => void;\n}\n\nconst ZaraToolAccessTest: React.FC<ZaraToolAccessTestProps> = ({ \n title = 'Backend Architecture & Database Management Component',\n onAction \n}) => {\n const [isActive, setIsActive] = useState(false);\n\n const handleClick = () => {\n setIsActive(!isActive);\n onAction?.();\n };\n\n return (\n <div className=\"luxury-component\">\n <style jsx>{\n .luxury-component {\n max-width: 800px;\n margin: 0 auto;\n padding: 3rem 2rem;\n background: #ffffff;\n font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n }\n \n .luxury-headline {\n font-family: 'Times New Roman', serif;\n font-size: 2.5rem;\n font-weight: 400;\n color: #0a0a0a;\n margin: 0 0 1.5rem 0;\n line-height: 1.1;\n letter-spacing: -0.02em;\n }\n \n .luxury-description {\n font-size: 1.125rem;\n line-height: 1.6;\n color: #666666;\n margin: 0 0 2rem 0;\n }\n \n .luxury-button {\n background: ${isActive ? '#333333' : '#0a0a0a'};\n color: #ffffff;\n border: none;\n padding: 1rem 2rem;\n font-size: 1rem;\n font-weight: 500;\n cursor: pointer;\n transition: all 0.3s ease;\n text-transform: uppercase;\n letter-spacing: 0.1em;\n }\n \n .luxury-button:hover {\n background: #333333;\n transform: translateY(-2px);\n box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n }\n \n .luxury-status {\n margin-top: 1.5rem;\n padding: 1rem;\n background: #f5f5f5;\n color: #666666;\n font-style: italic;\n }\n }</style>\n \n <h1 className=\"luxury-headline\">{title}</h1>\n <p className=\"luxury-des", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/ActivityFeed.tsx", "content": "interface ActivityItem {\n id: string;\n type: string;\n title: string;\n timestamp: string;\n user?: string;\n avatar?: string;\n}\n\ninterface ActivityFeedProps {\n activities: ActivityItem[];\n}\n\nexport default function ActivityFeed({ activities }: ActivityFeedProps) {\n return (\n <div className=\"bg-white\">\n <h2 \n className=\"text-3xl font-light tracking-[0.3em] uppercase text-center mb-12 text-black\"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {'R E C E N T A C T I V I T Y'.split('').join(' ')}\n </h2>\n \n <div className=\"space-y-6\">\n {activities.map((activity) => (\n <div key={activity.id} className=\"flex items-center justify-between border-b border-gray-100 pb-6 hover:bg-gray-50 transition-colors duration-200 px-4 py-2 rounded-lg\">\n <div className=\"flex items-center space-x-6\">\n <div \n className=\"w-16 h-16 bg-gray-200 rounded-full bg-cover bg-center\"\n style={{\n backgroundImage: activity.avatar ? url('${activity.avatar}') : 'none',\n backgroundPosition: '50% 30%'\n }}\n />\n <div>\n <h4 \n className=\"text-lg font-light text-black mb-1\"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {activity.title}\n </h4>\n <p className=\"text-gray-600 text-sm\">\n {activity.timestamp}\n </p>\n {activity.user && (\n <p className=\"text-gray-500 text-xs tracking-[0.1em] uppercase\">\n {activity.user}\n </p>\n )}\n </div>\n </div>\n <button className=\"text-sm text-gray-500 tracking-[0.1em] uppercase hover:text-black transition-colors\">\n {'V I E W D E T A I L S'.split('').join(' ')}\n </button>\n </div>\n ", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AdminAgentMetrics.tsx", "content": "import React, { useState } from 'react';\n\ninterface AdminAgentMetricsProps {\n title?: string;\n onAction?: () => void;\n}\n\nconst AdminAgentMetrics: React.FC<AdminAgentMetricsProps> = ({ \n title = 'Backend Architecture & Database Management Component',\n onAction \n}) => {\n const [isActive, setIsActive] = useState(false);\n\n const handleClick = () => {\n setIsActive(!isActive);\n onAction?.();\n };\n\n return (\n <div className=\"luxury-component\">\n <style jsx>{\n .luxury-component {\n max-width: 800px;\n margin: 0 auto;\n padding: 3rem 2rem;\n background: #ffffff;\n font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n }\n \n .luxury-headline {\n font-family: 'Times New Roman', serif;\n font-size: 2.5rem;\n font-weight: 400;\n color: #0a0a0a;\n margin: 0 0 1.5rem 0;\n line-height: 1.1;\n letter-spacing: -0.02em;\n }\n \n .luxury-description {\n font-size: 1.125rem;\n line-height: 1.6;\n color: #666666;\n margin: 0 0 2rem 0;\n }\n \n .luxury-button {\n background: ${isActive ? '#333333' : '#0a0a0a'};\n color: #ffffff;\n border: none;\n padding: 1rem 2rem;\n font-size: 1rem;\n font-weight: 500;\n cursor: pointer;\n transition: all 0.3s ease;\n text-transform: uppercase;\n letter-spacing: 0.1em;\n }\n \n .luxury-button:hover {\n background: #333333;\n transform: translateY(-2px);\n box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n }\n \n .luxury-status {\n margin-top: 1.5rem;\n padding: 1rem;\n background: #f5f5f5;\n color: #666666;\n font-style: italic;\n }\n }</style>\n \n <h1 className=\"luxury-headline\">{title}</h1>\n <p className=\"luxury-descri", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AdminDashboard.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/use-auth';\nimport { AdminNavigation } from '@/components/AdminNavigation';\nimport { GlobalFooter } from '@/components/global-footer';\nimport { SandraImages } from '@/lib/sandra-images';\nimport WhiteLabelClientManager from '@/components/admin/WhiteLabelClientManager';\nimport MayaCollectionManager from '@/components/admin/MayaCollectionManager';\n\n// New agent images uploaded by user\nimport AgentElena from '@assets/out-0 (33)_1753426218039.png';\nimport AgentMaya from '@assets/out-0 (34)_1753426218040.png';\nimport AgentVictoria from '@assets/out-0 (37)_1753426218041.png';\nimport AgentAria from '@assets/out-0 (20)_1753426218042.png';\nimport AgentZara from '@assets/out-0 (28)_1753426218042.png';\nimport AgentRachel from '@assets/out-0 (42)_1753426218042.png';\nimport AgentAva from '@assets/out-1 (27)_1753426218043.png';\nimport AgentQuinn from '@assets/out-0 (26)_1753426218043.png';\nimport AgentSophia from '@assets/out-1 (18)_1753426218043.png';\nimport AgentMartha from '@assets/out-0 (29)_1753426218044.png';\nimport AgentDiana from '@assets/out-2 (18)_1753426218045.png';\nimport AgentWilma from '@assets/out-0 (22)_1753426218045.png';\nimport AgentOlga from '@assets/out-0 (32)_1753426290403.png';\n\n\n// Hero and quick access images\nimport HeroImage from '@assets/image_1753426780577.png';\n\nexport default function AdminDashboard() {\n const { user } = useAuth();\n const [location] = useLocation();\n const [activeTab, setActiveTab] = useState('agents');\n\n // Handle URL parameter for direct navigation to Maya tab\n useEffect(() => {\n const urlParams = new URLSearchParams(window.location.search);\n const tabParam = urlParams.get('tab');\n if (tabParam === 'maya') {\n setActiveTab('maya');\n }\n }, [location]);\n\n // Check if user is Sandra (admin access required)\n if (!user || (user.email !== 'ssa@ssasocial.com' && user.role !== 'admin')) {\n ", "reason": "üîë Client source file, üíª Code: training, üíª Code: build, üíª Code: flux, üíª Code: upload, üìÅ Code file" }, { "fileName": "client/src/components/admin/AdminHero.tsx", "content": "import React from 'react';\n\nexport default function AdminHero() {\n return (\n <div className=\"relative h-screen w-full overflow-hidden\">\n {/* Full Bleed Background Image */}\n <div \n className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n style={{\n backgroundImage: linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.6)), url('/gallery/sandra-portrait-editorial.jpg')\n }}\n />\n \n {/* Hero Content */}\n <div className=\"relative z-10 flex items-center justify-center h-full\">\n <div className=\"text-center text-white max-w-4xl mx-auto px-6\">\n <h1 \n className=\"text-6xl md:text-8xl font-light uppercase tracking-wide mb-6\"\n style={{ \n fontFamily: 'Times New Roman',\n fontWeight: 200,\n letterSpacing: '-0.01em'\n }}\n >\n SANDRA'S DASHBOARD\n </h1>\n \n <p \n className=\"text-xl md:text-2xl font-light max-w-2xl mx-auto leading-relaxed\"\n style={{ \n fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif',\n fontWeight: 300\n }}\n >\n From rock bottom to empire builder‚Äîcommand center for your transformation journey\n </p>\n \n {/* Editorial Quote */}\n <blockquote \n className=\"mt-12 text-2xl md:text-4xl italic text-white/90\"\n style={{ \n fontFamily: 'Times New Roman',\n letterSpacing: '-0.02em'\n }}\n >\n \"Every empire started with a single brave step forward.\"\n </blockquote>\n </div>\n </div>\n \n {/* Bottom Gradient Overlay */}\n <div className=\"absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-black/60 to-transparent\" />\n </div>\n );\n}", "reason": "üîë Client source file, üíª Code: build, üìÅ Code file" }, { "fileName": "client/src/components/admin/AdminHeroRedesigned.tsx", "content": "import React from 'react';\n\nexport default function AdminHeroRedesigned() {\n return (\n <div className=\"relative w-full h-screen overflow-hidden bg-black\">\n {/* Full-bleed background with editorial gradient */}\n <div className=\"absolute inset-0 bg-gradient-to-br from-black via-gray-900 to-black\"></div>\n \n {/* Editorial overlay pattern */}\n <div className=\"absolute inset-0 opacity-10\">\n <div className=\"w-full h-full bg-repeat\" style={{\n backgroundImage: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Cpath d='M30 30c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2zm-10 0c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2zm20 0c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")\n }}></div>\n </div>\n \n {/* Content container with editorial spacing */}\n <div className=\"relative z-10 flex flex-col justify-center items-center h-full px-8 text-center\">\n {/* Main headline - Times New Roman editorial style */}\n <h1 \n className=\"text-6xl md:text-8xl font-light text-white uppercase tracking-wide mb-8 leading-tight\"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n Sandra's\n <br />\n Command Center\n </h1>\n \n {/* Editorial subheadline */}\n <p \n className=\"text-xl md:text-2xl text-white font-light italic mb-12 max-w-2xl leading-relaxed\"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n Where empires are built, one authentic story at a time\n </p>\n \n {/* Luxury stats grid */}\n <div className=\"grid grid-cols-1 md:grid-cols-3 gap-12 mb-16\">\n <div className=\"text-center\">\n <div \n className=\"text-4xl md:text-5xl font-light text-white mb-2\"\n style={{ fontFa", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AdminHeroSection.tsx", "content": "import React from 'react';\n\ninterface AdminHeroSectionProps {\n title?: string;\n subtitle?: string;\n description?: string;\n backgroundImage?: string;\n}\n\nexport const AdminHeroSection: React.FC<AdminHeroSectionProps> = ({\n title = \"SSELFIE Studio Empire\",\n subtitle = \"From Rock Bottom to Revenue Revolution\",\n description = \"Transform your vision into a luxury business empire through strategic design, editorial storytelling, and uncompromising excellence.\",\n backgroundImage = \"/api/placeholder/1920/800\"\n}) => {\n return (\n <section className=\"relative w-full h-[80vh] min-h-[600px] overflow-hidden bg-black\">\n {/* Full-Bleed Background with Dark Overlay */}\n <div className=\"absolute inset-0 w-full h-full\">\n <img \n src={backgroundImage}\n alt=\"Luxury editorial background\"\n className=\"w-full h-full object-cover object-center opacity-40\"\n />\n <div className=\"absolute inset-0 bg-gradient-to-br from-black/70 via-black/50 to-black/80\" />\n </div>\n\n {/* Editorial Content Grid */}\n <div className=\"relative z-10 w-full h-full max-w-7xl mx-auto px-8 lg:px-12\">\n <div className=\"flex flex-col justify-center h-full py-20\">\n \n {/* Typography Hierarchy - Editorial Magazine Style */}\n <div className=\"grid grid-cols-12 gap-8 items-center\">\n \n {/* Main Editorial Content */}\n <div className=\"col-span-12 lg:col-span-8\">\n \n {/* Overline - Editorial Tag */}\n <div className=\"mb-6\">\n <span className=\"inline-block px-4 py-2 bg-white/10 backdrop-blur-sm border border-white/20 text-white text-xs font-medium tracking-[0.2em] uppercase\">\n LUXURY BUSINESS TRANSFORMATION\n </span>\n </div>\n\n {/* Main Headline - Times New Roman Editorial */}\n <h1 className=\"font-serif text-white mb-8\">\n <span className=\"block text-5xl lg", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AdminTestPanel.tsx", "content": "import React, { useState, useEffect } from 'react';\n\nconst AdminTestPanel: React.FC = () => {\n const [currentTime, setCurrentTime] = useState<string>('');\n\n useEffect(() => {\n const updateTime = () => {\n setCurrentTime(new Date().toLocaleString());\n };\n\n // Update immediately\n updateTime();\n\n // Update every second\n const interval = setInterval(updateTime, 1000);\n\n return () => clearInterval(interval);\n }, []);\n\n return (\n <div className=\"bg-white rounded-lg shadow-lg p-6 border border-gray-200\">\n <div className=\"text-center space-y-4\">\n <h2 className=\"text-2xl font-bold text-gray-900 font-times\">\n Admin Test Panel\n </h2>\n \n <div className=\"bg-gradient-to-r from-purple-100 to-pink-100 rounded-lg p-4\">\n <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">\n ü§ñ Agent Identity\n </h3>\n <p className=\"text-gray-700 font-medium\">\n Zara - Dev AI & Technical Mastermind\n </p>\n <p className=\"text-sm text-gray-600 mt-1\">\n SSELFIE Studio's Luxury Code Architect\n </p>\n </div>\n\n <div className=\"bg-gradient-to-r from-blue-100 to-indigo-100 rounded-lg p-4\">\n <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">\n ‚è∞ Live Timestamp\n </h3>\n <p className=\"text-xl font-mono text-gray-900 font-bold\">\n {currentTime}\n </p>\n </div>\n\n <div className=\"bg-gradient-to-r from-green-100 to-emerald-100 rounded-lg p-4\">\n <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">\n ‚úÖ System Status\n </h3>\n <p className=\"text-green-700 font-medium\">\n Admin Panel Active & Operational\n </p>\n </div>\n </div>\n </div>\n );\n};\n\nexport default AdminTestPanel;", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AgentAccountabilityTracker.tsx", "content": "import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\ninterface AccountabilityData {\n agentId: string;\n accountabilityScore: number;\n recentActivity: {\n timestamp: string;\n userMessage: string;\n agentResponse: string;\n promisedDeliverable: string;\n actualDelivery: string;\n }[];\n}\n\nexport default function AgentAccountabilityTracker() {\n const [selectedAgent, setSelectedAgent] = useState<string>('aria');\n\n const { data: accountabilityData, isLoading, refetch } = useQuery<AccountabilityData>({\n queryKey: ['/api/agent-accountability', selectedAgent],\n enabled: !!selectedAgent,\n refetchInterval: 10000, // Refresh every 10 seconds\n staleTime: 0\n });\n\n const agents = [\n { id: 'aria', name: 'Aria', role: 'Design AI' },\n { id: 'zara', name: 'Zara', role: 'Dev AI' },\n { id: 'rachel', name: 'Rachel', role: 'Voice AI' },\n { id: 'diana', name: 'Diana', role: 'Business Coach' },\n { id: 'quinn', name: 'Quinn', role: 'QA AI' },\n ];\n\n const getAccountabilityBadge = (score: number) => {\n if (score >= 90) return { color: 'bg-green-100 text-green-800', label: 'EXCELLENT' };\n if (score >= 70) return { color: 'bg-yellow-100 text-yellow-800', label: 'GOOD' };\n if (score >= 50) return { color: 'bg-orange-100 text-orange-800', label: 'NEEDS IMPROVEMENT' };\n return { color: 'bg-red-100 text-red-800', label: 'CRITICAL' };\n };\n\n const getDeliveryStatus = (promised: string, actual: string) => {\n if (actual === 'File Created' && promised === 'Delivery Promise Detected') {\n return { color: 'text-green-600', label: '‚úì DELIVERED' };\n }\n if (promised === 'Delivery Promise Detected' && actual === 'No File Creation') {\n return { color: 'text-red-600', label: '‚úó BROKEN PROMISE' };\n }\n return { color: 'text-gray-6", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AgentActivityDashboard.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient } from '@/lib/queryClient';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { useAgentActivityData } from '@/hooks/useAgentActivityData';\nimport { ElenaWorkflowsTab } from './ElenaWorkflowsTab';\n\ninterface AgentStatus {\n agentName: string;\n specializations: string[];\n currentLoad: number;\n averageTaskTime: number;\n successRate: number;\n isAvailable: boolean;\n maxConcurrentTasks: number;\n currentTasks: string[];\n}\n\ninterface Deployment {\n id: string;\n missionType: string;\n status: string;\n progress: number;\n currentPhase: number;\n totalPhases: number;\n startTime: string;\n estimatedCompletion: string;\n completedTasks: number;\n totalTasks: number;\n assignedAgents: any[];\n recentLogs: string[];\n}\n\ninterface CoordinationMetrics {\n agentCoordination: {\n totalAgents: number;\n availableAgents: number;\n activeAgents: number;\n averageLoad: number;\n averageSuccessRate: number;\n };\n deploymentMetrics: {\n activeDeployments: number;\n totalDeployments: number;\n completionRate: number;\n };\n knowledgeSharing: {\n totalInsights: number;\n totalStrategies: number;\n avgEffectiveness: number;\n knowledgeConnections: number;\n };\n systemHealth: {\n orchestratorStatus: string;\n taskDistributorStatus: string;\n knowledgeSharingStatus: string;\n lastHealthCheck: string;\n };\n}\n\nexport default function AgentActivityDashboard() {\n const [selectedDeployment, setSelectedDeployment] = useState<string | null>(null);\n \n // Use the new data hook for coordination metrics and deployments\n const { \n coordinationMetrics,\n activ", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AgentAnalyticsDashboard.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\n\ninterface AgentMetric {\n agentId: string;\n totalConversations: number;\n totalMessages: number;\n avgResponseTime: number;\n successRate: number;\n userSatisfaction: number;\n efficiency: number;\n lastActive: Date;\n status: 'active' | 'low' | 'inactive';\n}\n\ninterface PerformanceData {\n topPerformers: AgentMetric[];\n underutilizedAgents: AgentMetric[];\n workflowBottlenecks: string[];\n optimizationSuggestions: string[];\n overallEfficiency: number;\n}\n\nexport default function AgentAnalyticsDashboard() {\n const [timeframe, setTimeframe] = useState<'day' | 'week' | 'month'>('week');\n const [selectedAgent, setSelectedAgent] = useState<string | null>(null);\n\n const { data: performanceData, isLoading: performanceLoading } = useQuery({\n queryKey: ['/api/admin/agent-performance', timeframe],\n queryFn: async () => {\n const response = await fetch('/api/admin/agent-performance', {\n method: 'POST',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({ timeframe })\n });\n return response.json();\n }\n });\n\n const { data: utilizationReport, isLoading: utilizationLoading } = useQuery({\n queryKey: ['/api/admin/agent-utilization'],\n queryFn: async () => {\n const response = await fetch('/api/admin/agent-utilization');\n return response.json();\n }\n });\n\n const { data: workflowAnalytics, isLoading: workflowLoading } = useQuery({\n queryKey: ['/api/admin/workflow-analytics'],\n queryFn: async () => {\n const response = await fetch('/api/admin/workflow-analytics');\n return response.json();\n }\n });\n\n const agentNames: Record<string, string> = {\n aria: 'Aria',\n zara: 'Zara',\n rachel: 'Rachel',\n ava: 'Ava',\n quinn: 'Quinn',\n sophia: 'Sophia',\n martha: 'Martha',\n diana: 'Diana',\n wilma: 'Wilma'\n };\n\n const getStatusColor = (status: string) => {\n swit", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AgentBridgeToggle.tsx", "content": "import React from 'react';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Zap, MessageCircle } from 'lucide-react';\n\ninterface AgentBridgeToggleProps {\n enabled: boolean;\n onToggle: (enabled: boolean) => void;\n agentName: string;\n}\n\nexport default function AgentBridgeToggle({ enabled, onToggle, agentName }: AgentBridgeToggleProps) {\n return (\n <Card className=\"border-zinc-200 dark:border-zinc-800\">\n <CardHeader className=\"pb-3\">\n <div className=\"flex items-center space-x-2\">\n {enabled ? (\n <Zap className=\"h-4 w-4 text-amber-500\" />\n ) : (\n <MessageCircle className=\"h-4 w-4 text-zinc-500\" />\n )}\n <CardTitle className=\"text-sm font-medium\">\n {enabled ? 'Bridge Mode' : 'Chat Mode'}\n </CardTitle>\n </div>\n <CardDescription className=\"text-xs\">\n {enabled \n ? ${agentName} will execute tasks through the Agent Bridge System\n : ${agentName} will respond in conversational mode only\n }\n </CardDescription>\n </CardHeader>\n <CardContent className=\"pt-0\">\n <div className=\"flex items-center space-x-2\">\n <Switch\n id=\"bridge-mode\"\n checked={enabled}\n onCheckedChange={onToggle}\n />\n <Label htmlFor=\"bridge-mode\" className=\"text-sm\">\n {enabled ? 'Execute Actions' : 'Chat Only'}\n </Label>\n </div>\n </CardContent>\n </Card>\n );\n}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AgentCoordinationDashboard.tsx", "content": "import React, { useState } from 'react';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useQuery } from '@tanstack/react-query';\n\ninterface CoordinationMetrics {\n activeWorkflows: number;\n agentsWorking: number;\n filesCreatedToday: number;\n averageResponseTime: number;\n successRate: number;\n}\n\ninterface AgentStatus {\n id: string;\n name: string;\n status: 'active' | 'working' | 'idle';\n currentTask: string;\n lastActivity: string;\n filesCreated: number;\n efficiency: number;\n}\n\nexport default function AgentCoordinationDashboard() {\n const [refreshInterval, setRefreshInterval] = useState(5000);\n\n const { data: metrics, isLoading: metricsLoading } = useQuery<CoordinationMetrics>({\n queryKey: ['/api/agent-coordination-metrics'],\n refetchInterval: refreshInterval,\n staleTime: 0\n });\n\n const { data: agentStatuses, isLoading: statusesLoading } = useQuery<AgentStatus[]>({\n queryKey: ['/api/agent-statuses'],\n refetchInterval: refreshInterval,\n staleTime: 0\n });\n\n const getStatusColor = (status: string) => {\n switch (status) {\n case 'working': return 'bg-green-100 text-green-800';\n case 'active': return 'bg-blue-100 text-blue-800';\n case 'idle': return 'bg-gray-100 text-gray-800';\n default: return 'bg-gray-100 text-gray-800';\n }\n };\n\n const getEfficiencyBadge = (efficiency: number) => {\n if (efficiency >= 90) return { color: 'bg-green-100 text-green-800', label: 'EXCELLENT' };\n if (efficiency >= 70) return { color: 'bg-yellow-100 text-yellow-800', label: 'GOOD' };\n if (efficiency >= 50) return { color: 'bg-orange-100 text-orange-800', label: 'AVERAGE' };\n return { color: 'bg-red-100 text-red-800', label: 'NEEDS IMPROVEMENT' };\n };\n\n if (metricsLoading || statusesLoading) {\n return (\n <Card className=\"border border-gray-200\">\n <CardContent className=\"p-6\">\n ", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AgentDirectorInterface.tsx", "content": "import React, { useState } from 'react';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useMutation } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface WorkflowStep {\n id: string;\n agent: string;\n task: string;\n timeline: string;\n deliverables: string[];\n}\n\ninterface AgentPerformance {\n id: string;\n name: string;\n status: 'active' | 'working' | 'error' | 'stopped';\n fileDeliveryRate: number;\n errorCount: number;\n lastError?: string;\n}\n\nexport default function AgentDirectorInterface() {\n const [conversation, setConversation] = useState<Array<{\n id: string;\n sender: 'user' | 'elena';\n content: string;\n timestamp: Date;\n }>>([]);\n const [message, setMessage] = useState('');\n const [proposedWorkflow, setProposedWorkflow] = useState<WorkflowStep[] | null>(null);\n const [monitoringData, setMonitoringData] = useState<AgentPerformance[]>([\n { id: 'aria', name: 'Aria', status: 'active', fileDeliveryRate: 0, errorCount: 0 },\n { id: 'zara', name: 'Zara', status: 'active', fileDeliveryRate: 0, errorCount: 0 },\n { id: 'rachel', name: 'Rachel', status: 'active', fileDeliveryRate: 0, errorCount: 0 },\n { id: 'ava', name: 'Ava', status: 'active', fileDeliveryRate: 0, errorCount: 0 },\n { id: 'quinn', name: 'Quinn', status: 'active', fileDeliveryRate: 0, errorCount: 0 },\n { id: 'sophia', name: 'Sophia', status: 'active', fileDeliveryRate: 0, errorCount: 0 },\n { id: 'martha', name: 'Martha', status: 'active', fileDeliveryRate: 0, errorCount: 0 },\n { id: 'diana', name: 'Diana', status: 'active', fileDeliveryRate: 0, errorCount: 0 },\n { id: 'wilma', name: 'Wilma', status: 'active', fileDeliveryRate: 0, errorCount: 0 },\n { id: 'olga', name: 'Olga', status: 'active', fileDeliveryRate: 0, errorCount: 0 }\n ]);\n const { toast } = useToast();\n\n const chatWithElena = useMu", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AgentPerformanceMonitor.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\n\ninterface AgentPerformance {\n agentId: string;\n totalConversations: number;\n recentActivity: number;\n filesCreated: number;\n lastActivity: string;\n minutesSinceLastActivity: number;\n currentStatus: 'active' | 'working' | 'idle';\n aiSpeedRating: number;\n deliveryEfficiency: number;\n}\n\ninterface PerformanceData {\n timestamp: string;\n totalActiveAgents: number;\n averageResponseTime: number;\n totalFilesCreated: number;\n agents: AgentPerformance[];\n}\n\nexport default function AgentPerformanceMonitor() {\n const [autoRefresh, setAutoRefresh] = useState(true);\n\n const { data: performanceData, isLoading, refetch } = useQuery<PerformanceData>({\n queryKey: ['/api/agent-performance/live'],\n refetchInterval: autoRefresh ? 5000 : false, // Refresh every 5 seconds\n staleTime: 0\n });\n\n const getStatusColor = (status: string) => {\n switch (status) {\n case 'active': return 'bg-green-500';\n case 'working': return 'bg-yellow-500';\n case 'idle': return 'bg-gray-400';\n default: return 'bg-gray-400';\n }\n };\n\n const getSpeedRatingColor = (rating: number) => {\n if (rating >= 80) return 'text-green-600';\n if (rating >= 60) return 'text-yellow-600';\n return 'text-red-600';\n };\n\n if (isLoading) {\n return (\n <Card className=\"border border-gray-200\">\n <CardContent className=\"p-6\">\n <div className=\"animate-pulse space-y-4\">\n <div className=\"h-4 bg-gray-200 rounded w-1/3\"></div>\n <div className=\"space-y-2\">\n <div className=\"h-3 bg-gray-200 rounded\"></div>\n <div className=\"h-3 bg-gray-200 rounded w-5/6\"></div>\n </div>\n </div>\n </CardContent>\n </Card>\n );\n }\n\n return (\n <div className=\"space-y-6\">\n {/* ", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AgentPowerDashboard.tsx", "content": "import React, { useState } from 'react';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useMutation } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface PowerActionTemplate {\n id: string;\n name: string;\n description: string;\n impact: 'low' | 'medium' | 'high' | 'critical';\n estimatedTime: string;\n agents: string[];\n deliverables: string[];\n requirements: string[];\n}\n\nconst powerActions: PowerActionTemplate[] = [\n {\n id: 'ai-speed-transformation',\n name: 'AI Speed Transformation',\n description: 'Transform entire agent team from proposal mode to execution mode with verified deliverables',\n impact: 'critical',\n estimatedTime: '15 minutes',\n agents: ['all'],\n deliverables: [\n 'Updated agent personalities with mandatory file creation',\n 'Real-time accountability tracking',\n 'Performance monitoring dashboard',\n 'Auto-detection of broken promises'\n ],\n requirements: [\n 'Database access for accountability tracking',\n 'Agent personality update permissions',\n 'Real-time monitoring setup'\n ]\n },\n {\n id: 'build-feature-complete',\n name: 'Complete BUILD Feature Implementation',\n description: 'Full BUILD feature with luxury editorial design, website builder, and Victoria integration',\n impact: 'high',\n estimatedTime: '45 minutes',\n agents: ['aria', 'zara', 'rachel'],\n deliverables: [\n 'EnhancedBuildVisualEditor.tsx',\n 'BuildPageLayout.tsx',\n 'VictoriaChatInterface.tsx',\n 'WebsitePreviewPanel.tsx',\n 'Complete routing and navigation',\n 'Victoria voice enhancement for website building'\n ],\n requirements: [\n 'React component library access',\n 'Times New Roman luxury design system',\n 'Victoria AI integration'\n ]\n },\n {\n id: 'enterprise-scaling-system',\n name: 'Enterpr", "reason": "üîë Client source file, üíª Code: build, üìÅ Code file" }, { "fileName": "client/src/components/admin/AgentUtilizationOptimizer.tsx", "content": "import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { \n Activity, \n Users, \n Zap, \n TrendingUp, \n AlertTriangle, \n CheckCircle,\n RefreshCw,\n BarChart3\n} from 'lucide-react';\n\ninterface UtilizationData {\n recommendations: string[];\n efficiency: number;\n bottlenecks: string[];\n}\n\ninterface CoordinationMetrics {\n activeWorkflows: number;\n agentsWorking: number;\n filesCreatedToday: number;\n averageResponseTime: number;\n successRate: number;\n totalConversations: number;\n handoffEfficiency: number;\n coordinationScore: number;\n}\n\nexport default function AgentUtilizationOptimizer() {\n const queryClient = useQueryClient();\n\n // Get coordination metrics\n const { data: metrics, isLoading: metricsLoading } = useQuery<CoordinationMetrics>({\n queryKey: ['/api/agent-coordination-metrics'],\n refetchInterval: 30000 // Refresh every 30 seconds\n });\n\n // Get utilization optimization\n const { data: utilization, isLoading: utilizationLoading } = useQuery<UtilizationData>({\n queryKey: ['/api/workflows/optimize-utilization'],\n refetchInterval: 60000 // Refresh every minute\n });\n\n // Refresh metrics mutation\n const refreshMutation = useMutation({\n mutationFn: async () => {\n await queryClient.invalidateQueries({ queryKey: ['/api/agent-coordination-metrics'] });\n await queryClient.invalidateQueries({ queryKey: ['/api/workflows/optimize-utilization'] });\n }\n });\n\n const getEfficiencyColor = (efficiency: number) => {\n if (efficiency >= 80) return 'text-green-600';\n if (efficiency >= 60) return 'text-yellow-600';\n return 'text-red-600';\n };\n\n const getEfficiencyBadgeColor = (efficiency: number) => {\n if (efficiency >= 80) re", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/AgentWorkflowAccelerator.tsx", "content": "import React, { useState } from 'react';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useMutation } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface WorkflowTemplate {\n id: string;\n name: string;\n description: string;\n agents: string[];\n estimatedTime: string;\n deliverables: string[];\n}\n\nconst workflowTemplates: WorkflowTemplate[] = [\n {\n id: 'build-feature-complete',\n name: 'Complete BUILD Feature Implementation',\n description: 'Full BUILD feature with luxury editorial design and website builder',\n agents: ['aria', 'zara', 'rachel'],\n estimatedTime: '30 minutes',\n deliverables: [\n 'EnhancedBuildVisualEditor.tsx',\n 'BuildPageLayout.tsx', \n 'VictoriaChatInterface.tsx',\n 'WebsitePreviewPanel.tsx',\n 'Updated routing and navigation'\n ]\n },\n {\n id: 'landing-page-redesign',\n name: 'Landing Page Luxury Redesign',\n description: 'Complete landing page overhaul with Times New Roman and editorial design',\n agents: ['aria', 'rachel'],\n estimatedTime: '20 minutes',\n deliverables: [\n 'LuxuryLandingPage.tsx',\n 'EditorialHeroSection.tsx',\n 'TransformationStorySection.tsx',\n 'Updated copy and messaging'\n ]\n },\n {\n id: 'admin-dashboard-enhancement',\n name: 'Admin Dashboard Power Features',\n description: 'Enhanced admin capabilities with real-time monitoring and controls',\n agents: ['zara', 'quinn'],\n estimatedTime: '25 minutes',\n deliverables: [\n 'RealTimeMetricsDashboard.tsx',\n 'AgentControlPanel.tsx',\n 'SystemHealthMonitor.tsx',\n 'Enhanced performance tracking'\n ]\n },\n {\n id: 'ai-speed-optimization',\n name: 'AI Speed & Performance Boost',\n description: 'Optimize all AI interactions for sub-second response times',\n agents: ['zara', 'ava'],\n estimatedTime: '40 minut", "reason": "üîë Client source file, üíª Code: build, üìÅ Code file" }, { "fileName": "client/src/components/admin/CheckpointManagementInterface.tsx", "content": "import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Clock, Save, RotateCcw, Database, GitBranch, Shield } from 'lucide-react';\n\ninterface Checkpoint {\n id: string;\n timestamp: Date;\n type: 'auto' | 'manual' | 'milestone';\n description: string;\n fileCount: number;\n agentId?: string;\n status: 'success' | 'pending' | 'failed';\n}\n\nexport default function CheckpointManagementInterface() {\n const [checkpoints] = useState<Checkpoint[]>([\n {\n id: 'cp_1754040000',\n timestamp: new Date(Date.now() - 1800000), // 30 min ago\n type: 'auto',\n description: 'Auto-checkpoint: Agent file operations',\n fileCount: 12,\n agentId: 'aria',\n status: 'success'\n },\n {\n id: 'cp_1754038000',\n timestamp: new Date(Date.now() - 3600000), // 1 hour ago \n type: 'milestone',\n description: 'Enhancement Project Milestone: Backend Services Complete',\n fileCount: 28,\n status: 'success'\n },\n {\n id: 'cp_1754036000',\n timestamp: new Date(Date.now() - 5400000), // 1.5 hours ago\n type: 'manual',\n description: 'Pre-agent fix checkpoint',\n fileCount: 15,\n status: 'success'\n }\n ]);\n\n const [isCreatingCheckpoint, setIsCreatingCheckpoint] = useState(false);\n\n const handleCreateCheckpoint = async () => {\n setIsCreatingCheckpoint(true);\n // Implementation would call checkpoint API\n setTimeout(() => setIsCreatingCheckpoint(false), 2000);\n };\n\n const handleRestore = async (checkpointId: string) => {\n console.log(Restoring checkpoint: ${checkpointId});\n // Implementation would call restore API\n };\n\n const getTypeIcon = (type: Checkpoint['type']) => {\n switch (type) {\n case 'auto': return <Clock className=\"h-4 w-4\" />;\n case 'manual': retu", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/DualModeAgentChat.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\n\ntype ChatMode = 'conversation' | 'workflow';\n\ninterface Agent {\n id: string;\n name: string;\n role: string;\n expertise: string[];\n}\n\nconst agents: Agent[] = [\n { id: 'aria', name: 'Aria', role: 'Design AI', expertise: ['Luxury Editorial Design', 'Times New Roman Typography', 'Visual Storytelling'] },\n { id: 'zara', name: 'Zara', role: 'Dev AI', expertise: ['React Components', 'Performance Optimization', 'Technical Architecture'] },\n { id: 'rachel', name: 'Rachel', role: 'Voice AI', expertise: ['Sandra Voice', 'Copywriting', 'Brand Messaging'] },\n { id: 'ava', name: 'Ava', role: 'Automation AI', expertise: ['Workflow Design', 'Process Optimization', 'System Integration'] },\n { id: 'quinn', name: 'Quinn', role: 'QA AI', expertise: ['Quality Standards', 'Testing', 'Luxury Brand Consistency'] },\n { id: 'sophia', name: 'Sophia', role: 'Social Media AI', expertise: ['Instagram Strategy', 'Community Growth', 'Content Planning'] },\n { id: 'martha', name: 'Martha', role: 'Marketing AI', expertise: ['Performance Marketing', 'Ad Campaigns', 'Revenue Optimization'] },\n { id: 'diana', name: 'Diana', role: 'Business Coach AI', expertise: ['Strategic Planning', 'Decision Making', 'Team Coordination'] },\n { id: 'wilma', name: 'Wilma', role: 'Workflow AI', expertise: ['Process Design', 'Efficiency', 'System Architecture'] },\n { id: 'olga', name: 'Olga', role: 'Repository Organizer AI', expertise: ['File Organization', 'Architecture Cleanup', 'Safe Operations'] }\n];\n\ninterface ChatMessage {\n id: string;\n sender: 'user' | 'agent';\n content: string;\n timestamp: Date;\n mode: ChatMode;\n fileCreated?: boolean;\n}\n\nexport default function DualModeAge", "reason": "üîë Client source file, üíª Code: build, üìÅ Code file" }, { "fileName": "client/src/components/admin/ElenaWorkflowsTab.tsx", "content": "/**\n * Elena Workflows Tab - Displays staged workflows with manual execution buttons\n * Revolutionary conversational-to-autonomous bridge interface\n */\n\nimport React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Clock, Users, Zap, AlertTriangle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface StagedWorkflow {\n id: string;\n title: string;\n description: string;\n agents: string[];\n priority: 'low' | 'medium' | 'high' | 'critical';\n estimatedDuration: string;\n tasksCount: number;\n createdAt: string;\n status: 'staged' | 'executing' | 'completed' | 'failed';\n}\n\nexport function ElenaWorkflowsTab() {\n const { toast } = useToast();\n const queryClient = useQueryClient();\n const [executingWorkflows, setExecutingWorkflows] = useState<Set<string>>(new Set());\n\n // Query staged workflows - NO POLLING in chat interface, only manual refresh\n const { data: workflowsData, isLoading } = useQuery({\n queryKey: ['/api/elena/staged-workflows'],\n staleTime: 300000, // Data is stale after 5 minutes (no auto-refresh)\n });\n\n // Mutation to execute workflow - Connected to Elena execution API\n const executeWorkflowMutation = useMutation({\n mutationFn: async (workflow: StagedWorkflow) => {\n // Execute workflow through Elena API\n \n const response = await fetch('/api/elena/execute', {\n method: 'POST',\n headers: {\n 'Content-Type': 'application/json',\n },\n credentials: 'include',\n body: JSON.stringify({\n workflowId: workflow.id,\n workflowName: workflow.title,\n agents: workflow.agents.map(agentId => ({\n agentId: agentId,\n task: Execute ${workflow.title} - ${workflow.description}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/EnhancedAgentCoordination.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n\ninterface WorkflowStage {\n id: string;\n name: string;\n primaryAgent: string;\n supportingAgents: string[];\n outputs: string[];\n nextStages: string[];\n}\n\ninterface ActiveWorkflow {\n workflowId: string;\n projectType: string;\n currentStage: string;\n status: string;\n startedAt: Date;\n completedStages: string[];\n nextActions: string[];\n}\n\nexport default function EnhancedAgentCoordination() {\n const [selectedProjectType, setSelectedProjectType] = useState<string>('design');\n const [activeWorkflows, setActiveWorkflows] = useState<ActiveWorkflow[]>([]);\n const [selectedWorkflow, setSelectedWorkflow] = useState<string | null>(null);\n const queryClient = useQueryClient();\n\n // Get workflow stages\n const { data: workflowStages } = useQuery({\n queryKey: ['/api/admin/coordinate-agents', 'get_workflow_stages'],\n queryFn: async () => {\n const response = await fetch('/api/admin/coordinate-agents', {\n method: 'POST',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({ action: 'get_workflow_stages' })\n });\n return response.json();\n }\n });\n\n // Get agent specialties\n const { data: agentSpecialties } = useQuery({\n queryKey: ['/api/admin/coordinate-agents', 'get_agent_specialties'],\n queryFn: async () => {\n const response = await fetch('/api/admin/coordinate-agents', {\n method: 'POST',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({ action: 'get_agent_specialties' })\n });\n return response.json();\n }\n });\n\n // Initiate workflow mutation\n const initiateWorkflowMutation = useMutation({\n mutationFn: async (projectData: any) => {\n const response = await fetch('/api/admin/coordinate-agents', {\n method: 'POST',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stri", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/EnhancedProgressVisualizationDashboard.tsx", "content": "/\n * Enhanced Progress Visualization Dashboard\n * Real-time agent work display with luxury editorial design\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\n\ninterface AgentStatus {\n id: string;\n name: string;\n status: 'active' | 'idle' | 'working';\n currentTask: string;\n progress: number;\n filesModified: number;\n lastActivity: Date;\n}\n\ninterface TaskDependency {\n id: string;\n name: string;\n dependencies: string[];\n status: 'pending' | 'in-progress' | 'completed';\n assignedAgent: string;\n}\n\nexport function EnhancedProgressVisualizationDashboard() {\n const [agents, setAgents] = useState<AgentStatus[]>([\n {\n id: 'aria',\n name: 'Aria',\n status: 'working',\n currentTask: 'Creating UX/UI Components',\n progress: 75,\n filesModified: 4,\n lastActivity: new Date()\n },\n {\n id: 'zara',\n name: 'Zara',\n status: 'working',\n currentTask: 'Building Backend Architecture',\n progress: 60,\n filesModified: 6,\n lastActivity: new Date()\n },\n {\n id: 'maya',\n name: 'Maya',\n status: 'working',\n currentTask: 'Technical System Optimization',\n progress: 80,\n filesModified: 3,\n lastActivity: new Date()\n },\n {\n id: 'victoria',\n name: 'Victoria',\n status: 'working',\n currentTask: 'Integration Flow Development',\n progress: 50,\n filesModified: 2,\n lastActivity: new Date()\n },\n {\n id: 'elena',\n name: 'Elena',\n status: 'active',\n currentTask: 'Coordination & Monitoring',\n progress: 90,\n filesModified: 1,\n lastActivity: new Date()\n },\n {\n id: 'olga',\n name: 'Olga',\n status: 'active',\n currentTask: 'Organization & Cleanup',\n progress: 85,\n filesModified: 0,\n lastActi", "reason": "üîë Client source file, üíª Code: build, üìÅ Code file" }, { "fileName": "client/src/components/admin/LuxuryAgentChat.tsx", "content": "import React, { useState, useEffect, useRef } from 'react';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useMutation } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { Send, Sparkles, Wand2, MessageSquare, FileText, Clock, Check, User, Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ntype ChatMode = 'ask' | 'create';\n\ninterface Agent {\n id: string;\n name: string;\n role: string;\n expertise: string[];\n personality: string;\n description: string;\n}\n\nconst agents: Agent[] = [\n { \n id: 'ZARA', \n name: 'Zara', \n role: 'Technical Lead', \n expertise: ['React Components', 'Performance', 'Architecture'],\n personality: 'Direct ‚Ä¢ Results-focused ‚Ä¢ Gets things done',\n description: 'Your go-to for building and optimizing'\n },\n { \n id: 'ARIA', \n name: 'Aria', \n role: 'Design Director', \n expertise: ['Luxury Design', 'Typography', 'Visual Stories'],\n personality: 'Perfectionist ‚Ä¢ Editorial eye ‚Ä¢ Aesthetic genius',\n description: 'Creates stunning visual experiences'\n },\n { \n id: 'RACHEL', \n name: 'Rachel', \n role: 'Voice Specialist', \n expertise: ['Your Voice', 'Copywriting', 'Brand Messaging'],\n personality: 'Warm ‚Ä¢ Authentic ‚Ä¢ Captures your essence',\n description: 'Writes in your voice, perfectly'\n },\n { \n id: 'QUINN', \n name: 'Quinn', \n role: 'Quality Guardian', \n expertise: ['Quality Control', 'Testing', 'Excellence'],\n personality: 'Meticulous ‚Ä¢ Detail-oriented ‚Ä¢ Never settles',\n description: 'Ensures everything meets luxury standards'\n },\n { \n id: 'DIANA', \n name: 'Diana', \n role: 'Strategic Advisor', \n expertise: ['Business Strategy', 'Decisions', 'Growth'],\n personality: 'Strategic ‚Ä¢ Executi", "reason": "üîë Client source file, üíª Code: build, üìÅ Code file" }, { "fileName": "client/src/components/admin/LuxuryProgressDisplay.tsx", "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { \n CheckCircle, \n AlertCircle, \n PlayCircle, \n Clock,\n User,\n Zap\n} from 'lucide-react';\n\ninterface TaskStep {\n id: string;\n title: string;\n status: 'pending' | 'in_progress' | 'completed' | 'failed';\n progress?: number;\n description?: string;\n}\n\ninterface LuxuryProgressDisplayProps {\n taskId: string;\n agentName: string;\n steps: TaskStep[];\n overallProgress: number;\n status: 'pending' | 'planning' | 'executing' | 'validating' | 'completed' | 'failed';\n className?: string;\n}\n\nexport default function LuxuryProgressDisplay({ \n taskId, \n agentName, \n steps, \n overallProgress, \n status,\n className = ""\n}: LuxuryProgressDisplayProps) {\n const getStatusIcon = (stepStatus: TaskStep['status']) => {\n switch (stepStatus) {\n case 'completed':\n return <CheckCircle className="h-4 w-4 text-emerald-500" />;\n case 'in_progress':\n return <PlayCircle className="h-4 w-4 text-blue-500 animate-pulse" />;\n case 'failed':\n return <AlertCircle className="h-4 w-4 text-red-500" />;\n default:\n return <Clock className="h-4 w-4 text-zinc-400" />;\n }\n };\n\n const getStatusColor = (stepStatus: TaskStep['status']) => {\n switch (stepStatus) {\n case 'completed':\n return 'bg-emerald-500';\n case 'in_progress':\n return 'bg-blue-500';\n case 'failed':\n return 'bg-red-500';\n default:\n return 'bg-zinc-300';\n }\n };\n\n const getOverallStatusBadge = () => {\n switch (status) {\n case 'planning':\n return <Badge variant="secondary">Planning</Badge>;\n case 'executing':\n return <Badge variant="default" className="bg-blue-500">Executing</Badge>;\n case 'validating':\n return <Badge variant="default" className="bg-amber-500">Validating</B", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/ManyChatPSIDUploader.tsx", "content": "import React, { useState, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Upload, FileText, AlertCircle, CheckCircle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ManyChatPSIDUploaderProps {\n onPSIDListReady: (psids: string[]) => void;\n}\n\nexport function ManyChatPSIDUploader({ onPSIDListReady }: ManyChatPSIDUploaderProps) {\n const [psidList, setPsidList] = useState<string[]>([]);\n const [uploadMethod, setUploadMethod] = useState<'file' | 'paste'>('file');\n const [textInput, setTextInput] = useState('');\n const [isProcessing, setIsProcessing] = useState(false);\n const fileInputRef = useRef<HTMLInputElement>(null);\n const { toast } = useToast();\n\n const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n const file = event.target.files?.[0];\n if (!file) return;\n\n setIsProcessing(true);\n try {\n const text = await file.text();\n const psids = parsePSIDText(text);\n setPsidList(psids);\n \n toast({\n title: "File processed successfully",\n description: Found ${psids.length} subscriber IDs,\n });\n } catch (error) {\n toast({\n title: "Error processing file",\n description: "Please check your file format and try again",\n variant: "destructive",\n });\n } finally {\n setIsProcessing(false);\n }\n };\n\n const handleTextInput = () => {\n setIsProcessing(true);\n try {\n const psids = parsePSIDText(textInput);\n setPsidList(psids);\n \n toast({\n title: "Text processed successfully",\n description: Found ${psids.length} subscriber IDs,\n });\n } catch (error) {\n toast({\n title: "Erro", "reason": "üîë Client source file, üíª Code: upload, üìÅ Code file" }, { "fileName": "client/src/components/admin/MayaCollectionManager.tsx", "content": "import React, { useState } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface UpdateStats {\n totalCollections: number;\n totalPrompts: number;\n timestamp: string;\n}\n\ninterface UpdateResult {\n success: boolean;\n message: string;\n upgradeStats?: UpdateStats;\n}\n\nexport default function MayaCollectionManager() {\n const [isUpdating, setIsUpdating] = useState(false);\n const [updateResult, setUpdateResult] = useState<UpdateResult | null>(null);\n const { toast } = useToast();\n\n // Get your actual AI photoshoot collections to update\n const getActualCollections = () => [\n {\n id: 'healing-mindset',\n name: 'HEALING MINDSET',\n subtitle: 'Phoenix Rising', \n description: 'For when you want to capture how far you\'ve come. You know that quiet strength you have now? The one that came from surviving what almost broke you? Let\'s photograph that.',\n prompts: [\n { id: 'morning-meditation-solitude', name: 'Morning Solitude', category: 'Inner Peace', prompt: '[triggerword], woman finding stillness in the storm through morning meditation, luxurious soft neutral cashmere layers and flowing linen, soft golden morning light streaming through floor-to-ceiling window, peaceful contemplation with eyes gently closed, raw photo, visible skin pores, film grain, unretouched natural skin texture, subsurface scattering, photographed on film' },\n { id: 'ocean-therapy-walk', name: 'Ocean Healing', category: 'Nature Therapy', prompt: '[triggerword], woman walking alone on empty beach where the ocean became her therapist, flowing ivory linen maxi dress moving in sea breeze, warm golden dawn lighting with ocean reflections creating healing solitude, contemplative expression while processing thoughts and finding peace in endless horizons, raw photo, visible skin pores, film grain, unretouched natural skin texture, subsurface scattering, photographed on film' },\n { id: 'phoenix-risi", "reason": "üîë Client source file, üíª Code: build, üìÅ Code file" }, { "fileName": "client/src/components/admin/OptimizedAgentChat.tsx", "content": "import React, { useState, useEffect, useRef } from 'react';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { Send, Sparkles, Wand2, MessageSquare, FileText, Clock, Check } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ntype ChatMode = 'conversation' | 'workflow';\n\ninterface Agent {\n id: string;\n name: string;\n role: string;\n expertise: string[];\n personality: string;\n color: string;\n}\n\nconst agents: Agent[] = [\n { \n id: 'zara', \n name: 'Zara', \n role: 'Dev AI', \n expertise: ['React Components', 'Performance Optimization', 'Technical Architecture'],\n personality: 'Direct, solution-focused, delivers results',\n color: 'emerald'\n },\n { \n id: 'aria', \n name: 'Aria', \n role: 'Design AI', \n expertise: ['Luxury Editorial Design', 'Times New Roman Typography', 'Visual Storytelling'],\n personality: 'Aesthetic perfectionist, editorial eye',\n color: 'purple'\n },\n { \n id: 'rachel', \n name: 'Rachel', \n role: 'Voice AI', \n expertise: ['Sandra Voice', 'Copywriting', 'Brand Messaging'],\n personality: 'Warm, authentic, captures your voice',\n color: 'rose'\n },\n { \n id: 'quinn', \n name: 'Quinn', \n role: 'QA AI', \n expertise: ['Quality Standards', 'Testing', 'Luxury Brand Consistency'],\n personality: 'Meticulous, detail-oriented, ensures excellence',\n color: 'blue'\n },\n { \n id: 'diana', \n name: 'Diana', \n role: 'Business Coach AI', \n expertise: ['Strategic Planning', 'Decision Making', 'Team Coordination'],\n personality: 'Strategic thinker, executive advisor',\n color: 'amber'\n }\n];\n\ninterface ChatMessage {\n id: string;\n sender: 'use", "reason": "üîë Client source file, üíª Code: build, üìÅ Code file" }, { "fileName": "client/src/components/admin/ProgressVisualizationDashboard.tsx", "content": "", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/QuickActionCard.tsx", "content": "interface QuickActionCardProps {\n title: string;\n description: string;\n buttonText: string;\n onClick?: () => void;\n}\n\nexport default function QuickActionCard({ title, description, buttonText, onClick }: QuickActionCardProps) {\n return (\n <div className="bg-gray-50 p-8 text-center hover:bg-gray-100 transition-colors duration-200">\n <h3 \n className="text-2xl font-light tracking-[0.2em] uppercase mb-4 text-black"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {title.split('').join(' ')}\n </h3>\n <p className="text-gray-600 mb-6 leading-relaxed">\n {description}\n </p>\n <button \n className="bg-black text-white px-8 py-3 text-sm tracking-[0.2em] uppercase hover:bg-gray-800 transition-colors"\n onClick={onClick}\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {buttonText.split('').join(' ')}\n </button>\n </div>\n );\n}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/ServiceIntegrationUI.tsx", "content": "/\n * Service Integration UI - Luxury interface for service setup and management\n * SSELFIE Studio Enhancement Project - Aria Implementation\n /\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n CheckCircle, \n AlertCircle, \n Settings, \n Zap, \n Mail, \n CreditCard,\n MessageSquare,\n RefreshCw,\n ExternalLink,\n Shield\n} from 'lucide-react';\n\ninterface ServiceStatus {\n id: string;\n name: string;\n icon: React.ReactNode;\n status: 'connected' | 'disconnected' | 'error' | 'configuring';\n description: string;\n lastChecked: Date;\n config?: Record<string, any>;\n}\n\ninterface ServiceConfig {\n apiKey?: string;\n webhookUrl?: string;\n accountId?: string;\n secretKey?: string;\n}\n\nexport default function ServiceIntegrationUI() {\n const { toast } = useToast();\n const [services, setServices] = useState<ServiceStatus[]>([\n {\n id: 'stripe',\n name: 'Stripe',\n icon: <CreditCard className="h-5 w-5" />,\n status: 'connected',\n description: 'Payment processing and subscription management',\n lastChecked: new Date(),\n config: { accountId: 'acct_' }\n },\n {\n id: 'resend',\n name: 'Resend',\n icon: <Mail className="h-5 w-5" />,\n status: 'connected',\n description: 'Transactional email delivery',\n lastChecked: new Date(),\n config: { domain: 'sselfie.ai' }\n },\n {\n id: 'flodesk',\n name: 'Flodesk',\n icon: <Zap className="h-5 w-5" />,\n status: 'disconnected',\n description: 'Email marketing and automation',\n lastChecked: new Date(Date.now() - 2 * 60", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/ServiceSetupWizard.tsx", "content": "", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/StatsCard.tsx", "content": "interface StatsCardProps {\n title: string;\n value: string | number;\n change: string;\n image: string;\n onClick?: () => void;\n}\n\nexport default function StatsCard({ title, value, change, image, onClick }: StatsCardProps) {\n return (\n <div \n className="relative bg-white rounded-lg overflow-hidden cursor-pointer hover:opacity-90 transition-all duration-200 shadow-lg"\n onClick={onClick}\n >\n <div \n className="h-96 bg-cover bg-center relative"\n style={{\n backgroundImage: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url('${image}'),\n backgroundPosition: '50% 30%'\n }}\n >\n <div className="absolute inset-0 flex items-center justify-center">\n <div className="text-center text-white">\n <h3 \n className="text-2xl font-light tracking-[0.3em] uppercase opacity-90 mb-4"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {title.split('').join(' ')}\n </h3>\n <div \n className="text-4xl font-light mb-2" \n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {value}\n </div>\n <div className="text-sm opacity-80 tracking-[0.1em]">\n {change}\n </div>\n </div>\n </div>\n </div>\n </div>\n );\n}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/StreamingAgentChat.tsx", "content": "import React, { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Send, Bot, User } from 'lucide-react';\n\ninterface StreamingAgentChatProps {\n className?: string;\n agentId?: string;\n}\n\ninterface ChatMessage {\n id: string;\n type: 'user' | 'agent';\n content: string;\n timestamp: number;\n agentId?: string;\n streaming?: boolean;\n}\n\nexport const StreamingAgentChat: React.FC<StreamingAgentChatProps> = ({ \n className = '',\n agentId = 'zara'\n}) => {\n const [messages, setMessages] = useState<ChatMessage[]>([]);\n const [inputMessage, setInputMessage] = useState('');\n const [isConnected, setIsConnected] = useState(false);\n const [isLoading, setIsLoading] = useState(false);\n const wsRef = useRef<WebSocket | null>(null);\n const messagesEndRef = useRef<HTMLDivElement>(null);\n \n useEffect(() => {\n // Connect to WebSocket for real-time agent communication\n const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n const wsUrl = ${protocol}//${window.location.host}/ws/admin-agents?agentId=${agentId};\n \n try {\n wsRef.current = new WebSocket(wsUrl);\n \n wsRef.current.onopen = () => {\n setIsConnected(true);\n console.log(üîå Connected to agent ${agentId});\n };\n \n wsRef.current.onmessage = (event) => {\n try {\n const message = JSON.parse(event.data);\n if (message.type === 'agent') {\n setMessages(prev => [...prev, {\n id: Date.now().toString(),\n type: 'agent',\n content: message.message,\n timestamp: message.timestamp,\n agentId: message.agentId\n }]);\n }\n } catch (error) {\n console.error('WebSocket message error:', error);\n }\n ", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/TestClaudeIntegration.tsx", "content": "", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/UnifiedAgentInterface.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, Play, User, CheckCircle, Clock } from 'lucide-react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface Agent {\n id: string;\n name: string;\n role: string;\n status: 'available' | 'busy' | 'offline';\n}\n\ninterface ExecutionResult {\n executionId: string;\n status: 'pending' | 'running' | 'completed' | 'failed';\n result?: any;\n message?: string;\n}\n\ninterface AgentsResponse {\n success: boolean;\n agents: Agent[];\n}\n\nexport function UnifiedAgentInterface() {\n const [selectedAgent, setSelectedAgent] = useState<string>('');\n const [task, setTask] = useState<string>('');\n const [context, setContext] = useState<string>('{}');\n const [executionResults, setExecutionResults] = useState<ExecutionResult[]>([]);\n const queryClient = useQueryClient();\n\n // Fetch available agents\n const { data: agentsData, isLoading: agentsLoading } = useQuery<AgentsResponse>({\n queryKey: ['/api/unified-agents/available'],\n refetchInterval: 30000 // Refresh every 30 seconds\n });\n\n // Execute agent task mutation\n const executeTaskMutation = useMutation({\n mutationFn: async (params: { agentName: string; task: string; context: any; priority?: string }) => {\n return apiRequest('/api/unified-agents/execute', 'POST', params);\n },\n onSuccess: (data) => {\n setExecutionResults(prev => [data, ...prev]);\n setTask('');\n queryClient.invalidateQueries({ queryKey: ['/api/unified-agents/available'] });\n }\n });\n\n const handleExecuteTask = () => {\n if (!selectedAgent || !task.trim()) return;\n\n let parsedContext = {};\n try {\n ", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/WhiteLabelClientManager.tsx", "content": "import React from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { User, Settings, Eye } from 'lucide-react';\n\ninterface WhiteLabelClient {\n id: string;\n email: string;\n firstName: string;\n lastName: string;\n plan: string;\n mayaAiAccess: boolean;\n victoriaAiAccess: boolean;\n profile?: {\n fullName: string;\n location: string;\n instagramHandle: string;\n bio: string;\n };\n onboarding?: {\n brandStory: string;\n businessGoals: string;\n targetAudience: string;\n completed: boolean;\n };\n}\n\nexport default function WhiteLabelClientManager() {\n const { toast } = useToast();\n const queryClient = useQueryClient();\n\n // Simple Shannon access mutation\n const accessShannonMutation = useMutation({\n mutationFn: () =>\n apiRequest('/api/admin/impersonate-user', 'POST', { email: 'shannon@soulresets.com' }, {\n 'x-admin-token': 'sandra-admin-2025'\n }),\n onSuccess: () => {\n toast({\n title: "Accessing Shannon's Account",\n description: "Redirecting to Shannon's workspace...",\n });\n // Redirect to workspace after brief delay\n setTimeout(() => {\n window.location.href = '/workspace';\n }, 1000);\n },\n onError: (error) => {\n toast({\n title: "Access Failed",\n description: error.message,\n variant: "destructive",\n });\n }\n });\n\n const handleAccessShannon = () => {\n accessShannonMutation.mutate();\n };\n\n return (\n <div className="p-6 space-y-6">\n <div className="text-center">\n <h1 className="text-3xl font-bold mb-4" style={{ fontFamily: 'Times New Roman, serif' }}>\n Shannon Account Access\n </h1>\n <p className="text-gray-600 mb-8">Direct access", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/admin/WorkflowVisualizationDashboard.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Separator } from '@/components/ui/separator';\nimport { \n Play, \n Pause, \n Square, \n Monitor, \n Cpu, \n Database, \n Globe, \n Users,\n Activity,\n CheckCircle,\n Clock,\n AlertCircle\n} from 'lucide-react';\n\ninterface WorkflowNode {\n id: string;\n name: string;\n type: 'service' | 'agent' | 'api' | 'database';\n status: 'running' | 'idle' | 'error' | 'stopped';\n cpu: number;\n memory: number;\n lastActivity: Date;\n connections: string[];\n}\n\ninterface WorkflowMetrics {\n totalRequests: number;\n activeAgents: number;\n systemLoad: number;\n uptime: string;\n lastDeployment: Date;\n}\n\nexport default function WorkflowVisualizationDashboard() {\n const [workflows] = useState<WorkflowNode[]>([\n {\n id: 'vite-dev',\n name: 'Vite Development Server',\n type: 'service',\n status: 'running',\n cpu: 25,\n memory: 180,\n lastActivity: new Date(),\n connections: ['express-server', 'hmr-websocket']\n },\n {\n id: 'express-server',\n name: 'Express Backend',\n type: 'service',\n status: 'running',\n cpu: 15,\n memory: 145,\n lastActivity: new Date(Date.now() - 30000),\n connections: ['postgres-db', 'agent-system']\n },\n {\n id: 'agent-system',\n name: 'Autonomous Agent System',\n type: 'agent',\n status: 'running',\n cpu: 35,\n memory: 220,\n lastActivity: new Date(Date.now() - 5000),\n connections: ['aria-agent', 'maya-agent', 'victoria-agent']\n },\n {\n id: 'postgres-db',\n name: 'PostgreSQL Database',\n type: 'database',\n status: 'running',\n cpu: 8,\n memory: 95,\n lastActivity: new Date(Date.now() - 10000),\n connections: ['express-server']", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/ai-photoshoot/CollectionCard.tsx", "content": "import React, { memo } from 'react';\nimport { PhotoshootCollection } from '@/types/photoshoot';\n\ninterface CollectionCardProps {\n collection: PhotoshootCollection;\n isSelected: boolean;\n onSelect: () => void;\n}\n\nexport const CollectionCard = memo<CollectionCardProps>(({\n collection,\n isSelected,\n onSelect\n}) => {\n return (\n <div\n onClick={onSelect}\n className={relative group cursor-pointer transition-all duration-500 aspect-[3/4] overflow-hidden shadow-[0_8px_30px_rgb(0,0,0,0.12)] ${\n isSelected \n ? 'ring-2 ring-black transform scale-[1.02]' \n : 'hover:scale-[1.03] hover:shadow-[0_20px_60px_rgb(0,0,0,0.25)]'\n }}\n style={{\n background: 'linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%)',\n backdropFilter: 'blur(10px)'\n }}\n role="button"\n tabIndex={0}\n aria-label={Select ${collection.name} collection}\n onKeyDown={(e) => {\n if (e.key === 'Enter' || e.key === ' ') {\n e.preventDefault();\n onSelect();\n }\n }}\n >\n {/* LUXURY IMAGE CONTAINER /}\n <div className="relative w-full h-3/4 overflow-hidden">\n <img\n src={collection.preview}\n alt={${collection.name} collection preview}\n className="w-full h-full object-cover transition-all duration-700 group-hover:scale-105"\n style={{\n filter: 'contrast(1.1) saturate(1.05)',\n }}\n loading="lazy"\n />\n {/ LUXURY OVERLAY GRADIENT /}\n <div className="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />\n </div>\n \n {/ LUXURY TYPOGRAPHY TREATMENT /}\n <div className="absolute bottom-0 left-0 right-0 p-6 bg-white/95 backdrop-blur-sm">\n <div className="text-center">\n <div className="font-serif text-sm font-light uppercase tracking-[0.3em] text-black mb-1">\n {colle", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/ai-photoshoot/PhotoshootCollectionGrid.tsx", "content": "import React, { memo } from 'react';\nimport { PhotoshootCollection } from '@/types/photoshoot';\nimport { CollectionCard } from './CollectionCard';\n\ninterface PhotoshootCollectionGridProps {\n collections: PhotoshootCollection[];\n selectedCollection: string | null;\n onSelectCollection: (collectionId: string) => void;\n}\n\nexport const PhotoshootCollectionGrid = memo<PhotoshootCollectionGridProps>(({\n collections,\n selectedCollection,\n onSelectCollection\n}) => {\n return (\n <div className="grid grid-cols-2 md:grid-cols-3 gap-8 max-w-5xl mx-auto">\n {collections.map((collection) => (\n <CollectionCard\n key={collection.id}\n collection={collection}\n isSelected={selectedCollection === collection.id}\n onSelect={() => onSelectCollection(collection.id)}\n />\n ))}\n </div>\n );\n});\n\nPhotoshootCollectionGrid.displayName = 'PhotoshootCollectionGrid';", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/ai-photoshoot/PromptCard.tsx", "content": "import React, { memo } from 'react';\nimport { PhotoshootPrompt } from '@/types/photoshoot';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface PromptCardProps {\n prompt: PhotoshootPrompt;\n collectionPreview: string;\n canGenerate: boolean;\n onGenerate: () => void;\n}\n\nexport const PromptCard = memo<PromptCardProps>(({\n prompt,\n collectionPreview,\n canGenerate,\n onGenerate\n}) => {\n const { toast } = useToast();\n\n const handleClick = () => {\n if (canGenerate) {\n onGenerate();\n } else {\n toast({\n title: "Training Required",\n description: "Please complete your AI model training first.",\n variant: "destructive",\n });\n }\n };\n\n const handleKeyDown = (e: React.KeyboardEvent) => {\n if (e.key === 'Enter' || e.key === ' ') {\n e.preventDefault();\n handleClick();\n }\n };\n\n return (\n <div\n onClick={handleClick}\n onKeyDown={handleKeyDown}\n tabIndex={0}\n role="button"\n aria-label={Generate ${prompt.name} style${!canGenerate ? ' (training required)' : ''}}\n className={relative group cursor-pointer transition-all duration-500 aspect-[3/4] overflow-hidden ${\n canGenerate \n ? 'hover:scale-[1.03] shadow-[0_8px_30px_rgb(0,0,0,0.12)] hover:shadow-[0_20px_60px_rgb(0,0,0,0.25)] focus:outline-none focus:ring-2 focus:ring-black focus:ring-offset-2' \n : 'opacity-40 cursor-not-allowed shadow-[0_4px_15px_rgb(0,0,0,0.08)]'\n }}\n style={{\n background: 'linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%)',\n backdropFilter: 'blur(5px)',\n border: '1px solid rgba(0,0,0,0.05)'\n }}\n >\n {/ Collection preview image for consistency /}\n <img\n src={collectionPreview}\n alt={${prompt.name} style preview}\n className="w-full h-full object-cover"\n loading="lazy"\n />\n \n <div className={absolute inset-0 bg-black transition-opacity duration-300 ${\n canGenerate ? 'bg-opacity-60 gr", "reason": "üîë Client source file, üíª Code: training, üíª Code: model, üìÅ Code file" }, { "fileName": "client/src/components/ai-photoshoot/PromptGrid.tsx", "content": "import React, { memo } from 'react';\nimport { PhotoshootPrompt, PhotoshootCollection } from '@/types/photoshoot';\nimport { PromptCard } from './PromptCard';\n\ninterface PromptGridProps {\n collection: PhotoshootCollection;\n canGenerate: boolean;\n onGenerateFromPrompt: (prompt: PhotoshootPrompt) => void;\n onBack: () => void;\n}\n\nexport const PromptGrid = memo<PromptGridProps>(({\n collection,\n canGenerate,\n onGenerateFromPrompt,\n onBack\n}) => {\n return (\n <div>\n {/* Back Button */}\n <button\n onClick={onBack}\n className=\"px-6 py-3 text-xs uppercase tracking-wide border border-black bg-transparent text-black mb-10 cursor-pointer transition-all duration-300 hover:bg-black hover:text-white focus:outline-none focus:ring-2 focus:ring-black focus:ring-offset-2\"\n aria-label=\"Back to collections\"\n >\n ‚Üê Back to Collections\n </button>\n\n {/* Collection Header */}\n <div className=\"text-center mb-16\">\n <h2 \n className=\"font-serif text-[clamp(2rem,4vw,3rem)] font-light uppercase mb-2\" \n style={{ letterSpacing: '0.3em' }}\n >\n {collection.name}\n </h2>\n {collection.subtitle && (\n <h3 \n className=\"font-serif text-[clamp(1.5rem,3vw,2rem)] font-light uppercase mb-4\" \n style={{ letterSpacing: '0.3em' }}\n >\n {collection.subtitle}\n </h3>\n )}\n <p className=\"text-gray-600 max-w-2xl mx-auto text-lg font-light\">\n {collection.description}\n </p>\n </div>\n\n {/* LUXURY PROMPT CARDS GALLERY */}\n <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n {collection.prompts.map((prompt) => (\n <PromptCard\n key={prompt.id}\n prompt={prompt}\n collectionPreview={collection.preview}\n canGenerate={canGenerate}\n onGenerate={() => onGenerateFromPrompt(prompt)}\n />\n ))}\n </div>\n </di", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/auth-fix.tsx", "content": "import React, { useEffect, useState } from 'react';\nimport { useAuth } from '../hooks/useAuth';\n\ninterface AuthFixProps {\n children: React.ReactNode;\n fallback?: React.ReactNode;\n}\n\n/**\n * AuthFix Component\n * \n * A utility component that handles common authentication edge cases and provides\n * a stable authentication state for child components.\n * \n * Features:\n * - Handles token refresh automatically\n * - Provides loading states during auth operations\n * - Graceful fallback for unauthenticated states\n * - Prevents flash of unauthenticated content\n */\nexport const AuthFix: React.FC<AuthFixProps> = ({ \n children, \n fallback = <div className=\"auth-loading\">Authenticating...</div> \n}) => {\n const { user, isLoading, error, refreshAuth } = useAuth();\n const [isInitialized, setIsInitialized] = useState(false);\n\n useEffect(() => {\n // Handle initial authentication check\n const initializeAuth = async () => {\n try {\n // Attempt to refresh/validate existing auth\n await refreshAuth();\n } catch (err) {\n console.warn('Auth initialization failed:', err);\n } finally {\n setIsInitialized(true);\n }\n };\n\n if (!isInitialized && !isLoading) {\n initializeAuth();\n }\n }, [isInitialized, isLoading, refreshAuth]);\n\n // Show loading state during initialization\n if (!isInitialized || isLoading) {\n return <>{fallback}</>;\n }\n\n // Show error state if authentication failed\n if (error) {\n return (\n <div className=\"auth-error\">\n <p>Authentication error: {error.message}</p>\n <button onClick={() => refreshAuth()}>\n Retry Authentication\n </button>\n </div>\n );\n }\n\n // Render children if authenticated, fallback if not\n return user ? <>{children}</> : <>{fallback}</>;\n};\n\n/**\n * Higher-order component version of AuthFix\n */\nexport const withAuthFix = <P extends object>(\n Component: React.ComponentType<P>,\n fallback?: React.ReactNode\n) => {\n return (props: P) => (\n <A", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/auth-form.tsx", "content": "import React, { useState } from 'react';\nimport { Link } from 'wouter';\n\ninterface AuthFormProps {\n type: 'login' | 'signup';\n}\n\nexport const AuthForm: React.FC<AuthFormProps> = ({ type }) => {\n const [isLoading, setIsLoading] = useState(false);\n\n const handleSubmit = (e: React.FormEvent) => {\n e.preventDefault();\n setIsLoading(true);\n \n // Redirect to Replit OAuth\n window.location.href = '/api/login';\n };\n\n const isLogin = type === 'login';\n\n return (\n <div className=\"w-full\">\n {/* Header */}\n <div className=\"mb-8\">\n <h2 className=\"text-2xl text-[#f5f5f5] mb-2\" style={{ fontFamily: 'Times New Roman, serif', fontWeight: 300 }}>\n {isLogin ? 'Log In' : 'Create Account'}\n </h2>\n <p className=\"text-[#f5f5f5]/70 text-sm font-inter\">\n {isLogin \n ? 'Continue building your empire'\n : 'Start your personal brand journey'\n }\n </p>\n </div>\n\n {/* Form */}\n <form onSubmit={handleSubmit} className=\"space-y-6\">\n \n {/* Main CTA Button */}\n <button\n type=\"submit\"\n disabled={isLoading}\n className=\"w-full py-4 border border-[#f5f5f5] text-[#f5f5f5] text-sm tracking-[0.2em] uppercase font-inter font-light hover:bg-[#f5f5f5] hover:text-[#0a0a0a] transition-all duration-300 disabled:opacity-50\"\n >\n {isLoading ? 'Connecting...' : (isLogin ? 'Continue with Account' : 'Start with Account')}\n </button>\n\n {/* Divider */}\n <div className=\"text-center\">\n <span className=\"text-[#f5f5f5]/50 text-xs font-inter\">\n Secure authentication powered by Replit\n </span>\n </div>\n\n {/* OAuth Notice */}\n <div className=\"text-center pt-6 border-t border-[#f5f5f5]/20\">\n <p className=\"text-[#f5f5f5]/70 text-sm font-inter\">\n Sign in or create account securely\n </p>\n <p className=\"text-[#f5f5f5]/50 text-xs font-inter mt-2", "reason": "üîë Client source file, üíª Code: build, üìÅ Code file" }, { "fileName": "client/src/components/auth-layout.tsx", "content": "import { cn } from '@/lib/utils';\nimport { Link } from 'wouter';\n\nexport function AuthLayout({ children, className }: { children: React.ReactNode, className?: string }) {\n return (\n <main className={cn(\n 'min-h-screen flex flex-col items-center justify-center bg-[#f5f5f5] px-6 py-12',\n className\n )}>\n <div className=\"w-full max-w-md bg-white shadow-xl p-10 flex flex-col gap-6\">\n <Link href=\"/\" className=\"block mb-2 text-3xl text-[#0a0a0a] text-center tracking-tight hover:opacity-90 transition\" style={{ fontFamily: 'Times New Roman, serif', fontWeight: 300 }}>\n SSELFIE\n </Link>\n <h1 className=\"text-2xl text-[#0a0a0a] text-center mb-1\" style={{ fontFamily: 'Times New Roman, serif', fontWeight: 300 }}>\n Welcome Back\n </h1>\n <p className=\"text-center text-[#666] text-base mb-4 font-inter\">\n Real talk: you don't have to have it all together to start. Just log in and let's get you back to building.\n </p>\n {children}\n </div>\n <p className=\"mt-6 text-sm text-[#666] text-center max-w-md font-inter\">\n \"Your mess is your message. Let's turn it into money.\"\n </p>\n </main>\n );\n}", "reason": "üîë Client source file, üíª Code: build, üìÅ Code file" }, { "fileName": "client/src/components/brand/EditorialCard.tsx", "content": "import React from 'react';\n\ninterface EditorialCardProps {\n title: string;\n subtitle?: string;\n image?: string;\n children: React.ReactNode;\n}\n\nexport const EditorialCard: React.FC<EditorialCardProps> = ({\n title,\n subtitle,\n image,\n children\n}) => {\n return (\n <article className=\"bg-white border border-gray-200 p-8 mb-8\">\n {image && (\n <div className=\"mb-8\">\n <img\n src={image}\n alt={title}\n className=\"w-full h-[400px] object-cover\"\n />\n </div>\n )}\n \n <header className=\"mb-6\">\n <h2 className=\"font-serif text-3xl text-gray-900 mb-2\">{title}</h2>\n {subtitle && (\n <p className=\"font-serif text-xl text-gray-600 italic\">{subtitle}</p>\n )}\n </header>\n\n <div className=\"prose prose-lg font-serif\">\n {children}\n </div>\n </article>\n );\n};", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/brand/EditorialGrid.tsx", "content": "import React from 'react';\n\ninterface EditorialGridProps {\n children: React.ReactNode;\n columns?: 2 | 3 | 4;\n}\n\nexport const EditorialGrid: React.FC<EditorialGridProps> = ({\n children,\n columns = 3\n}) => {\n const gridCols = {\n 2: 'md:grid-cols-2',\n 3: 'md:grid-cols-3', \n 4: 'md:grid-cols-4'\n };\n\n return (\n <div className={grid grid-cols-1 ${gridCols[columns]} gap-8}>\n {children}\n </div>\n );\n};", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/brand/LuxuryEditorialLayout.tsx", "content": "import React from 'react';\n\ninterface LuxuryEditorialLayoutProps {\n children: React.ReactNode;\n title?: string;\n subtitle?: string;\n}\n\nexport const LuxuryEditorialLayout: React.FC<LuxuryEditorialLayoutProps> = ({\n children,\n title,\n subtitle\n}) => {\n return (\n <div className=\"min-h-screen bg-white\">\n <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n {/* Editorial Header */}\n <header className=\"py-16 text-center\">\n {title && (\n <h1 className=\"font-serif text-4xl md:text-6xl text-gray-900 tracking-tight leading-tight mb-4\">\n {title}\n </h1>\n )}\n {subtitle && (\n <p className=\"font-serif text-xl md:text-2xl text-gray-600 italic\">\n {subtitle}\n </p>\n )}\n </header>\n\n {/* Luxury Content Container */}\n <main className=\"prose prose-lg max-w-none\">\n <div className=\"grid grid-cols-1 md:grid-cols-12 gap-8\">\n <div className=\"md:col-span-2\">\n {/* Left Editorial Margin */}\n <div className=\"h-full border-r border-gray-200\" />\n </div>\n \n <div className=\"md:col-span-8\">\n {/* Main Content */}\n <div className=\"font-serif\">{children}</div>\n </div>\n\n <div className=\"md:col-span-2\">\n {/* Right Editorial Margin */}\n <div className=\"h-full border-l border-gray-200\" />\n </div>\n </div>\n </main>\n </div>\n </div>\n );\n};", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/bridge/LuxuryProgressDisplay.tsx", "content": "import React from 'react';\n\ninterface LuxuryProgressDisplayProps {\n isVisible: boolean;\n taskDescription?: string;\n progress?: number;\n className?: string;\n}\n\nexport default function LuxuryProgressDisplay({\n isVisible,\n taskDescription = \"Implementation in progress...\",\n progress = 0,\n className = \"\"\n}: LuxuryProgressDisplayProps) {\n if (!isVisible) return null;\n\n return (\n <div className={fixed bottom-6 right-6 bg-white border border-zinc-200 shadow-lg p-6 max-w-sm ${className}}>\n <div className=\"mb-4\">\n <div \n className=\"font-serif text-sm font-light text-black\"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {taskDescription}\n </div>\n </div>\n \n {/* Minimal Progress Bar */}\n <div className=\"w-full bg-zinc-100 h-1\">\n <div \n className=\"bg-black h-1 transition-all duration-500\"\n style={{ width: ${progress}%}}\n />\n </div>\n \n {progress > 0 && (\n <div \n className=\"text-xs text-zinc-500 mt-2 text-right\"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {Math.round(progress)}% Complete\n </div>\n )}\n </div>\n );\n}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/bridge/StatusDashboard.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Clock, CheckCircle, AlertCircle, PlayCircle, Users } from 'lucide-react';\nimport TaskStatusIndicator from './TaskStatusIndicator';\n\ninterface BridgeTask {\n id: string;\n agentName: string;\n instruction: string;\n status: 'pending' | 'planning' | 'executing' | 'validating' | 'completed' | 'failed';\n priority: 'low' | 'medium' | 'high';\n createdAt: string;\n updatedAt: string;\n progress: number;\n steps: Array<{\n id: string;\n title: string;\n status: 'pending' | 'in_progress' | 'completed' | 'failed';\n progress?: number;\n }>;\n}\n\ninterface StatusDashboardProps {\n className?: string;\n}\n\nexport default function StatusDashboard({ className = \"\" }: StatusDashboardProps) {\n const [activeTasks, setActiveTasks] = useState<BridgeTask[]>([]);\n const [loading, setLoading] = useState(true);\n const [error, setError] = useState<string | null>(null);\n\n const fetchActiveTasks = async () => {\n try {\n const response = await fetch('/api/agent-bridge/active-tasks', {\n credentials: 'include'\n });\n \n if (!response.ok) {\n throw new Error('Failed to fetch active tasks');\n }\n \n const data = await response.json();\n setActiveTasks(data.tasks || []);\n setError(null);\n } catch (err) {\n setError(err instanceof Error ? err.message : 'Unknown error');\n } finally {\n setLoading(false);\n }\n };\n\n useEffect(() => {\n fetchActiveTasks();\n \n // Poll for updates every 3 seconds\n const interval = setInterval(fetchActiveTasks, 3000);\n return () => clearInterval(interval);\n }, []);\n\n const getStatusStats = () => {\n const stats = {\n total: activeTasks.length,\n active: activeTasks.filter(t => ['planning', 'executing', 'validating'].includes(t.status)).length,\n completed: activeTasks.filter(", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/bridge/TaskStatusIndicator.tsx", "content": "import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Button } from '@/components/ui/button';\nimport { \n CheckCircle, \n AlertCircle, \n PlayCircle, \n Clock, \n ChevronDown, \n ChevronUp,\n User,\n Calendar\n} from 'lucide-react';\n\ninterface TaskStep {\n id: string;\n title: string;\n status: 'pending' | 'in_progress' | 'completed' | 'failed';\n progress?: number;\n description?: string;\n}\n\ninterface BridgeTask {\n id: string;\n agentName: string;\n instruction: string;\n status: 'pending' | 'planning' | 'executing' | 'validating' | 'completed' | 'failed';\n priority: 'low' | 'medium' | 'high';\n createdAt: string;\n updatedAt: string;\n progress: number;\n steps: TaskStep[];\n}\n\ninterface TaskStatusIndicatorProps {\n task: BridgeTask;\n className?: string;\n}\n\nexport default function TaskStatusIndicator({ task, className = \"\" }: TaskStatusIndicatorProps) {\n const [expanded, setExpanded] = useState(false);\n\n const getStatusIcon = (status: string) => {\n switch (status) {\n case 'completed':\n return <CheckCircle className=\"h-4 w-4 text-emerald-600\" />;\n case 'failed':\n return <AlertCircle className=\"h-4 w-4 text-red-600\" />;\n case 'executing':\n case 'validating':\n return <PlayCircle className=\"h-4 w-4 text-blue-600 animate-pulse\" />;\n case 'planning':\n return <Clock className=\"h-4 w-4 text-amber-600\" />;\n default:\n return <Clock className=\"h-4 w-4 text-zinc-500\" />;\n }\n };\n\n const getStatusBadge = (status: string) => {\n switch (status) {\n case 'completed':\n return <Badge className=\"bg-emerald-100 text-emerald-800 border-emerald-200\">Completed</Badge>;\n case 'failed':\n return <Badge className=\"bg-red-100 text-red-800 border-red-200\">Failed</Badge>;\n case 'executing':\n return <Badge cla", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/completion-modal.tsx", "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\n\ninterface CompletionModalProps {\n isOpen: boolean;\n onClose: () => void;\n liveUrl: string;\n brandName: string;\n}\n\nexport function CompletionModal({ isOpen, onClose, liveUrl, brandName }: CompletionModalProps) {\n if (!isOpen) return null;\n\n const copyUrlToClipboard = () => {\n navigator.clipboard.writeText(liveUrl);\n // Show brief feedback without toast\n const button = document.getElementById('copy-url-btn');\n if (button) {\n const originalText = button.textContent;\n button.textContent = 'Copied';\n setTimeout(() => {\n button.textContent = originalText;\n }, 1500);\n }\n };\n\n return (\n <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n <div className=\"bg-white w-full max-w-md mx-4 rounded-none shadow-2xl\">\n {/* Header with luxury styling */}\n <div className=\"text-center p-8 border-b border-gray-100\">\n <div className=\"mb-6\">\n <div className=\"w-16 h-16 mx-auto bg-black rounded-full flex items-center justify-center mb-4\">\n <span className=\"text-white text-2xl\">‚úì</span>\n </div>\n </div>\n <h2 \n className=\"text-2xl mb-2 text-black font-light tracking-wide\"\n style={{ fontFamily: \"'Times New Roman', serif\" }}\n >\n Your Brand Is Live\n </h2>\n <p className=\"text-gray-600 text-sm tracking-wide uppercase\" style={{ letterSpacing: '0.1em' }}>\n {brandName} ‚Ä¢ Published Successfully\n </p>\n </div>\n\n {/* Content */}\n <div className=\"p-8\">\n <div className=\"text-center mb-8\">\n <p className=\"text-gray-700 mb-6 leading-relaxed\">\n Your professional landing page is now live and ready for your audience.\n </p>\n \n {/* Live URL Display */}\n <div className=\"bg-gray-50 p-4", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/comprehensive-landing-template.tsx", "content": "export const COMPREHENSIVE_LANDING_TEMPLATE =<!DOCTYPE html>\n<html lang="en">\n<head>\n <meta charset="UTF-8">\n <meta name="viewport" content="width=device-width, initial-scale=1.0">\n <title>{{USER_NAME}} - {{USER_TAGLINE}}</title>\n <style>\n * { margin: 0; padding: 0; box-sizing: border-box; }\n body { font-family: system-ui, -apple-system, sans-serif; line-height: 1.6; color: #0a0a0a; }\n .serif { font-family: 'Times New Roman', serif; }\n \n / Navigation /\n .nav { position: fixed; top: 0; left: 0; right: 0; z-index: 1000; background: rgba(255,255,255,0.95); backdrop-filter: blur(10px); border-bottom: 1px solid #e5e5e5; padding: 20px 0; }\n .nav-container { max-width: 1400px; margin: 0 auto; padding: 0 40px; display: flex; justify-content: space-between; align-items: center; }\n .nav-logo { font-family: 'Times New Roman', serif; font-size: 20px; font-weight: 400; letter-spacing: -0.01em; color: #0a0a0a; text-decoration: none; }\n .nav-menu { display: flex; gap: 40px; }\n .nav-item { color: #0a0a0a; text-decoration: none; font-size: 11px; letter-spacing: 0.4em; text-transform: uppercase; transition: opacity 0.3s; }\n .nav-item:hover { opacity: 0.6; }\n \n / Hero Section /\n .hero-section { \n height: 100vh; \n background: linear-gradient(rgba(10,10,10,0.3), rgba(10,10,10,0.3)), url('{{USER_HERO_PHOTO}}') center top/cover; \n display: flex; \n flex-direction: column;\n justify-content: flex-end; \n align-items: center;\n text-align: center; \n color: white; \n position: relative;\n padding: 80px 40px;\n }\n .hero-content { max-width: 800px; }\n .hero-tagline { \n font-size: 11px; \n letter-spacing: 0.4em; \n text-transform: uppercase; \n color: rgba(255,255,255,0.7); \n margin-bottom: 24px; \n }\n", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/dashboard/ComplexDashboard.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { useDashboardData } from '../../hooks/useDashboardData';\nimport { DashboardMetrics, DashboardSection } from '../../../shared/types/dashboard';\nimport styled from 'styled-components';\n\nconst DashboardContainer = styled.div\n padding: 40px;\n background: #ffffff;\n min-height: 100vh;\n;\n\nconst DashboardHeader = styled.h1\n font-family: \"Times New Roman\", serif;\n font-size: 48px;\n color: #0a0a0a;\n margin-bottom: 40px;\n font-weight: normal;\n letter-spacing: -0.02em;\n;\n\nconst MetricsGrid = styled.div\n display: grid;\n grid-template-columns: repeat(3, 1fr);\n gap: 30px;\n margin-bottom: 60px;\n;\n\nconst MetricCard = styled.div\n background: #f5f5f5;\n padding: 40px;\n \n h3 {\n font-family: \"Times New Roman\", serif;\n font-size: 24px;\n color: #0a0a0a;\n margin-bottom: 20px;\n }\n \n p {\n font-family: \"Times New Roman\", serif;\n font-size: 36px;\n color: #0a0a0a;\n }\n;\n\nconst SectionContainer = styled.section\n margin-bottom: 80px;\n \n h2 {\n font-family: \"Times New Roman\", serif;\n font-size: 32px;\n color: #0a0a0a;\n margin-bottom: 30px;\n font-weight: normal;\n }\n;\n\nexport const ComplexDashboard: React.FC = () => {\n const { metrics, sections, loading, error } = useDashboardData();\n \n if (loading) return <div>Loading...</div>;\n if (error) return <div>Error: {error}</div>;\n\n return (\n <DashboardContainer>\n <DashboardHeader>Executive Dashboard</DashboardHeader>\n \n <MetricsGrid>\n {metrics?.map((metric, index) => (\n <MetricCard key={index}>\n <h3>{metric.label}</h3>\n <p>{metric.value}</p>\n </MetricCard>\n ))}\n </MetricsGrid>\n\n {sections?.map((section, index) => (\n <SectionContainer key={index}>\n <h2>{section.title}</h2>\n {/ Custom section content rendering based on section.type */}\n <div>{section.content}</div>\n </SectionContainer>\n ))}\n </Dash", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/dashboard/ProgressDashboard.tsx", "content": "/\n * PROGRESS DASHBOARD COMPONENT\n * Real-time visualization of multi-agent work progress\n * Generated by Aria - Luxury Design Authority\n /\n\nimport React, { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { implementationTracker, ImplementationMetrics } from '@/services/implementation-tracker';\n\nexport interface AgentWork {\n agentId: string;\n task: string;\n status: 'idle' | 'working' | 'completed' | 'error';\n progress: number;\n timestamp: string;\n value: number;\n}\n\nexport interface ProgressMetrics {\n totalTasks: number;\n completedTasks: number;\n activeTasks: number;\n systemHealth: number;\n responseTime: number;\n}\n\ninterface DashboardProps {\n metrics: ProgressMetrics;\n agentWork: AgentWork[];\n}\n\nexport const ProgressDashboard: React.FC<DashboardProps> = ({ \n metrics, \n agentWork \n}) => {\n const [implementationMetrics, setImplementationMetrics] = useState<ImplementationMetrics | null>(null);\n const [realTimeUpdates, setRealTimeUpdates] = useState<string[]>([]);\n\n useEffect(() => {\n // Update implementation metrics\n const updateMetrics = () => {\n setImplementationMetrics(implementationTracker.getMetrics());\n };\n\n updateMetrics();\n const interval = setInterval(updateMetrics, 2000);\n\n // Listen for real-time updates\n const handleUpdate = (event: CustomEvent) => {\n const { component } = event.detail;\n setRealTimeUpdates(prev => [\n ${new Date().toLocaleTimeString()}: ${component} completed,\n ...prev.slice(0, 9)\n ]);\n };\n\n window.addEventListener('implementation-update', handleUpdate as EventListener);\n\n return () => {\n clearInterval(interval);\n window.removeEventListener('implementation-update', handleUpdate as EventListener);\n };\n }, []);\n\n const getStatusColor = (status: AgentWork['status']) => {\n switch (status) {\n case 'working': return 'text-blue-400';\n case 'completed': return 'text-green-400';\n case 'error': retur", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/design/LuxuryCard.tsx", "content": "import React from 'react';\nimport styled from 'styled-components';\n\ninterface LuxuryCardProps {\n title: string;\n subtitle?: string;\n content: string;\n imageSrc?: string;\n}\n\nconst CardContainer = styled.div\n background: #ffffff;\n border: 1px solid #0a0a0a;\n padding: 2.5rem;\n margin: 2rem 0;\n max-width: 800px;\n font-family: 'Times New Roman', Times, serif;\n;\n\nconst CardTitle = styled.h2\n color: #0a0a0a;\n font-family: 'Times New Roman', Times, serif;\n font-size: 2.5rem;\n font-weight: normal;\n letter-spacing: 0.02em;\n margin: 0 0 1rem 0;\n line-height: 1.2;\n;\n\nconst CardSubtitle = styled.h3\n color: #666666;\n font-family: 'Times New Roman', Times, serif;\n font-size: 1.5rem;\n font-weight: normal;\n font-style: italic;\n margin: 0 0 2rem 0;\n;\n\nconst CardContent = styled.div\n color: #0a0a0a;\n font-family: 'Times New Roman', Times, serif;\n font-size: 1.125rem;\n line-height: 1.8;\n margin: 0;\n;\n\nconst LuxuryImage = styled.img\n width: 100%;\n height: auto;\n margin: 2rem 0;\n display: block;\n;\n\nconst LuxuryCard: React.FC<LuxuryCardProps> = ({\n title,\n subtitle,\n content,\n imageSrc\n}) => {\n return (\n <CardContainer>\n <CardTitle>{title}</CardTitle>\n {subtitle && <CardSubtitle>{subtitle}</CardSubtitle>}\n {imageSrc && <LuxuryImage src={imageSrc} alt={title} />}\n <CardContent>{content}</CardContent>\n </CardContainer>\n );\n};\n\nexport default LuxuryCard;", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/design/LuxuryComponents.tsx", "content": "import React from 'react';\n\ninterface LuxuryHeadingProps {\n children: React.ReactNode;\n size?: 'sm' | 'md' | 'lg' | 'xl';\n className?: string;\n}\n\nexport const LuxuryHeading: React.FC<LuxuryHeadingProps> = ({ \n children, \n size = 'md',\n className = ''\n}) => {\n const sizeClasses = {\n sm: 'text-lg md:text-xl',\n md: 'text-xl md:text-2xl',\n lg: 'text-2xl md:text-3xl',\n xl: 'text-3xl md:text-4xl'\n };\n\n return (\n <h2 \n className={\n font-['Times_New_Roman'] \n leading-tight \n tracking-[-0.01em]\n text-luxury-black\n ${sizeClasses[size]}\n ${className}\n }\n >\n {children}\n </h2>\n );\n};\n\ninterface EditorialTextProps {\n children: React.ReactNode;\n variant?: 'body' | 'caption' | 'detail';\n className?: string; \n}\n\nexport const EditorialText: React.FC<EditorialTextProps> = ({\n children,\n variant = 'body',\n className = ''\n}) => {\n const variantClasses = {\n body: 'text-base leading-relaxed',\n caption: 'text-sm leading-snug',\n detail: 'text-xs uppercase tracking-widest'\n };\n\n return (\n <p \n className={\n font-['Times_New_Roman']\n text-luxury-black\n ${variantClasses[variant]}\n ${className}\n }\n >\n {children}\n </p>\n );\n};\n\ninterface EditorialDividerProps {\n className?: string;\n}\n\nexport const EditorialDivider: React.FC<EditorialDividerProps> = ({\n className = ''\n}) => {\n return (\n <hr \n className={\n border-t\n border-accent-line\n my-8\n ${className}\n }\n />\n );\n};\n\ninterface EditorialContainerProps {\n children: React.ReactNode;\n className?: string;\n}\n\nexport const EditorialContainer: React.FC<EditorialContainerProps> = ({\n children,\n className = ''\n}) => {\n return (\n <div \n className={\n max-w-4xl\n mx-auto\n px-4\n md:px-8\n py-12\n md:py-16\n bg-pure-white\n ${className}\n }\n >\n {children}\n </div>\n );\n};", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/design/index.ts", "content": "export * from './LuxuryComponents';", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/dev-preview-modal.tsx", "content": "import React, { useState } from 'react';\nimport { X, Check, RotateCcw, Copy, Download } from 'lucide-react';\nimport { LiveComponentPreview } from './LiveComponentPreview';\n\ninterface DevPreviewModalProps {\n isOpen: boolean;\n onClose: () => void;\n agentName: string;\n previewData: {\n type: 'component' | 'page' | 'api' | 'database' | 'styling';\n title: string;\n description: string;\n code?: string;\n preview?: string;\n changes?: string[];\n files?: { path: string; content: string; type: 'modified' | 'created' | 'deleted' }[];\n fileContent?: string; // Victoria's component code\n filePath?: string; // The file path for the component\n };\n onApprove: () => void;\n onReject: (feedback?: string) => void;\n}\n\nexport function DevPreviewModal({ \n isOpen, \n onClose, \n agentName, \n previewData, \n onApprove, \n onReject \n}: DevPreviewModalProps) {\n const [feedback, setFeedback] = useState('');\n const [activeTab, setActiveTab] = useState<'preview' | 'code' | 'changes'>('preview');\n\n // Preview modal for agent development work\n \n if (!isOpen) return null;\n\n const copyToClipboard = (text: string) => {\n navigator.clipboard.writeText(text);\n };\n\n return (\n <div className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4">\n <div className="bg-white max-w-6xl w-full max-h-[90vh] overflow-hidden flex flex-col">\n {/ Header /}\n <div className="p-4 border-b border-gray-200 flex items-center justify-between bg-gray-50">\n <div>\n <h3 className="font-serif text-xl">{agentName} Development Preview</h3>\n <p className="text-sm text-gray-600 mt-1">{previewData.title}</p>\n </div>\n <button\n onClick={onClose}\n className="p-2 hover:bg-gray-200 rounded"\n >\n <X className="w-5 h-5" />\n </button>\n </div>\n\n {/ Tab Navigation /}\n <div className="flex border-b border-gray-200 bg-gray-50">\n ", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/editorial/EditorialHeading.tsx", "content": "import React from 'react';\n\ninterface EditorialHeadingProps {\n children: React.ReactNode;\n level?: 1 | 2 | 3 | 4;\n className?: string;\n}\n\nexport const EditorialHeading: React.FC<EditorialHeadingProps> = ({\n children,\n level = 1,\n className = ''\n}) => {\n const baseClasses = 'font-serif font-bold text-zinc-900 mb-6 leading-tight';\n \n const sizeClasses = {\n 1: 'text-4xl md:text-5xl lg:text-6xl',\n 2: 'text-3xl md:text-4xl lg:text-5xl',\n 3: 'text-2xl md:text-3xl lg:text-4xl',\n 4: 'text-xl md:text-2xl lg:text-3xl'\n };\n\n const Component = h${level} as keyof JSX.IntrinsicElements;\n\n return (\n <Component className={${baseClasses} ${sizeClasses[level]} ${className}}>\n {children}\n </Component>\n );\n}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/editorial/EditorialText.tsx", "content": "import React from 'react';\n\ninterface EditorialTextProps {\n children: React.ReactNode;\n size?: 'sm' | 'base' | 'lg';\n weight?: 'normal' | 'medium' | 'bold';\n italic?: boolean;\n}\n\nexport const EditorialText: React.FC<EditorialTextProps> = ({\n children,\n size = 'base',\n weight = 'normal',\n italic = false\n}) => {\n const sizeClasses = {\n sm: 'text-sm md:text-base',\n base: 'text-base md:text-lg',\n lg: 'text-lg md:text-xl'\n };\n\n const weightClasses = {\n normal: 'font-normal',\n medium: 'font-medium',\n bold: 'font-bold'\n };\n\n return (\n <p className={\n font-serif\n ${sizeClasses[size]}\n ${weightClasses[weight]}\n ${italic ? 'italic' : ''}\n text-zinc-800\n leading-relaxed\n mb-6\n }>\n {children}\n </p>\n );\n}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/editorial/LuxuryHeader.tsx", "content": "import React from 'react';\n\ninterface LuxuryHeaderProps {\n title: string;\n subtitle?: string;\n alignment?: 'left' | 'center';\n}\n\nexport const LuxuryHeader: React.FC<LuxuryHeaderProps> = ({\n title,\n subtitle,\n alignment = 'left'\n}) => {\n return (\n <header className={mb-12 ${alignment === 'center' ? 'text-center' : ''}}>\n <h1 className="font-serif text-4xl md:text-5xl lg:text-6xl text-zinc-900 tracking-tight leading-none mb-4">\n {title}\n </h1>\n {subtitle && (\n <p className="font-serif text-lg md:text-xl text-zinc-600 italic leading-relaxed">\n {subtitle}\n </p>\n )}\n <div className="w-16 h-0.5 bg-zinc-900 mt-6 mb-8" \n style={{marginLeft: alignment === 'center' ? 'auto' : '0', marginRight: alignment === 'center' ? 'auto' : '0'}} />\n </header>\n );\n}", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/editorial-image-break.tsx", "content": "import React from 'react';\n\ninterface EditorialImageBreakProps {\n src: string;\n alt: string;\n height?: 'small' | 'medium' | 'large';\n overlay?: boolean;\n overlayText?: string;\n}\n\nexport const EditorialImageBreak: React.FC<EditorialImageBreakProps> = ({\n src,\n alt,\n height = 'medium',\n overlay = false,\n overlayText\n}) => {\n const heightClass = {\n small: 'h-[30vh]',\n medium: 'h-[40vh]',\n large: 'h-[60vh]'\n }[height];\n\n return (\n <section className={w-full ${heightClass} overflow-hidden relative}>\n <img \n src={src} \n alt={alt} \n className="w-full h-full object-cover editorial-hover"\n loading="lazy"\n />\n \n {overlay && (\n <div className="absolute inset-0 bg-black/40 flex items-center justify-center">\n {overlayText && (\n <blockquote \n className="text-white text-center text-2xl md:text-3xl lg:text-4xl font-light max-w-4xl px-8 md:px-12 leading-tight tracking-[-0.02em] italic"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n "{overlayText}"\n </blockquote>\n )}\n </div>\n )}\n </section>\n );\n};\n", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/editorial-spread.tsx", "content": "import React from 'react';\n\ninterface EditorialSpreadProps {\n leftImage?: string;\n rightImage?: string;\n title?: string;\n description?: string;\n leftCaption?: string;\n rightCaption?: string;\n className?: string;\n}\n\nexport default function EditorialSpread({\n leftImage = "https://images.unsplash.com/photo-1469474968028-56623f02e42e?w=800&h=600&fit=crop",\n rightImage = "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800&h=600&fit=crop",\n title = "Editorial Collection",\n description = "Curated moments that tell your story with editorial sophistication and timeless elegance.",\n leftCaption = "Left Image",\n rightCaption = "Right Image",\n className = ""\n}: EditorialSpreadProps) {\n return (\n <div className={bg-white ${className}}>\n {/ Title Section /}\n <div className="text-center py-16 px-4">\n <h2 \n className="text-4xl md:text-5xl font-light text-black mb-6 tracking-wide"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {title}\n </h2>\n <div className="max-w-2xl mx-auto">\n <p className="text-lg text-gray-600 leading-relaxed">\n {description}\n </p>\n </div>\n </div>\n\n {/ Image Spread /}\n <div className="grid grid-cols-1 md:grid-cols-2 gap-0">\n {/ Left Image /}\n <div className="relative group overflow-hidden bg-gray-100">\n <div className="aspect-[4/5]">\n <img \n src={leftImage}\n alt={leftCaption}\n className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"\n />\n </div>\n \n {/ Left Caption Overlay /}\n <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-6 md:p-8">\n <p \n className="text-white text-lg font-light tracking-wide"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n ", "reason": "üîë Client source file, üìÅ Code file" }, { "fileName": "client/src/components/editorial-story.tsx", "content": "import React from 'react';\n\ninterface EditorialStoryProps {\n headline: string;\n paragraphs: string[];\n imageSrc: string;\n imageAlt: string;\n backgroundColor?: string;\n textColor?: string;\n reversed?: boolean;\n button?: {\n text: string;\n href: string;\n variant?: 'primary' | 'secondary';\n };\n}\n\nexport const EditorialStory: React.FC<EditorialStoryProps> = ({\n headline,\n paragraphs,\n imageSrc,\n imageAlt,\n backgroundColor = '#f5f5f5',\n textColor = '#0a0a0a',\n reversed = false,\n button\n}) => {\n return (\n <section className="section-padding" style={{ backgroundColor }}>\n <div className="max-w-7xl mx-auto px-8">\n <div className={grid grid-cols-1 lg:grid-cols-2 gap-16 lg:gap-20 items-center ${reversed ? 'lg:grid-flow-col-dense' : ''}}>\n \n {/ Text Content - Editorial Hierarchy /}\n <div className={${reversed ? 'lg:col-start-2' : ''} editorial-text-layout}>\n \n {/ Main Headline /}\n <h2 \n className="editorial-headline"\n style={{ \n fontWeight: 300, \n letterSpacing: '-0.01em',\n color: textColor,\n fontSize: 'clamp(2.5rem, 6vw, 4rem)',\n lineHeight: 1.1,\n marginBottom: '2rem'\n }}\n >\n {headline}\n </h2>\n \n {/ Subheadline /}\n <h3 \n className="editorial-subheadline system-text"\n style={{ \n fontSize: '1.5rem',\n lineHeight: 1.4,\n fontWeight: 300,\n color: textColor,\n marginBottom: '3rem'\n }}\n >\n One year ago my marriage ended. Single mom, three kids, zero plan.\n </h3>\n\n {/ Tagline with divider */}\n <div className="editorial-tagline" style={{ marginBottom: '3rem' }}>\n <p \n className="system-te", "reason": "üîë Client source file, üìÅ Code file" } ], "totalFiles": 100, "accessLevel": "UNLIMITED", "note": "Complete repository access enabled - all agents can see entire codebase. Search hit maximum limit - refine query for specific files.", "searchStats": { "filesAnalyzed": 100, "maxCapacity": 100, "hitLimit": true, "suggestion": "Use more specific search terms to find exact files" } }