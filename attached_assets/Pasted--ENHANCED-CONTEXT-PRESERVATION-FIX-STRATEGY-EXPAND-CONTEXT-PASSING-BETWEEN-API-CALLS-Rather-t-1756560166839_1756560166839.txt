# ENHANCED CONTEXT PRESERVATION FIX

## STRATEGY: EXPAND CONTEXT PASSING BETWEEN API CALLS

Rather than restructuring the dual API call architecture, enhance what gets preserved from Maya's concept creation (API Call #1) to her prompt generation (API Call #2).

**Why This Approach:**
- Lower implementation risk than architectural changes
- Current partial context preservation is working - just insufficient
- Faster to implement for launch timeline
- Surgical fix targeting the exact problem identified

---

## IMPLEMENTATION TASKS

### TASK 1: CAPTURE COMPLETE MAYA CONTEXT IN API CALL #1

**File:** `server/routes/maya-unified.ts` (around line 222 - concept creation)

**Add comprehensive context capture after Maya's concept creation response:**

```typescript
// After Maya creates concept cards (API Call #1)
const claudeResponse = await fetch(/* ... concept creation call ... */);
const mayaResponse = claudeResponse.data.content[0].text;

// ENHANCED: Capture complete Maya context for preservation
const enhancedContext = {
  originalMayaResponse: mayaResponse,
  conversationHistory: fullConversationHistory.slice(-3), // Last 3 exchanges for context
  userPersonalBrand: extractPersonalBrandContext(message), // User's brand context
  categoryContext: detectedCategory,
  stylingReasoning: extractStylingReasoning(mayaResponse), // Maya's reasoning
  systemPrompt: enhancedPrompt, // Same system prompt used in API Call #1
  timestamp: Date.now()
};

// Store in concept cards for later retrieval
conceptCards.forEach(concept => {
  concept.enhancedContext = enhancedContext;
});
```

### TASK 2: ENHANCE CONTEXT RETRIEVAL IN API CALL #2

**File:** `server/routes/maya-unified.ts` (around line 1779 - `createDetailedPromptFromConcept`)

**Replace current basic context preservation with comprehensive context:**

```typescript
// CURRENT (insufficient):
const contextPreservation = `✅ PRESERVED MAYA CONTEXT: This user clicked on a previously created concept card...
"${cleanOriginalContext}"`;

// ENHANCED (comprehensive):
const enhancedContextPreservation = `✅ COMPLETE MAYA CONTEXT RESTORATION:

ORIGINAL CONVERSATION CONTEXT:
${enhancedContext.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\n')}

MAYA'S ORIGINAL STYLING VISION:
${enhancedContext.originalMayaResponse}

MAYA'S STYLING REASONING:
${enhancedContext.stylingReasoning}

USER'S PERSONAL BRAND CONTEXT:
${enhancedContext.userPersonalBrand}

CATEGORY CONTEXT: ${enhancedContext.categoryContext}

CRITICAL INSTRUCTION: You created this concept in a previous conversation. Use your EXACT original styling vision as the foundation. Do not create new styling - enhance and refine what you already created while maintaining complete consistency with your original concept.`;
```

### TASK 3: ENSURE IDENTICAL SYSTEM PROMPTS

**Modify API Call #2 to use identical system prompt as API Call #1:**

```typescript
// In createDetailedPromptFromConcept function
const claudeResponse = await fetch('https://api.anthropic.com/v1/messages', {
  method: 'POST',
  headers: { /* ... */ },
  body: JSON.stringify({
    model: 'claude-3-5-sonnet-20241022',
    max_tokens: 8000,
    // CHANGED: Use same system prompt as concept creation
    system: enhancedContext.systemPrompt, // Previously: baseMayaPersonality
    messages: [
      // Include conversation history for context
      ...enhancedContext.conversationHistory,
      {
        role: 'user',
        content: `${enhancedContextPreservation}

GENERATE CLEAN FLUX PROMPT: Transform your original styling concept into a flowing image generation prompt...`
      }
    ]
  })
});
```

---

## SUPPORTING FUNCTIONS TO ADD

### Function 1: Extract Personal Brand Context
```typescript
function extractPersonalBrandContext(userMessage: string): string {
  // Extract user's personal brand indicators from their request
  const brandKeywords = ['entrepreneur', 'CEO', 'creative', 'influencer', 'professional'];
  const personalStyle = ['minimalist', 'bold', 'elegant', 'edgy', 'sophisticated'];
  
  // Simple extraction logic - can be enhanced
  return userMessage.toLowerCase();
}
```

### Function 2: Extract Styling Reasoning
```typescript
function extractStylingReasoning(mayaResponse: string): string {
  // Extract Maya's reasoning about why she chose specific styling
  // Look for reasoning patterns in her response
  const reasoningSection = mayaResponse.match(/(?:because|since|for|to create).*?(?:\.|!|\?)/gi);
  return reasoningSection ? reasoningSection.join(' ') : 'Styling chosen for category appropriateness and visual impact.';
}
```

---

## TESTING PROTOCOL

### Test 1: Context Preservation Verification
**Steps:**
1. Generate concept cards: "Create Instagram content concepts"
2. Note Maya's original styling: "Black turtleneck dress, oversized camel coat"
3. Click concept card to generate image
4. Verify generated prompt contains identical styling elements

**Success Criteria:**
- Generated prompt includes "black turtleneck dress" and "camel coat"
- No deviation to "ivory blazer" or different styling
- Maya's original vision preserved accurately

### Test 2: Cross-Category Consistency  
**Test different categories to ensure consistent behavior:**
- Business category concepts → Business prompts
- Lifestyle category concepts → Lifestyle prompts
- No category mixing or generic fallbacks

### Test 3: Reasoning Preservation
**Verify Maya's styling reasoning carries through:**
- Original concept: "Professional authority with approachable sophistication"
- Generated prompt: Should maintain same styling philosophy

---

## SUCCESS METRICS

**Context Preservation:**
- [ ] Original styling descriptions match generated prompts
- [ ] Maya's reasoning carries through both API calls
- [ ] User's personal brand context influences both phases
- [ ] No generic styling fallbacks

**User Experience:**
- [ ] Users see consistent styling from concept to generated image
- [ ] No surprise styling changes when clicking concept cards
- [ ] Maya appears to have continuous memory across interactions

**Technical Implementation:**
- [ ] Enhanced context stored and retrieved successfully
- [ ] Identical system prompts used in both API calls
- [ ] Conversation history context included in prompt generation

---

## ROLLBACK PLAN

If enhanced context preservation causes issues:

1. **Immediate Rollback:** Revert to current basic context preservation
2. **Debugging:** Add more granular logging to identify specific failures
3. **Iterative Fix:** Implement enhancements incrementally rather than all at once

---

## COMPLETION CRITERIA

```
ENHANCED CONTEXT PRESERVATION IMPLEMENTATION COMPLETE

Context Expansion:
- Original Maya response: PRESERVED
- Conversation history: PRESERVED  
- Personal brand context: PRESERVED
- Styling reasoning: PRESERVED
- System prompt consistency: ACHIEVED

Testing Results:
- Instagram concept consistency: PASS/FAIL
- Business concept consistency: PASS/FAIL
- Cross-category testing: PASS/FAIL
- User experience alignment: PASS/FAIL

Status: CONTEXT PRESERVATION ENHANCED / ISSUES FOUND
```

This approach builds upon the existing partial context preservation while ensuring Maya maintains complete memory and consistency between her concept creation and prompt generation phases.