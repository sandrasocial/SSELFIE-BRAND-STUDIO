DEBUG EXISTING SINGLE API CALL SYSTEM
CRITICAL FINDING
Single API call architecture ALREADY EXISTS but isn't working consistently. Focus on debugging existing system rather than building new functionality.
Mission: Identify why existing single API call system falls back to dual API calls.

DEBUGGING PROTOCOL
TASK 1: TRACE SINGLE API CALL EXECUTION
Step 1.1: Add Debug Logging to Single API Call System
File: server/routes/maya-unified.ts
Find and enhance the single API call logic (around line 181):
typescript// FIND: 'MAYA UNIFIED SINGLE API CALL - CONCEPT + PROMPT GENERATION'
console.log('üéØ SINGLE API CALL SYSTEM: Starting combined concept + prompt generation');
console.log('üîç REQUEST DATA:', { message, chatId, requestType: 'single_api_call' });

// ADD COMPREHENSIVE LOGGING:
console.log('üìä SINGLE API CALL DEBUG:');
console.log('- Maya personality loaded:', !!mayaPersonality);
console.log('- Enhanced context available:', !!enhancedContext);
console.log('- Conversation history length:', conversationHistory?.length || 0);
console.log('- Category detected:', detectedCategory || 'none');
Step 1.2: Track ConceptCard.fullPrompt Population
Find the concept card creation logic and add logging:
typescript// FIND where ConceptCards are created with fullPrompt
conceptCards.forEach((concept, index) => {
  console.log(`üé® CONCEPT ${index + 1} CREATION:`);
  console.log(`- Name: ${concept.title}`);
  console.log(`- Has fullPrompt: ${!!concept.fullPrompt}`);
  console.log(`- FullPrompt length: ${concept.fullPrompt?.length || 0} characters`);
  console.log(`- FullPrompt preview: ${concept.fullPrompt?.substring(0, 100)}...`);
});
TASK 2: IDENTIFY FALLBACK TRIGGERS
Step 2.1: Debug Dual API Call Fallback
Find the fallback logic (around line 530):
typescript// FIND: 'CRITICAL: Check if concept has embedded fullPrompt from single API call'
console.log('üîç FALLBACK CHECK: Examining concept for embedded prompt');
console.log('- Concept name:', conceptName);
console.log('- Looking for embedded fullPrompt...');

if (concept.fullPrompt && concept.fullPrompt.length > 0) {
  console.log('‚úÖ SINGLE API SUCCESS: Using embedded fullPrompt');
  console.log('- FullPrompt length:', concept.fullPrompt.length);
  console.log('- FullPrompt preview:', concept.fullPrompt.substring(0, 100));
} else {
  console.log('‚ùå SINGLE API FALLBACK: No embedded fullPrompt found');
  console.log('- Falling back to dual API call system');
  console.log('- Concept structure:', JSON.stringify(concept, null, 2));
}
Step 2.2: Track Why Fallback Occurs
Add logging to identify fallback reasons:
typescript// ADD comprehensive fallback analysis:
console.log('üîç FALLBACK ANALYSIS:');
console.log('- Concept exists:', !!concept);
console.log('- FullPrompt field exists:', concept.hasOwnProperty('fullPrompt'));
console.log('- FullPrompt has content:', !!concept.fullPrompt);
console.log('- FullPrompt length:', concept.fullPrompt?.length || 0);
console.log('- Fallback reason:', !concept.fullPrompt ? 'NO_FULL_PROMPT' : 
           concept.fullPrompt.length === 0 ? 'EMPTY_FULL_PROMPT' : 'UNKNOWN');
TASK 3: VERIFY CONCEPT STORAGE AND RETRIEVAL
Step 3.1: Debug Concept Storage
Find where concepts are stored and add logging:
typescript// ADD to concept storage logic:
console.log('üíæ CONCEPT STORAGE DEBUG:');
console.log('- Storing concepts to database/cache');
console.log('- Number of concepts:', conceptCards.length);
conceptCards.forEach((concept, i) => {
  console.log(`  Concept ${i}: ${concept.title} - fullPrompt: ${!!concept.fullPrompt}`);
});
Step 3.2: Debug Concept Retrieval
Find concept retrieval logic and add logging:
typescript// ADD to concept retrieval:
console.log('üì§ CONCEPT RETRIEVAL DEBUG:');
console.log('- Retrieving concept:', conceptName);
console.log('- Retrieved concept:', !!retrievedConcept);
console.log('- Retrieved fullPrompt:', !!retrievedConcept?.fullPrompt);
TASK 4: TEST SINGLE API CALL FLOW
Step 4.1: End-to-End Single API Call Test
Test sequence to verify single API call working:

Create Concepts:
bashcurl -X POST "/api/maya-unified" -d '{"message": "Create business photo concepts"}'
Expected: Console shows single API call creating concepts WITH fullPrompt
Generate from Concept:
bashcurl -X POST "/api/maya/generate" -d '{"conceptName": "Tech CEO Chic", "chatId": 123}'
Expected: Console shows using embedded fullPrompt, NOT fallback to dual API call

Step 4.2: Identify Failure Points
Watch console logs for these patterns:
Success Pattern:
‚úÖ SINGLE API SUCCESS: Using embedded fullPrompt
‚úÖ CONCEPT CREATION: fullPrompt field populated  
‚úÖ CONCEPT RETRIEVAL: fullPrompt found and used
Failure Pattern:
‚ùå SINGLE API FALLBACK: No embedded fullPrompt found
‚ùå DUAL API CALL: Making second Maya API call
‚ùå CONTEXT LOSS: Different styling generated
TASK 5: FIX IDENTIFIED ISSUES
Step 5.1: Fix Type Errors (LSP Diagnostics)
Address the 4 LSP diagnostics mentioned in audit:
typescript// Fix any TypeScript errors that might prevent proper execution:
// - Missing type definitions
// - Incorrect interface usage  
// - Null/undefined handling issues
// - Property access errors
Step 5.2: Verify Emoji System Integration
Check emoji system in single API call:
typescript// Verify emoji system is included in single API call:
console.log('üé® EMOJI SYSTEM CHECK:');
console.log('- Maya personality includes emoji system:', mayaPersonality.includes('EMOJI'));
console.log('- Emoji definitions loaded:', mayaPersonality.includes('‚ú®'));

SUCCESS CRITERIA
Single API Call Working:

 Concepts created WITH fullPrompt field populated
 No fallback to dual API calls
 ConceptCard.fullPrompt contains complete styled prompts
 Image generation uses embedded prompts directly

Context Preservation Working:

 Maya's original styling preserved in fullPrompt
 No styling disconnects between concept and image
 Consistent styling across entire user journey

System Integration:

 Emoji system active in single API call responses
 Database storage working for concepts
 Context cache system functioning

COMPLETION REPORT FORMAT
SINGLE API CALL SYSTEM DEBUG COMPLETE

SYSTEM STATUS:
- Single API call executing: YES/NO
- ConceptCard.fullPrompt populated: YES/NO
- Fallback to dual API calls: NEVER/SOMETIMES/ALWAYS
- Fallback triggers: [List reasons for fallback]

DEBUGGING FINDINGS:
- Root cause of dual API calls: [Specific issue identified]
- ConceptCard storage: WORKING/BROKEN
- Concept retrieval: WORKING/BROKEN
- FullPrompt generation: WORKING/BROKEN

FIXES IMPLEMENTED:
- Type errors resolved: [List fixes]
- Logic issues fixed: [List fixes]
- Integration issues resolved: [List fixes]

TESTING RESULTS:
- End-to-end single API call: WORKING/BROKEN
- Concept consistency: ACHIEVED/STILL INCONSISTENT
- Emoji system: ACTIVE/MISSING
- Styling preservation: WORKING/BROKEN

STATUS: SINGLE API CALL SYSTEM OPERATIONAL / ISSUES IDENTIFIED
MAYA STYLING CONSISTENCY: RESOLVED / STILL PROBLEMATIC
Focus on fixing the EXISTING system rather than building new functionality.