please provide me with your complete findings

08:05
Zara
Files
Search
Terminal
[Search Results] { "summary": "UNLIMITED ACCESS: Found 100 files across entire repository (LIMIT REACHED - more files available)", "results": [ { "fileName": "api/index.js", "content": "// Production API handler for Replit deployment\nconst express = require('express');\nconst path = require('path');\n\nconst app = express();\n\nlet serverInitialized = false;\nlet initializationPromise = null;\n\n// Synchronous server initialization with proper error handling\nfunction initializeServer() {\n if (serverInitialized) {\n return Promise.resolve(app);\n }\n \n if (initializationPromise) {\n return initializationPromise;\n }\n \n initializationPromise = (async () => {\n try {\n console.log('🚀 Initializing production server...');\n \n // Import the compiled server code\n const { default: createApp } = await import('../dist/index.js');\n const initializedApp = await createApp();\n \n console.log('✅ Production server initialized successfully');\n serverInitialized = true;\n \n return initializedApp || app;\n } catch (error) {\n console.error('❌ Failed to initialize server:', error);\n // Return basic express app as fallback\n return app;\n }\n })();\n \n return initializationPromise;\n}\n\n// Middleware to ensure server is initialized before handling requests\napp.use(async (req, res, next) => {\n if (!serverInitialized) {\n try {\n await initializeServer();\n } catch (error) {\n console.error('Server initialization failed:', error);\n return res.status(500).json({ \n error: 'Server initialization failed',\n message: 'Please try again in a moment'\n });\n }\n }\n next();\n});\n\n// Initialize server immediately\ninitializeServer();\n\nmodule.exports = app;", "reason": "📝 Matches: api, 📝 Matches: and, 💻 Code: middleware, 📁 Code file" }, { "fileName": "api/package.json", "content": "{\n "dependencies": {\n "express": "^4.21.2",\n "express-session": "^1.18.1",\n "cors": "^2.8.5",\n "stripe": "^18.3.0"\n }\n}", "reason": "📝 Matches: api" }, { "fileName": "client/features/README.md", "content": "# Feature-based Organization Structure\n\nThis directory contains feature-specific components and logic organized by domain.\n\n## Directory Structure\n\n\n/features\n /chat - Chat interface components\n /builder - Studio builder components\n /settings - User settings and preferences\n\n\n## Guidelines\n\n1. Each feature directory should contain:\n - Components\n - Feature-specific hooks\n - Feature-specific utilities\n - Tests\n - Documentation\n\n2. Shared code should be moved to:\n - /shared/ui for common UI components\n - /shared/hooks for common hooks\n - /shared/utils for common utilities\n\n3. Feature Integration:\n - Use lazy loading for feature modules\n - Maintain clear boundaries between features\n - Document dependencies between features", "reason": "📝 Matches: and" }, { "fileName": "client/index.html", "content": "<!DOCTYPE html>\n<html lang="en">\n <head>\n <meta charset="UTF-8" />\n <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />\n \n <!-- Primary Meta Tags -->\n <title>SSELFIE Studio - AI Personal Branding Platform | Transform Selfies Into Business</title>\n <meta name="title" content="SSELFIE Studio - AI Personal Branding Platform | Transform Selfies Into Business" />\n <meta name="description" content="Build your personal brand with AI. Upload selfies, get professional photos, and launch your business in 20 minutes. Maya AI photographer & Victoria AI strategist included. Start free today." />\n <meta name="keywords" content="AI personal branding, AI photographer, personal brand builder, selfie to professional photos, business launch platform, AI brand strategist, professional headshots AI, personal branding tools" />\n <meta name="author" content="Sandra Sigurjónsdóttir" />\n <meta name="robots" content="index, follow" />\n <link rel="canonical" href="https://sselfie.ai" />\n \n <!-- Open Graph / Facebook -->\n <meta property="og:type" content="website" />\n <meta property="og:url" content="https://sselfie.ai" />\n <meta property="og:title" content="SSELFIE Studio - AI Personal Branding Platform" />\n <meta property="og:description" content="Build your personal brand with AI. Upload selfies, get professional photos, and launch your business in 20 minutes. Start free today." />\n <meta property="og:image" content="https://sselfie.ai/og-image.jpg" />\n <meta property="og:image:width" content="1200" />\n <meta property="og:image:height" content="630" />\n <meta property="og:site_name" content="SSELFIE Studio" />\n <meta property="og:locale" content="en_US" />\n \n <!-- Twitter -->\n <meta property="twitter:card" content="summary_large_image" />\n <meta property="twitter:url" content="https://sselfie.ai" />\n <meta property="twitter:title" content="SSELFIE Studio - AI Personal Bran", "reason": "📝 Matches: api, 📝 Matches: and, 📝 Matches: system, 💻 Code: auth" }, { "fileName": "client/src/App.tsx", "content": "import React, { useEffect, lazy, Suspense } from "react";\nimport { Switch, Route, useLocation, Redirect } from "wouter";\nimport { queryClient } from "./lib/queryClient";\nimport { QueryClientProvider } from "@tanstack/react-query";\nimport { Toaster } from "@/components/ui/toaster";\nimport { TooltipProvider } from "@/components/ui/tooltip";\nimport { useAuth } from "@/hooks/use-auth";\nimport { useQuery } from "@tanstack/react-query";\nimport { redirectToHttps, detectBrowserIssues, showDomainHelp } from "./utils/browserCompat";\n// import { pwaManager } from "./utils/pwa";\nimport NotFound from "@/pages/not-found";\nimport Landing from "@/pages/landing";\nimport EditorialLanding from "@/pages/editorial-landing";\nimport Pricing from "@/pages/pricing";\nimport Workspace from "@/pages/workspace";\nimport Onboarding from "@/pages/onboarding";\nimport About from "@/pages/about";\nimport Blog from "@/pages/blog";\nimport Contact from "@/pages/contact";\nimport FAQ from "@/pages/faq";\nimport Terms from "@/pages/terms";\nimport Privacy from "@/pages/privacy";\nimport HowItWorks from "@/pages/how-it-works";\nimport SelfieGuide from "@/pages/selfie-guide";\nimport Profile from "@/pages/profile";\nimport PaymentSuccess from "@/pages/payment-success";\nimport Checkout from "@/pages/checkout";\nimport SimpleCheckout from "@/pages/simple-checkout";\nimport ThankYou from "@/pages/thank-you";\nimport SandraPhotoshoot from "@/pages/sandra-photoshoot";\nimport SandraAI from "@/pages/sandra-ai";\nimport RachelChat from "@/pages/rachel-chat";\nimport RachelActivation from "@/pages/rachel-activation";\nimport SSELFIEGallery from "@/pages/sselfie-gallery";\nimport AIGenerator from "@/pages/ai-generator";\nimport AIPhotoshoot from "@/pages/ai-photoshoot";\nimport SimpleTraining from "@/pages/simple-training";\n\n\nimport AdminDashboard from "@/pages/admin-dashboard";\nimport AdminBusinessOverview from "@/pages/admin-business-overview";\nimport AdminConsultingAgents from "@/pages/admin-consulting-agents";\nimport AdminSubscri", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: routes, 📝 Matches: and, 📝 Matches: admin, 📝 Matches: authentication, 📝 Matches: system, 💻 Code: admin, 💻 Code: auth, 💻 Code: route, 📁 Code file" }, { "fileName": "client/src/components/AdminLayout.tsx", "content": "import { ReactNode } from 'react';\nimport { Link } from 'wouter';\n\ninterface AdminLayoutProps {\n children: ReactNode;\n title: string;\n subtitle?: string;\n}\n\nexport default function AdminLayout({ children, title, subtitle }: AdminLayoutProps) {\n const sidebarItems = [\n { \n href: '/admin', \n label: 'O V E R V I E W', \n icon: '◊',\n image: '/gallery/sandra-power-1.jpg'\n },\n { \n href: '/admin/users', \n label: 'U S E R S', \n icon: '◊',\n image: '/gallery/sandra-confidence-1.jpg'\n },\n { \n href: '/admin/content', \n label: 'C O N T E N T', \n icon: '◊',\n image: '/gallery/sandra-creative-1.jpg'\n },\n { \n href: '/admin/analytics', \n label: 'A N A L Y T I C S', \n icon: '◊',\n image: '/gallery/sandra-success-1.jpg'\n },\n { \n href: '/admin/settings', \n label: 'S E T T I N G S', \n icon: '◊',\n image: '/gallery/sandra-luxury-1.jpg'\n }\n ];\n\n return (\n <div className="min-h-screen bg-white flex">\n {/* Luxury Sidebar /}\n <div className="w-80 bg-black text-white flex flex-col">\n {/ Logo /}\n <div className="p-8 border-b border-gray-800">\n <Link href="/">\n <div \n className="text-2xl font-light tracking-[0.2em] text-center"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {'S S E L F I E'.split('').join(' ')}\n </div>\n <div \n className="text-sm font-light tracking-[0.3em] text-center mt-2 text-gray-400"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {'A D M I N S T U D I O'.split('').join(' ')}\n </div>\n </Link>\n </div>\n\n {/ Navigation Cards /}\n <div className="flex-1 p-6 space-y-4">\n {sidebarItems.map((item) => (\n <Link key={item.href} href={item.href}>\n <div className="relative bg-white rounded-lg overfl", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/AdminNavigation.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/use-auth';\n\ninterface AdminNavigationProps {\n transparent?: boolean;\n}\n\nexport function AdminNavigation({ transparent = true }: AdminNavigationProps) {\n const [, setLocation] = useLocation();\n const [location] = useLocation();\n const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n const [scrolled, setScrolled] = useState(false);\n const { user } = useAuth();\n const [isLoading, setIsLoading] = useState(false);\n\n useEffect(() => {\n const handleScroll = () => {\n const isScrolled = window.scrollY > 50;\n setScrolled(isScrolled);\n };\n\n window.addEventListener('scroll', handleScroll);\n return () => window.removeEventListener('scroll', handleScroll);\n }, []);\n\n // Ensure page starts at top\n useEffect(() => {\n window.scrollTo(0, 0);\n }, []);\n\n const isActive = (path: string) => {\n if (path === '/admin-dashboard' && location === '/admin-dashboard') return true;\n if (path !== '/admin-dashboard' && location.startsWith(path)) return true;\n return false;\n };\n \n // Determine current account from auth state\n const currentAccount = user?.email || 'ssa@ssasocial.com';\n\n const accounts = [\n { email: 'ssa@ssasocial.com', label: 'SSA Admin' },\n { email: 'shannon@soulresets.com', label: 'Shannon' }\n ];\n\n // Admin navigation items\n const navItems = [\n { path: '/workspace', label: 'Workspace' },\n { path: '/visual-editor', label: 'Visual Editor' },\n { path: '/analytics', label: 'Analytics' },\n ];\n\n const switchAccount = async (email: string) => {\n if (email === currentAccount || isLoading) return;\n \n setIsLoading(true);\n try {\n if (email === 'shannon@soulresets.com') {\n // Switch to Shannon's account\n const response = await fetch('/api/admin/impersonate-user', {\n method: 'POST',\n headers: { \n 'Content-Type': 'application/json',\n ", "reason": "🔑 Client source file, 📝 Matches: find, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 💻 Code: admin, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/AgentSystemFixed.tsx", "content": "import React from 'react';\nimport { UnifiedAgentInterface } from '@/components/admin/UnifiedAgentInterface';\n\nexport default function AgentSystemFixed() {\n return (\n <div className="min-h-screen bg-white">\n <div className="max-w-7xl mx-auto p-6">\n <div className="mb-8">\n <h1 className="text-3xl font-serif font-bold text-black mb-2">Agent System</h1>\n <p className="text-gray-600">Unified agent coordination interface</p>\n </div>\n <UnifiedAgentInterface />\n </div>\n </div>\n );\n}", "reason": "🔑 Client source file, 📝 Matches: admin, 📝 Matches: system, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/Card.tsx", "content": "import React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface CardProps {\n children: React.ReactNode;\n className?: string;\n variant?: 'default' | 'elevated' | 'outlined' | 'luxury';\n padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';\n}\n\nexport const Card: React.FC<CardProps> = ({\n children,\n className,\n variant = 'default',\n padding = 'md',\n ...props\n}) => {\n const variantClasses = {\n default: 'bg-white border border-gray-200 rounded-lg',\n elevated: 'bg-white shadow-lg rounded-lg border border-gray-100',\n outlined: 'bg-transparent border-2 border-gray-300 rounded-lg',\n luxury: 'bg-gradient-to-b from-primary-50 to-white border border-accent-gold/20 rounded-lg shadow-xl'\n };\n\n const paddingClasses = {\n none: '',\n sm: 'p-3',\n md: 'p-6',\n lg: 'p-8',\n xl: 'p-12'\n };\n\n return (\n <div\n className={cn(\n variantClasses[variant],\n paddingClasses[padding],\n 'transition-all duration-300 ease-in-out',\n className\n )}\n {...props}\n >\n {children}\n </div>\n );\n};", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/ComponentDemo.tsx", "content": "import React, { useState } from 'react';\n\ninterface ComponentDemoProps {\n title?: string;\n onAction?: () => void;\n}\n\nconst ComponentDemo: React.FC<ComponentDemoProps> = ({ \n title = 'Multi-Agent Coordination & Delegation Component',\n onAction \n}) => {\n const [isActive, setIsActive] = useState(false);\n\n const handleClick = () => {\n setIsActive(!isActive);\n onAction?.();\n };\n\n return (\n <div className="luxury-component">\n <style jsx>{\n .luxury-component {\n max-width: 800px;\n margin: 0 auto;\n padding: 3rem 2rem;\n background: #ffffff;\n font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n }\n \n .luxury-headline {\n font-family: 'Times New Roman', serif;\n font-size: 2.5rem;\n font-weight: 400;\n color: #0a0a0a;\n margin: 0 0 1.5rem 0;\n line-height: 1.1;\n letter-spacing: -0.02em;\n }\n \n .luxury-description {\n font-size: 1.125rem;\n line-height: 1.6;\n color: #666666;\n margin: 0 0 2rem 0;\n }\n \n .luxury-button {\n background: ${isActive ? '#333333' : '#0a0a0a'};\n color: #ffffff;\n border: none;\n padding: 1rem 2rem;\n font-size: 1rem;\n font-weight: 500;\n cursor: pointer;\n transition: all 0.3s ease;\n text-transform: uppercase;\n letter-spacing: 0.1em;\n }\n \n .luxury-button:hover {\n background: #333333;\n transform: translateY(-2px);\n box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n }\n \n .luxury-status {\n margin-top: 1.5rem;\n padding: 1rem;\n background: #f5f5f5;\n color: #666666;\n font-style: italic;\n }\n }</style>\n \n <h1 className="luxury-headline">{title}</h1>\n <p className="luxury-description">\n T", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: system, 📁 Code file" }, { "fileName": "client/src/components/DashboardHero.tsx", "content": "import React from 'react';\n\ninterface DashboardHeroProps {\n totalUsers: number;\n totalRevenue: number;\n premiumUsers: number;\n monthlyGrowth: number;\n}\n\nexport const DashboardHero: React.FC<DashboardHeroProps> = ({\n totalUsers,\n totalRevenue,\n premiumUsers,\n monthlyGrowth\n}) => {\n return (\n <div className="bg-white border-b border-gray-200">\n <div className="max-w-7xl mx-auto px-8 py-16">\n {/ Hero Header /}\n <div className="mb-16">\n <h1 className="text-6xl font-normal text-black mb-4" style={{ fontFamily: 'Times New Roman, serif' }}>\n SSELFIE Studio\n </h1>\n <p className="text-2xl text-gray-600 font-light leading-relaxed max-w-2xl">\n Administrative Dashboard\n </p>\n </div>\n\n {/ Metrics Grid /}\n <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">\n {/ Total Users /}\n <div className="bg-gray-50 p-8 border border-gray-200">\n <div className="mb-6">\n <h3 className="text-sm font-medium text-gray-500 uppercase tracking-widest mb-2">\n Total Users\n </h3>\n <p className="text-4xl font-light text-black" style={{ fontFamily: 'Times New Roman, serif' }}>\n {totalUsers.toLocaleString()}\n </p>\n </div>\n <div className="text-sm text-gray-600">\n Active community members\n </div>\n </div>\n\n {/ Total Revenue /}\n <div className="bg-gray-50 p-8 border border-gray-200">\n <div className="mb-6">\n <h3 className="text-sm font-medium text-gray-500 uppercase tracking-widest mb-2">\n Total Revenue\n </h3>\n <p className="text-4xl font-light text-black" style={{ fontFamily: 'Times New Roman, serif' }}>\n €{totalRevenue.toLocaleString()}\n </p>\n </div>\n <div className="text-sm text", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: admin, 📝 Matches: system, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/EditorialGrid.tsx", "content": "import React from 'react';\n\nexport const EditorialGrid: React.FC = () => {\n return (\n <section className="py-20 bg-white">\n <div className="max-w-7xl mx-auto px-4">\n <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-12">\n {/ Feature Block 1 /}\n <div className="space-y-4">\n <h3 className="font-times-new-roman text-2xl tracking-tight">Creative Vision</h3>\n <p className="text-gray-600 leading-relaxed">\n Transform your artistic concepts into compelling visual narratives.\n </p>\n </div>\n\n {/ Feature Block 2 /}\n <div className="space-y-4">\n <h3 className="font-times-new-roman text-2xl tracking-tight">Editorial Excellence</h3>\n <p className="text-gray-600 leading-relaxed">\n Curate your content with the precision of a luxury magazine editor.\n </p>\n </div>\n\n {/ Feature Block 3 /}\n <div className="space-y-4">\n <h3 className="font-times-new-roman text-2xl tracking-tight">Digital Atelier</h3>\n <p className="text-gray-600 leading-relaxed">\n Your sophisticated workspace for creating timeless digital content.\n </p>\n </div>\n </div>\n </div>\n </section>\n );\n};", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/EditorialHero.tsx", "content": "import React from 'react';\n\nexport const EditorialHero: React.FC = () => {\n return (\n <section className="relative h-screen flex items-center justify-center bg-black text-white">\n <div className="absolute inset-0 z-0">\n <div className="absolute inset-0 bg-black/60"></div>\n </div>\n \n <div className="relative z-10 max-w-5xl mx-auto px-4 text-center">\n <h1 className="font-times-new-roman text-6xl md:text-7xl lg:text-8xl tracking-tighter mb-8">\n SSELFIE Studio\n </h1>\n <p className="text-xl md:text-2xl font-light tracking-wide max-w-2xl mx-auto">\n Where creativity meets editorial sophistication\n </p>\n </div>\n </section>\n );\n};", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/ElenaTestWorking.tsx", "content": "import React from 'react';\nimport { UnifiedAgentInterface } from '@/components/admin/UnifiedAgentInterface';\n\nexport default function ElenaTestWorking() {\n return (\n <div className="min-h-screen bg-white">\n <div className="max-w-7xl mx-auto p-6">\n <div className="mb-8">\n <h1 className="text-3xl font-serif font-bold text-black mb-2">Elena Agent</h1>\n <p className="text-gray-600">Strategic workflow director interface</p>\n </div>\n <UnifiedAgentInterface />\n </div>\n </div>\n );\n}", "reason": "🔑 Client source file, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/Hero.tsx", "content": "import React from 'react';\n\nconst Hero: React.FC = () => {\n return (\n <div className="bg-white">\n <div className="max-w-7xl mx-auto px-8 py-24">\n <div className="text-center space-y-12">\n {/ Main Headline /}\n <div className="space-y-6">\n <h1 className="text-6xl md:text-7xl font-light text-black leading-tight" style={{ fontFamily: 'Times New Roman, serif' }}>\n Command Your\n <br />\n <span className="italic">Creative Vision</span>\n </h1>\n \n <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">\n The sophisticated admin interface for SSELFIE Studio.\n Monitor your platform, analyze user behavior, and orchestrate growth\n with editorial precision.\n </p>\n </div>\n\n {/ Stats Display /}\n <div className="grid grid-cols-1 md:grid-cols-3 gap-16 max-w-4xl mx-auto pt-16">\n <div className="text-center space-y-2">\n <div className="text-4xl font-light text-black" style={{ fontFamily: 'Times New Roman, serif' }}>\n 1,247\n </div>\n <div className="text-sm uppercase tracking-wider text-gray-600">\n Total Users\n </div>\n </div>\n \n <div className="text-center space-y-2">\n <div className="text-4xl font-light text-black" style={{ fontFamily: 'Times New Roman, serif' }}>\n €15,132\n </div>\n <div className="text-sm uppercase tracking-wider text-gray-600">\n Monthly Revenue\n </div>\n </div>\n \n <div className="text-center space-y-2">\n <div className="text-4xl font-light text-black" style={{ fontFamily: 'Times New Roman, serif' }}>\n 324\n </div>\n <div className="text-sm uppercase tracking-wider text-gray-", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/HeroFullBleed.tsx", "content": "interface HeroFullBleedProps {\n backgroundImage: string;\n tagline?: string;\n title: string | React.ReactNode;\n subtitle?: string;\n ctaText?: string;\n ctaLink?: string;\n overlay?: number;\n alignment?: 'left' | 'center';\n fullHeight?: boolean;\n}\n\nexport const HeroFullBleed: React.FC<HeroFullBleedProps> = ({\n backgroundImage,\n tagline,\n title,\n subtitle,\n ctaText,\n ctaLink,\n overlay = 0.4,\n alignment = 'center',\n fullHeight = true\n}) => {\n const handleCTAClick = (e: React.MouseEvent) => {\n if (ctaLink?.startsWith('#')) {\n e.preventDefault();\n const element = document.querySelector(ctaLink);\n element?.scrollIntoView({ behavior: 'smooth' });\n }\n };\n\n return (\n <section \n className={relative w-full ${fullHeight ? 'h-screen' : 'min-h-[600px]'} flex items-center overflow-hidden bg-luxury-black}\n >\n {/ Background Image /}\n <div className="absolute inset-0 z-0">\n <img \n src={backgroundImage} \n alt=""\n className="w-full h-full object-cover editorial-hover"\n />\n <div \n className="absolute inset-0 bg-black"\n style={{ opacity: overlay }}\n />\n </div>\n \n {/ Content Container /}\n <div className="relative z-10 w-full h-full flex items-center justify-center">\n <div className={max-w-6xl mx-auto px-8 ${alignment === 'center' ? 'text-center' : ''}}>\n \n {/ Top Tagline /}\n {tagline && (\n <p className="text-xs tracking-ultra-wide uppercase text-white/60 mb-8 system-font font-light">\n {tagline}\n </p>\n )}\n \n {/ Main Title - Ultra-Stretched /}\n <h1 className="hero-title text-white text-[clamp(4rem,12vw,10rem)] mb-8">\n {title}\n </h1>\n \n {/ Subtitle /}\n {subtitle && (\n <p className="text-2xl tracking-ultra-wide uppercase text-white/80 mb-12 system-font font-light">\n ", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: system, 📁 Code file" }, { "fileName": "client/src/components/LoginPrompt.tsx", "content": "import { Link } from "wouter";\n\ninterface LoginPromptProps {\n title?: string;\n message?: string;\n showFeatures?: boolean;\n}\n\nexport default function LoginPrompt({ \n title = "Access Your AI Studio",\n message = "Sign in to continue with your personalized AI photography experience",\n showFeatures = true \n}: LoginPromptProps) {\n\n const handleLogin = () => {\n window.location.href = "/login";\n };\n\n return (\n <div className="min-h-screen bg-white flex items-center justify-center px-4">\n <div className="max-w-lg w-full text-center">\n {/ SSELFIE Branding /}\n <div className="mb-12">\n <h1 className="font-serif text-4xl font-light text-black mb-4">\n SSELFIE STUDIO\n </h1>\n <h2 className="font-serif text-2xl font-light text-black mb-4">\n {title}\n </h2>\n <p className="text-gray-600 text-lg leading-relaxed">\n {message}\n </p>\n </div>\n\n {/ Login Card /}\n <div className="bg-gray-50 border border-gray-200 p-8 mb-8">\n <button\n onClick={handleLogin}\n className="w-full bg-black text-white py-4 px-8 font-medium tracking-wide uppercase text-sm hover:bg-gray-900 transition-colors mb-6"\n >\n Sign In to Continue\n </button>\n\n <p className="text-xs text-gray-500 leading-relaxed">\n Secure sign-in • Your personal AI models and data are protected\n </p>\n </div>\n\n {showFeatures && (\n <div className="space-y-3 text-sm text-gray-700">\n <div className="font-medium text-black">Your AI Studio includes:</div>\n <div>Personal FLUX model training with your selfies</div>\n <div>Maya AI photographer for editorial image generation</div>\n <div>Victoria AI strategist for business development</div>\n <div>Professional landing page templates</div>\n <div>Unlimited creative possibilities</div>\n ", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/LuxuryChatInterface.tsx", "content": "import React, { useState } from 'react';\n\ninterface Message {\n id: string;\n type: 'user' | 'agent';\n content: string;\n timestamp: Date;\n agentName?: string;\n}\n\ninterface LuxuryChatInterfaceProps {\n agentName: string;\n agentRole: string;\n status: 'active' | 'working' | 'thinking' | 'offline';\n onSendMessage?: (message: string) => void;\n messages?: Message[];\n}\n\nconst LuxuryChatInterface: React.FC<LuxuryChatInterfaceProps> = ({\n agentName,\n agentRole,\n status,\n onSendMessage,\n messages = []\n}) => {\n const [inputValue, setInputValue] = useState('');\n\n const handleSubmit = (e: React.FormEvent) => {\n e.preventDefault();\n if (inputValue.trim() && onSendMessage) {\n onSendMessage(inputValue.trim());\n setInputValue('');\n }\n };\n\n const statusColors = {\n active: 'text-green-600',\n working: 'text-blue-600',\n thinking: 'text-yellow-600',\n offline: 'text-gray-400'\n };\n\n const statusDots = {\n active: 'bg-green-500',\n working: 'bg-blue-500 animate-pulse',\n thinking: 'bg-yellow-500 animate-pulse',\n offline: 'bg-gray-400'\n };\n\n return (\n <div className="h-full flex flex-col bg-white border border-gray-200">\n \n {/ Chat Header /}\n <header className="border-b border-gray-200 p-6">\n <div className="flex items-center justify-between">\n <div>\n <h2 className="text-xl font-serif text-black">{agentName}</h2>\n <p className="text-sm text-gray-600 mt-1">{agentRole}</p>\n </div>\n <div className="flex items-center space-x-2">\n <div className={w-2 h-2 rounded-full ${statusDots[status]}} />\n <span className={text-xs uppercase tracking-wide ${statusColors[status]}}>\n {status}\n </span>\n </div>\n </div>\n </header>\n\n {/ Messages Area /}\n <div className="flex-1 overflow-y-auto p-6 space-y-6">\n {messages.length === 0 ? (\n <div className="text-center py-12">\n <", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/LuxuryHero.tsx", "content": "import React from 'react';\n\ninterface LuxuryHeroProps {\n headline: string;\n subheadline: string;\n ctaText: string;\n backgroundImage?: string;\n onCtaClick: () => void;\n}\n\nexport const LuxuryHero: React.FC<LuxuryHeroProps> = ({\n headline,\n subheadline,\n ctaText,\n backgroundImage,\n onCtaClick\n}) => {\n return (\n <section className="luxury-hero">\n <div className="hero-container">\n <div className="hero-content">\n <h1 className="hero-headline">\n {headline}\n </h1>\n <p className="hero-subheadline">\n {subheadline}\n </p>\n <button \n className="hero-cta"\n onClick={onCtaClick}\n aria-label={ctaText}\n >\n {ctaText}\n </button>\n </div>\n {backgroundImage && (\n <div className="hero-image">\n <img \n src={backgroundImage} \n alt="SSELFIE luxury branding"\n loading="eager"\n />\n </div>\n )}\n </div>\n\n <style jsx>{\n .luxury-hero {\n position: relative;\n min-height: 100vh;\n display: flex;\n align-items: center;\n background: #ffffff;\n overflow: hidden;\n }\n\n .hero-container {\n max-width: 1400px;\n margin: 0 auto;\n padding: 0 2rem;\n display: grid;\n grid-template-columns: 1fr 1fr;\n gap: 4rem;\n align-items: center;\n width: 100%;\n }\n\n .hero-content {\n z-index: 2;\n }\n\n .hero-headline {\n font-family: 'Times New Roman', serif;\n font-size: clamp(3rem, 6vw, 5rem);\n font-weight: 400;\n line-height: 1.1;\n color: #0a0a0a;\n margin: 0 0 1.5rem 0;\n letter-spacing: -0.02em;\n }\n\n .hero-subheadline {\n font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n fo", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: system, 📁 Code file" }, { "fileName": "client/src/components/MayaTestWorking.tsx", "content": "", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/MoodboardSection.tsx", "content": "interface MoodboardSectionProps {\n title: string;\n images: string[];\n backgroundColor?: string;\n padding?: string;\n}\n\nexport const MoodboardSection: React.FC<MoodboardSectionProps> = ({\n title,\n images\n}) => {\n return (\n <div className=\"text-center\">\n <h4 className=\"font-serif text-lg mb-6 tracking-wide\">{title}</h4>\n <div className=\"grid grid-cols-1 gap-4\">\n {images.map((image, index) => (\n <div key={index} className=\"aspect-[4/5] overflow-hidden\">\n <img \n src={image} \n alt={${title} ${index + 1}}\n className=\"w-full h-full object-cover\"\n />\n </div>\n ))}\n </div>\n </div>\n );\n};\n", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/NewComponent.tsx", "content": "", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/PreviewFix.tsx", "content": "import React from 'react';\n\nexport default function PreviewFix() {\n return (\n <div className=\"min-h-screen bg-white p-8\">\n <div className=\"max-w-4xl mx-auto\">\n <h1 className=\"text-4xl font-bold text-black mb-8\" style={{ fontFamily: 'Times New Roman, serif' }}>\n IFRAME PREVIEW WORKING\n </h1>\n \n <div className=\"bg-gray-50 border border-gray-200 p-8 mb-8\">\n <h2 className=\"text-2xl font-semibold mb-4\">Status: OPERATIONAL</h2>\n <div className=\"space-y-3\">\n <div className=\"flex justify-between\">\n <span>Iframe Loading:</span>\n <span className=\"text-green-600 font-semibold\">✓ SUCCESS</span>\n </div>\n <div className=\"flex justify-between\">\n <span>Cross-Origin Issues:</span>\n <span className=\"text-green-600 font-semibold\">✓ RESOLVED</span>\n </div>\n <div className=\"flex justify-between\">\n <span>Agent File Creation:</span>\n <span className=\"text-green-600 font-semibold\">✓ WORKING</span>\n </div>\n <div className=\"flex justify-between\">\n <span>Development Preview:</span>\n <span className=\"text-green-600 font-semibold\">✓ ACTIVE</span>\n </div>\n </div>\n </div>\n\n <div className=\"bg-blue-50 border border-blue-200 p-6\">\n <h3 className=\"text-lg font-semibold mb-2\">Solution Applied</h3>\n <p className=\"text-gray-700\">\n Updated iframe source from protected routes to public /about route. \n This resolves the 403 Forbidden errors while maintaining live preview functionality.\n </p>\n </div>\n </div>\n </div>\n );\n}", "reason": "🔑 Client source file, 📝 Matches: routes, 💻 Code: route, 📁 Code file" }, { "fileName": "client/src/components/QuickAccessPanel.tsx", "content": "import React from 'react';\n\nexport default function QuickAccessPanel() {\n return (\n <div className=\"fixed bottom-6 right-6 z-50\">\n <div className=\"bg-white border-2 border-black shadow-lg p-4 min-w-[200px]\">\n <h3 className=\"text-sm font-medium mb-3 text-center uppercase tracking-wide\" \n style={{ fontFamily: 'Times New Roman, serif' }}>\n Quick Access\n </h3>\n <div className=\"space-y-2\">\n <button\n onClick={() => window.open('/', '_blank')}\n className=\"w-full px-4 py-2 bg-gray-100 text-black border border-gray-300 hover:bg-gray-200 transition-colors text-sm\"\n >\n 🚀 Open Full Preview\n </button>\n <button\n onClick={() => window.location.href = '/visual-editor'}\n className=\"w-full px-4 py-2 bg-black text-white border border-black hover:bg-gray-800 transition-colors text-sm\"\n >\n 🎨 Visual Editor\n </button>\n <div className=\"text-xs text-gray-500 text-center mt-2\">\n Preview has \"Open Full Preview\" button\n </div>\n </div>\n </div>\n </div>\n );\n}", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/RollbackButton.tsx", "content": "import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface RollbackButtonProps {\n filePath: string;\n className?: string;\n}\n\nexport function RollbackButton({ filePath, className }: RollbackButtonProps) {\n const [isRollingBack, setIsRollingBack] = useState(false);\n const { toast } = useToast();\n\n const handleRollback = async () => {\n if (!confirm(Are you sure you want to rollback ${filePath}? This will restore the previous version.)) {\n return;\n }\n\n setIsRollingBack(true);\n try {\n const response = await apiRequest('POST', '/api/admin/rollback-file', {\n filePath,\n adminToken: 'sandra-admin-2025'\n });\n\n if (response.ok) {\n toast({\n title: \"File Rolled Back\",\n description: ${filePath} has been restored to its previous version.,\n });\n \n // Trigger page reload to show changes\n setTimeout(() => {\n window.location.reload();\n }, 1000);\n } else {\n throw new Error('Rollback failed');\n }\n } catch (error) {\n toast({\n title: \"Rollback Failed\",\n description: \"Could not rollback the file. Please try again.\",\n variant: \"destructive\",\n });\n } finally {\n setIsRollingBack(false);\n }\n };\n\n return (\n <Button\n onClick={handleRollback}\n disabled={isRollingBack}\n variant=\"outline\"\n size=\"sm\"\n className={border-red-200 text-red-600 hover:bg-red-50 ${className}}\n >\n {isRollingBack ? 'Rolling back...' : 'Rollback'}\n </Button>\n );\n}", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/SandraNavigation.tsx", "content": "import React from 'react';\nimport { Link, useLocation } from 'wouter';\n\nexport default function SandraNavigation() {\n const [location] = useLocation();\n\n const navItems = [\n { path: '/sandra-ai', label: 'Personal Brand Mentor', description: 'Strategic guidance & coaching' },\n { path: '/sandra-photoshoot', label: 'AI Photographer', description: 'Authentic story photography' },\n { path: '/workspace', label: 'Studio Workspace', description: 'Complete business platform' }\n ];\n\n return (\n <nav className=\"bg-white border-b border-[#e0e0e0]\">\n <div className=\"max-w-6xl mx-auto px-8 py-6\">\n {/* Brand Header */}\n <div className=\"text-center mb-8\">\n <Link href=\"/workspace\">\n <h1 className=\"font-times text-[clamp(2rem,4vw,3rem)] leading-none font-extralight tracking-[0.2em] uppercase text-black cursor-pointer hover:opacity-70 transition-opacity\">\n SSELFIE STUDIO\n </h1>\n </Link>\n <p className=\"text-xs font-light tracking-[0.4em] uppercase text-gray-600 mt-2\">\n AI-Powered Personal Branding Platform\n </p>\n </div>\n\n {/* Navigation Menu */}\n <div className=\"grid grid-cols-1 md:grid-cols-3 gap-1 max-w-4xl mx-auto\">\n {navItems.map((item) => {\n const isActive = location === item.path;\n \n return (\n <Link key={item.path} href={item.path}>\n <div className={p-6 border border-[#e0e0e0] text-center cursor-pointer transition-all duration-200 ${\n isActive \n ? 'bg-black text-white' \n : 'bg-white text-black hover:bg-[#f5f5f5]'\n }}>\n <div className=\"font-times text-lg font-extralight tracking-[0.1em] uppercase mb-2\">\n {item.label}\n </div>\n <div className={text-xs font-light tracking-[0.05em] uppercase ${\n isActive ? 'text-white/70' ", "reason": "🔑 Client source file, 📝 Matches: and, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/SecureIframe.tsx", "content": "// components/shared/SecureIframe.tsx - Luxury iframe wrapper\nimport React from 'react';\n\ninterface SecureIframeProps {\n src: string;\n title: string;\n className?: string;\n height?: string;\n}\n\nexport default function SecureIframe({ \n src, \n title, \n className = "w-full h-96 border-0", \n height = "400px" \n}: SecureIframeProps) {\n return (\n <iframe\n src={src}\n title={title}\n className={className}\n style={{ height }}\n sandbox="allow-scripts allow-same-origin allow-forms allow-popups"\n loading="lazy"\n referrerPolicy="strict-origin-when-cross-origin"\n />\n );\n}", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/SystemVerificationComplete.tsx", "content": "import React from 'react';\nimport { CheckCircle, AlertCircle, Users, Settings, Server } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\n\nexport default function SystemVerificationComplete() {\n const systemStatus = [\n { component: 'Authentication System', status: 'operational', description: 'Unified login system active' },\n { component: 'Agent API Routes', status: 'operational', description: 'Consolidated endpoints running' },\n { component: 'Admin Interface', status: 'operational', description: 'Single dashboard active' },\n { component: 'Agent Coordination', status: 'operational', description: 'Unified communication layer' }\n ];\n\n return (\n <div className="min-h-screen bg-white">\n <div className="max-w-7xl mx-auto p-6">\n <div className="mb-8">\n <div className="flex items-center gap-3 mb-4">\n <CheckCircle className="w-8 h-8 text-green-600" />\n <h1 className="text-3xl font-serif font-bold text-black">System Verification Complete</h1>\n </div>\n <p className="text-gray-600">Agent system consolidation successfully implemented</p>\n </div>\n\n <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4 mb-8">\n {systemStatus.map((item, index) => (\n <Card key={index}>\n <CardHeader className="pb-3">\n <div className="flex items-center justify-between">\n <CardTitle className="text-sm font-medium">{item.component}</CardTitle>\n <Badge variant="default" className="bg-green-100 text-green-800">\n {item.status}\n </Badge>\n </div>\n </CardHeader>\n <CardContent>\n <p className="text-sm text-gray-600">{item.description}</p>\n </CardContent>\n </Card>\n ))}\n </div>\n\n <Card>\n <CardHead", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: routes, 📝 Matches: admin, 📝 Matches: authentication, 📝 Matches: system, 💻 Code: admin, 💻 Code: auth, 💻 Code: route, 📁 Code file" }, { "fileName": "client/src/components/TestClaudeAccess.tsx", "content": "import React from 'react';\n\ninterface TestClaudeAccessProps {\n className?: string;\n}\n\nconst TestClaudeAccess: React.FC<TestClaudeAccessProps> = ({ className = '' }) => {\n return (\n <div className={luxury-test-container ${className}}>\n {/ Hero Section /}\n <section className="luxury-hero">\n <h1 className="luxury-headline">\n Claude Access\n </h1>\n <p className="luxury-subtitle">\n Editorial Luxury Design System\n </p>\n </section>\n\n {/ Content Grid /}\n <section className="luxury-grid">\n <div className="luxury-card">\n <h2 className="luxury-card-title">\n Component Architecture\n </h2>\n <p className="luxury-body-text">\n Sophisticated TypeScript implementation with complete type safety and editorial design principles.\n </p>\n </div>\n\n <div className="luxury-card">\n <h2 className="luxury-card-title">\n Typography Excellence\n </h2>\n <p className="luxury-body-text">\n Times New Roman typography hierarchy creating visual sophistication and readability perfection.\n </p>\n </div>\n\n <div className="luxury-card">\n <h2 className="luxury-card-title">\n Color Sophistication\n </h2>\n <p className="luxury-body-text">\n Curated palette of black, white, and editorial gray creating timeless luxury aesthetics.\n </p>\n </div>\n </section>\n\n {/ Status Section /}\n <section className="luxury-status">\n <div className="status-indicator">\n <div className="status-dot"></div>\n <span className="status-text">System Operational</span>\n </div>\n <p className="luxury-caption">\n Claude AI integration successfully established with full workspace access\n </p>\n </section>\n\n <style jsx>{\n .luxury-test-container {\n min-height: 100vh;\n", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: system, 📁 Code file" }, { "fileName": "client/src/components/TestComponent.tsx", "content": "import React, { useState } from 'react';\n\ninterface TestComponentProps {\n title?: string;\n onAction?: () => void;\n}\n\nconst TestComponent: React.FC<TestComponentProps> = ({ \n title = 'Multi-Agent Coordination & Delegation Component',\n onAction \n}) => {\n const [isActive, setIsActive] = useState(false);\n\n const handleClick = () => {\n setIsActive(!isActive);\n onAction?.();\n };\n\n return (\n <div className=\"luxury-component\">\n <style jsx>{\n .luxury-component {\n max-width: 800px;\n margin: 0 auto;\n padding: 3rem 2rem;\n background: #ffffff;\n font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n }\n \n .luxury-headline {\n font-family: 'Times New Roman', serif;\n font-size: 2.5rem;\n font-weight: 400;\n color: #0a0a0a;\n margin: 0 0 1.5rem 0;\n line-height: 1.1;\n letter-spacing: -0.02em;\n }\n \n .luxury-description {\n font-size: 1.125rem;\n line-height: 1.6;\n color: #666666;\n margin: 0 0 2rem 0;\n }\n \n .luxury-button {\n background: ${isActive ? '#333333' : '#0a0a0a'};\n color: #ffffff;\n border: none;\n padding: 1rem 2rem;\n font-size: 1rem;\n font-weight: 500;\n cursor: pointer;\n transition: all 0.3s ease;\n text-transform: uppercase;\n letter-spacing: 0.1em;\n }\n \n .luxury-button:hover {\n background: #333333;\n transform: translateY(-2px);\n box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n }\n \n .luxury-status {\n margin-top: 1.5rem;\n padding: 1rem;\n background: #f5f5f5;\n color: #666666;\n font-style: italic;\n }\n }</style>\n \n <h1 className=\"luxury-headline\">{title}</h1>\n <p className=\"luxury-description\">\n T", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: system, 📁 Code file" }, { "fileName": "client/src/components/TestImplementation.tsx", "content": "import React from 'react';\n\ninterface TestImplementationProps {\n title?: string;\n message?: string;\n}\n\nconst TestImplementation: React.FC<TestImplementationProps> = ({ \n title = \"Test Implementation\", \n message = \"This is a simple test component created by Zara\" \n}) => {\n return (\n <div className=\"p-6 max-w-md mx-auto bg-white rounded-xl shadow-lg space-y-4\">\n <div className=\"text-center\">\n <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n {title}\n </h2>\n <p className=\"text-gray-600\">\n {message}\n </p>\n </div>\n \n <div className=\"border-t pt-4\">\n <div className=\"flex items-center justify-center space-x-2\">\n <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n <span className=\"text-sm text-gray-500\">Component Active</span>\n </div>\n </div>\n \n <div className=\"text-xs text-gray-400 text-center\">\n Created: {new Date().toLocaleDateString()}\n </div>\n </div>\n );\n};\n\nexport default TestImplementation;", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/UnifiedLoginButton.tsx", "content": "import React, { useState } from 'react';\n\ninterface UnifiedLoginButtonProps {\n text?: string;\n subtitle?: string;\n className?: string;\n showBrand?: boolean;\n}\n\nexport default function UnifiedLoginButton({ \n text = \"Sign in to continue\",\n subtitle = \"Access your AI photography studio\",\n className = \"\",\n showBrand = true \n}: UnifiedLoginButtonProps) {\n const [isLoading, setIsLoading] = useState(false);\n\n const handleLogin = () => {\n setIsLoading(true);\n window.location.href = \"/api/login\";\n };\n\n return (\n <div className={text-center ${className}}>\n {showBrand && (\n <div className=\"mb-6\">\n <h2 className=\"font-serif text-2xl font-light text-black mb-2\">\n SSELFIE STUDIO\n </h2>\n <p className=\"text-gray-600 text-sm\">\n {subtitle}\n </p>\n </div>\n )}\n\n <button\n onClick={handleLogin}\n disabled={isLoading}\n className=\"bg-black text-white px-8 py-3 text-sm tracking-wider uppercase hover:bg-gray-800 transition-colors disabled:opacity-50\"\n >\n {isLoading ? 'Connecting...' : text}\n </button>\n \n <div className=\"text-sm text-gray-500 mt-4\">\n Secure authentication powered by Replit\n </div>\n </div>\n );\n}", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: and, 📝 Matches: authentication, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/UsageTracker.tsx", "content": "import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\n\ninterface UsageStatus {\n canGenerate: boolean;\n remainingGenerations: number;\n totalUsed: number;\n totalAllowed: number;\n monthlyUsed?: number;\n monthlyAllowed?: number;\n resetDate?: string;\n reason?: string;\n}\n\ninterface UsageStats {\n plan: string;\n planLimits: {\n totalGenerations: number | null;\n monthlyGenerations: number | null;\n cost: number;\n description: string;\n resetMonthly: boolean;\n };\n usage: UsageStatus;\n totalCostIncurred: number;\n lastGenerationAt: string | null;\n}\n\nexport default function UsageTracker() {\n const [isExpanded, setIsExpanded] = useState(false);\n\n const { data: usageStatus } = useQuery<UsageStatus>({\n queryKey: [\"/api/usage/status\"],\n refetchInterval: 30000, // Refresh every 30 seconds\n });\n\n const { data: usageStats } = useQuery<UsageStats>({\n queryKey: [\"/api/usage/stats\"],\n refetchInterval: 60000, // Refresh every minute\n });\n\n if (!usageStatus) {\n return null;\n }\n\n const getStatusColor = () => {\n // Admin users always show green\n if (usageStatus.remainingGenerations >= 999999) return \"text-emerald-600\";\n if (!usageStatus.canGenerate) return \"text-red-500\";\n if (usageStatus.remainingGenerations <= 10) return \"text-yellow-600\";\n return \"text-emerald-600\";\n };\n\n const getProgressPercentage = () => {\n if (usageStatus.monthlyAllowed) {\n // Monthly subscription\n return Math.min((usageStatus.monthlyUsed || 0) / usageStatus.monthlyAllowed * 100, 100);\n } else {\n // One-time AI Pack\n return Math.min(usageStatus.totalUsed / usageStatus.totalAllowed * 100, 100);\n }\n };\n\n const formatResetDate = (dateString: string) => {\n const date = new Date(dateString);\n const now = new Date();\n const diffDays = Math.ceil((date.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n \n if (diffDays <= 0) return \"Resets today\";\n if (diffDays === 1) retu", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/VictoriaChat.tsx", "content": "import React, { useState, useEffect, useRef } from 'react';\nimport { Send, Mic, MicOff, Sparkles } from 'lucide-react';\n\ninterface Message {\n id: string;\n content: string;\n sender: 'user' | 'victoria';\n timestamp: Date;\n typing?: boolean;\n}\n\nexport default function VictoriaChat() {\n const [messages, setMessages] = useState<Message[]>([]);\n const [inputMessage, setInputMessage] = useState('');\n const [isTyping, setIsTyping] = useState(false);\n const [isListening, setIsListening] = useState(false);\n const messagesEndRef = useRef<HTMLDivElement>(null);\n\n const scrollToBottom = () => {\n messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n };\n\n useEffect(() => {\n scrollToBottom();\n }, [messages]);\n\n // Initialize with Sandra's authentic welcome\n useEffect(() => {\n const welcomeMessage: Message = {\n id: 'welcome',\n content: \"Hey gorgeous! I'm Victoria, Sandra's AI voice twin. I literally sound EXACTLY like her - same energy, same realness, same 'your mess is your message' vibe. What are you working on today? Let's build something that actually works. 💫\",\n sender: 'victoria',\n timestamp: new Date()\n };\n setMessages([welcomeMessage]);\n }, []);\n\n const sendMessage = async () => {\n if (!inputMessage.trim()) return;\n\n const userMessage: Message = {\n id: Date.now().toString(),\n content: inputMessage,\n sender: 'user',\n timestamp: new Date()\n };\n\n setMessages(prev => [...prev, userMessage]);\n setInputMessage('');\n setIsTyping(true);\n\n // Simulate typing delay for authenticity\n setTimeout(async () => {\n const response = await getVictoriaResponse(inputMessage);\n const victoriaMessage: Message = {\n id: (Date.now() + 1).toString(),\n content: response,\n sender: 'victoria',\n timestamp: new Date()\n };\n \n setMessages(prev => [...prev, victoriaMessage]);\n setIsTyping(false);\n }, 1500);\n };\n\n const getVictoriaResponse =", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: system, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/VictoriaTestWorking.tsx", "content": "import React from 'react';\nimport { UnifiedAgentInterface } from '@/components/admin/UnifiedAgentInterface';\n\nexport default function VictoriaTestWorking() {\n return (\n <div className=\"min-h-screen bg-white\">\n <div className=\"max-w-7xl mx-auto p-6\">\n <div className=\"mb-8\">\n <h1 className=\"text-3xl font-serif font-bold text-black mb-2\">Victoria Agent</h1>\n <p className=\"text-gray-600\">Website builder interface</p>\n </div>\n <UnifiedAgentInterface />\n </div>\n </div>\n );\n}", "reason": "🔑 Client source file, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/Workspace.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { cn } from '@/lib/utils';\nimport { AiImage } from '@shared/schema';\n\nexport default function Workspace() {\n const { user, isAuthenticated } = useAuth();\n const [activeStep, setActiveStep] = useState<number | null>(null);\n\n const { data: aiImages = [], isLoading } = useQuery({\n queryKey: ['/api/ai-images'],\n enabled: isAuthenticated,\n });\n\n const { data: subscriptionData } = useQuery({\n queryKey: ['/api/subscription/status'],\n enabled: isAuthenticated,\n });\n\n const isPremium = (subscriptionData as any)?.subscription?.status === 'active';\n\n const getJourneySteps = () => {\n const hasImages = (aiImages as any).length > 0;\n \n return [\n {\n number: 1,\n title: 'TRAIN Your AI Model',\n subtitle: 'Just you, your phone, and 15 minutes',\n description: 'Hey gorgeous! I remember feeling so awkward taking selfies at first. But here\\'s what I learned: your phone already knows how to make you look incredible. Trust me on this one.',\n status: hasImages ? 'completed' : 'current',\n action: hasImages ? 'View Your Training' : 'Let\\'s Do This',\n path: '/ai-training',\n sandraNote: 'I was shaking when I took my first selfies. Now look where we are.'\n },\n {\n number: 2,\n title: 'STYLE Your Vision',\n subtitle: 'Maya knows exactly what works',\n description: 'This is where the magic happens, babe. Maya\\'s going to help you figure out your visual story. No more guessing what \"on brand\" means - she\\'ll show you.',\n status: hasImages ? 'current' : 'upcoming',\n action: 'Chat with Maya',\n path: '/maya',\n sandraNote: 'Maya gets it. She\\'ll help yo", "reason": "🔑 Client source file, 📝 Matches: find, 📝 Matches: api, 📝 Matches: and, 📝 Matches: system, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/ZaraToolAccessTest.tsx", "content": "import React, { useState } from 'react';\n\ninterface ZaraToolAccessTestProps {\n title?: string;\n onAction?: () => void;\n}\n\nconst ZaraToolAccessTest: React.FC<ZaraToolAccessTestProps> = ({ \n title = 'Backend Architecture & Database Management Component',\n onAction \n}) => {\n const [isActive, setIsActive] = useState(false);\n\n const handleClick = () => {\n setIsActive(!isActive);\n onAction?.();\n };\n\n return (\n <div className=\"luxury-component\">\n <style jsx>{\n .luxury-component {\n max-width: 800px;\n margin: 0 auto;\n padding: 3rem 2rem;\n background: #ffffff;\n font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n }\n \n .luxury-headline {\n font-family: 'Times New Roman', serif;\n font-size: 2.5rem;\n font-weight: 400;\n color: #0a0a0a;\n margin: 0 0 1.5rem 0;\n line-height: 1.1;\n letter-spacing: -0.02em;\n }\n \n .luxury-description {\n font-size: 1.125rem;\n line-height: 1.6;\n color: #666666;\n margin: 0 0 2rem 0;\n }\n \n .luxury-button {\n background: ${isActive ? '#333333' : '#0a0a0a'};\n color: #ffffff;\n border: none;\n padding: 1rem 2rem;\n font-size: 1rem;\n font-weight: 500;\n cursor: pointer;\n transition: all 0.3s ease;\n text-transform: uppercase;\n letter-spacing: 0.1em;\n }\n \n .luxury-button:hover {\n background: #333333;\n transform: translateY(-2px);\n box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n }\n \n .luxury-status {\n margin-top: 1.5rem;\n padding: 1rem;\n background: #f5f5f5;\n color: #666666;\n font-style: italic;\n }\n }</style>\n \n <h1 className=\"luxury-headline\">{title}</h1>\n <p className=\"luxury-des", "reason": "🔑 Client source file, 📝 Matches: backend, 📝 Matches: and, 📝 Matches: system, 📁 Code file" }, { "fileName": "client/src/components/admin/ActivityFeed.tsx", "content": "interface ActivityItem {\n id: string;\n type: string;\n title: string;\n timestamp: string;\n user?: string;\n avatar?: string;\n}\n\ninterface ActivityFeedProps {\n activities: ActivityItem[];\n}\n\nexport default function ActivityFeed({ activities }: ActivityFeedProps) {\n return (\n <div className=\"bg-white\">\n <h2 \n className=\"text-3xl font-light tracking-[0.3em] uppercase text-center mb-12 text-black\"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {'R E C E N T A C T I V I T Y'.split('').join(' ')}\n </h2>\n \n <div className=\"space-y-6\">\n {activities.map((activity) => (\n <div key={activity.id} className=\"flex items-center justify-between border-b border-gray-100 pb-6 hover:bg-gray-50 transition-colors duration-200 px-4 py-2 rounded-lg\">\n <div className=\"flex items-center space-x-6\">\n <div \n className=\"w-16 h-16 bg-gray-200 rounded-full bg-cover bg-center\"\n style={{\n backgroundImage: activity.avatar ? url('${activity.avatar}') : 'none',\n backgroundPosition: '50% 30%'\n }}\n />\n <div>\n <h4 \n className=\"text-lg font-light text-black mb-1\"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {activity.title}\n </h4>\n <p className=\"text-gray-600 text-sm\">\n {activity.timestamp}\n </p>\n {activity.user && (\n <p className=\"text-gray-500 text-xs tracking-[0.1em] uppercase\">\n {activity.user}\n </p>\n )}\n </div>\n </div>\n <button className=\"text-sm text-gray-500 tracking-[0.1em] uppercase hover:text-black transition-colors\">\n {'V I E W D E T A I L S'.split('').join(' ')}\n </button>\n </div>\n ", "reason": "🔑 Client source file, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/AdminAgentMetrics.tsx", "content": "import React, { useState } from 'react';\n\ninterface AdminAgentMetricsProps {\n title?: string;\n onAction?: () => void;\n}\n\nconst AdminAgentMetrics: React.FC<AdminAgentMetricsProps> = ({ \n title = 'Backend Architecture & Database Management Component',\n onAction \n}) => {\n const [isActive, setIsActive] = useState(false);\n\n const handleClick = () => {\n setIsActive(!isActive);\n onAction?.();\n };\n\n return (\n <div className=\"luxury-component\">\n <style jsx>{\n .luxury-component {\n max-width: 800px;\n margin: 0 auto;\n padding: 3rem 2rem;\n background: #ffffff;\n font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n }\n \n .luxury-headline {\n font-family: 'Times New Roman', serif;\n font-size: 2.5rem;\n font-weight: 400;\n color: #0a0a0a;\n margin: 0 0 1.5rem 0;\n line-height: 1.1;\n letter-spacing: -0.02em;\n }\n \n .luxury-description {\n font-size: 1.125rem;\n line-height: 1.6;\n color: #666666;\n margin: 0 0 2rem 0;\n }\n \n .luxury-button {\n background: ${isActive ? '#333333' : '#0a0a0a'};\n color: #ffffff;\n border: none;\n padding: 1rem 2rem;\n font-size: 1rem;\n font-weight: 500;\n cursor: pointer;\n transition: all 0.3s ease;\n text-transform: uppercase;\n letter-spacing: 0.1em;\n }\n \n .luxury-button:hover {\n background: #333333;\n transform: translateY(-2px);\n box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n }\n \n .luxury-status {\n margin-top: 1.5rem;\n padding: 1rem;\n background: #f5f5f5;\n color: #666666;\n font-style: italic;\n }\n }</style>\n \n <h1 className=\"luxury-headline\">{title}</h1>\n <p className=\"luxury-descri", "reason": "🔑 Client source file, 📝 Matches: backend, 📝 Matches: and, 📝 Matches: admin, 📝 Matches: system, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/AdminHero.tsx", "content": "import React from 'react';\n\nexport default function AdminHero() {\n return (\n <div className=\"relative h-screen w-full overflow-hidden\">\n {/* Full Bleed Background Image */}\n <div \n className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n style={{\n backgroundImage: linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.6)), url('/gallery/sandra-portrait-editorial.jpg')\n }}\n />\n \n {/* Hero Content */}\n <div className=\"relative z-10 flex items-center justify-center h-full\">\n <div className=\"text-center text-white max-w-4xl mx-auto px-6\">\n <h1 \n className=\"text-6xl md:text-8xl font-light uppercase tracking-wide mb-6\"\n style={{ \n fontFamily: 'Times New Roman',\n fontWeight: 200,\n letterSpacing: '-0.01em'\n }}\n >\n SANDRA'S DASHBOARD\n </h1>\n \n <p \n className=\"text-xl md:text-2xl font-light max-w-2xl mx-auto leading-relaxed\"\n style={{ \n fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif',\n fontWeight: 300\n }}\n >\n From rock bottom to empire builder—command center for your transformation journey\n </p>\n \n {/* Editorial Quote */}\n <blockquote \n className=\"mt-12 text-2xl md:text-4xl italic text-white/90\"\n style={{ \n fontFamily: 'Times New Roman',\n letterSpacing: '-0.02em'\n }}\n >\n \"Every empire started with a single brave step forward.\"\n </blockquote>\n </div>\n </div>\n \n {/* Bottom Gradient Overlay */}\n <div className=\"absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-black/60 to-transparent\" />\n </div>\n );\n}", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: admin, 📝 Matches: system, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/AdminHeroRedesigned.tsx", "content": "import React from 'react';\n\nexport default function AdminHeroRedesigned() {\n return (\n <div className=\"relative w-full h-screen overflow-hidden bg-black\">\n {/* Full-bleed background with editorial gradient */}\n <div className=\"absolute inset-0 bg-gradient-to-br from-black via-gray-900 to-black\"></div>\n \n {/* Editorial overlay pattern */}\n <div className=\"absolute inset-0 opacity-10\">\n <div className=\"w-full h-full bg-repeat\" style={{\n backgroundImage: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Cpath d='M30 30c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2zm-10 0c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2zm20 0c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")\n }}></div>\n </div>\n \n {/* Content container with editorial spacing */}\n <div className=\"relative z-10 flex flex-col justify-center items-center h-full px-8 text-center\">\n {/* Main headline - Times New Roman editorial style */}\n <h1 \n className=\"text-6xl md:text-8xl font-light text-white uppercase tracking-wide mb-8 leading-tight\"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n Sandra's\n <br />\n Command Center\n </h1>\n \n {/* Editorial subheadline */}\n <p \n className=\"text-xl md:text-2xl text-white font-light italic mb-12 max-w-2xl leading-relaxed\"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n Where empires are built, one authentic story at a time\n </p>\n \n {/* Luxury stats grid */}\n <div className=\"grid grid-cols-1 md:grid-cols-3 gap-12 mb-16\">\n <div className=\"text-center\">\n <div \n className=\"text-4xl md:text-5xl font-light text-white mb-2\"\n style={{ fontFa", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: admin, 💻 Code: admin, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/admin/AdminHeroSection.tsx", "content": "import React from 'react';\n\ninterface AdminHeroSectionProps {\n title?: string;\n subtitle?: string;\n description?: string;\n backgroundImage?: string;\n}\n\nexport const AdminHeroSection: React.FC<AdminHeroSectionProps> = ({\n title = \"SSELFIE Studio Empire\",\n subtitle = \"From Rock Bottom to Revenue Revolution\",\n description = \"Transform your vision into a luxury business empire through strategic design, editorial storytelling, and uncompromising excellence.\",\n backgroundImage = \"/api/placeholder/1920/800\"\n}) => {\n return (\n <section className=\"relative w-full h-[80vh] min-h-[600px] overflow-hidden bg-black\">\n {/* Full-Bleed Background with Dark Overlay */}\n <div className=\"absolute inset-0 w-full h-full\">\n <img \n src={backgroundImage}\n alt=\"Luxury editorial background\"\n className=\"w-full h-full object-cover object-center opacity-40\"\n />\n <div className=\"absolute inset-0 bg-gradient-to-br from-black/70 via-black/50 to-black/80\" />\n </div>\n\n {/* Editorial Content Grid */}\n <div className=\"relative z-10 w-full h-full max-w-7xl mx-auto px-8 lg:px-12\">\n <div className=\"flex flex-col justify-center h-full py-20\">\n \n {/* Typography Hierarchy - Editorial Magazine Style */}\n <div className=\"grid grid-cols-12 gap-8 items-center\">\n \n {/* Main Editorial Content */}\n <div className=\"col-span-12 lg:col-span-8\">\n \n {/* Overline - Editorial Tag */}\n <div className=\"mb-6\">\n <span className=\"inline-block px-4 py-2 bg-white/10 backdrop-blur-sm border border-white/20 text-white text-xs font-medium tracking-[0.2em] uppercase\">\n LUXURY BUSINESS TRANSFORMATION\n </span>\n </div>\n\n {/* Main Headline - Times New Roman Editorial */}\n <h1 className=\"font-serif text-white mb-8\">\n <span className=\"block text-5xl lg", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/AdminTestPanel.tsx", "content": "import React, { useState, useEffect } from 'react';\n\nconst AdminTestPanel: React.FC = () => {\n const [currentTime, setCurrentTime] = useState<string>('');\n\n useEffect(() => {\n const updateTime = () => {\n setCurrentTime(new Date().toLocaleString());\n };\n\n // Update immediately\n updateTime();\n\n // Update every second\n const interval = setInterval(updateTime, 1000);\n\n return () => clearInterval(interval);\n }, []);\n\n return (\n <div className=\"bg-white rounded-lg shadow-lg p-6 border border-gray-200\">\n <div className=\"text-center space-y-4\">\n <h2 className=\"text-2xl font-bold text-gray-900 font-times\">\n Admin Test Panel\n </h2>\n \n <div className=\"bg-gradient-to-r from-purple-100 to-pink-100 rounded-lg p-4\">\n <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">\n 🤖 Agent Identity\n </h3>\n <p className=\"text-gray-700 font-medium\">\n Zara - Dev AI & Technical Mastermind\n </p>\n <p className=\"text-sm text-gray-600 mt-1\">\n SSELFIE Studio's Luxury Code Architect\n </p>\n </div>\n\n <div className=\"bg-gradient-to-r from-blue-100 to-indigo-100 rounded-lg p-4\">\n <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">\n ⏰ Live Timestamp\n </h3>\n <p className=\"text-xl font-mono text-gray-900 font-bold\">\n {currentTime}\n </p>\n </div>\n\n <div className=\"bg-gradient-to-r from-green-100 to-emerald-100 rounded-lg p-4\">\n <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">\n ✅ System Status\n </h3>\n <p className=\"text-green-700 font-medium\">\n Admin Panel Active & Operational\n </p>\n </div>\n </div>\n </div>\n );\n};\n\nexport default AdminTestPanel;", "reason": "🔑 Client source file, 📝 Matches: admin, 📝 Matches: system, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/AgentAccountabilityTracker.tsx", "content": "import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\ninterface AccountabilityData {\n agentId: string;\n accountabilityScore: number;\n recentActivity: {\n timestamp: string;\n userMessage: string;\n agentResponse: string;\n promisedDeliverable: string;\n actualDelivery: string;\n }[];\n}\n\nexport default function AgentAccountabilityTracker() {\n const [selectedAgent, setSelectedAgent] = useState<string>('aria');\n\n const { data: accountabilityData, isLoading, refetch } = useQuery<AccountabilityData>({\n queryKey: ['/api/agent-accountability', selectedAgent],\n enabled: !!selectedAgent,\n refetchInterval: 10000, // Refresh every 10 seconds\n staleTime: 0\n });\n\n const agents = [\n { id: 'aria', name: 'Aria', role: 'Design AI' },\n { id: 'zara', name: 'Zara', role: 'Dev AI' },\n { id: 'rachel', name: 'Rachel', role: 'Voice AI' },\n { id: 'diana', name: 'Diana', role: 'Business Coach' },\n { id: 'quinn', name: 'Quinn', role: 'QA AI' },\n ];\n\n const getAccountabilityBadge = (score: number) => {\n if (score >= 90) return { color: 'bg-green-100 text-green-800', label: 'EXCELLENT' };\n if (score >= 70) return { color: 'bg-yellow-100 text-yellow-800', label: 'GOOD' };\n if (score >= 50) return { color: 'bg-orange-100 text-orange-800', label: 'NEEDS IMPROVEMENT' };\n return { color: 'bg-red-100 text-red-800', label: 'CRITICAL' };\n };\n\n const getDeliveryStatus = (promised: string, actual: string) => {\n if (actual === 'File Created' && promised === 'Delivery Promise Detected') {\n return { color: 'text-green-600', label: '✓ DELIVERED' };\n }\n if (promised === 'Delivery Promise Detected' && actual === 'No File Creation') {\n return { color: 'text-red-600', label: '✗ BROKEN PROMISE' };\n }\n return { color: 'text-gray-6", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/AgentBridgeToggle.tsx", "content": "import React from 'react';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Zap, MessageCircle } from 'lucide-react';\n\ninterface AgentBridgeToggleProps {\n enabled: boolean;\n onToggle: (enabled: boolean) => void;\n agentName: string;\n}\n\nexport default function AgentBridgeToggle({ enabled, onToggle, agentName }: AgentBridgeToggleProps) {\n return (\n <Card className=\"border-zinc-200 dark:border-zinc-800\">\n <CardHeader className=\"pb-3\">\n <div className=\"flex items-center space-x-2\">\n {enabled ? (\n <Zap className=\"h-4 w-4 text-amber-500\" />\n ) : (\n <MessageCircle className=\"h-4 w-4 text-zinc-500\" />\n )}\n <CardTitle className=\"text-sm font-medium\">\n {enabled ? 'Bridge Mode' : 'Chat Mode'}\n </CardTitle>\n </div>\n <CardDescription className=\"text-xs\">\n {enabled \n ? ${agentName} will execute tasks through the Agent Bridge System\n : ${agentName} will respond in conversational mode only\n }\n </CardDescription>\n </CardHeader>\n <CardContent className=\"pt-0\">\n <div className=\"flex items-center space-x-2\">\n <Switch\n id=\"bridge-mode\"\n checked={enabled}\n onCheckedChange={onToggle}\n />\n <Label htmlFor=\"bridge-mode\" className=\"text-sm\">\n {enabled ? 'Execute Actions' : 'Chat Only'}\n </Label>\n </div>\n </CardContent>\n </Card>\n );\n}", "reason": "🔑 Client source file, 📝 Matches: admin, 📝 Matches: system, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/AgentWorkflowAccelerator.tsx", "content": "import React, { useState } from 'react';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useMutation } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface WorkflowTemplate {\n id: string;\n name: string;\n description: string;\n agents: string[];\n estimatedTime: string;\n deliverables: string[];\n}\n\nconst workflowTemplates: WorkflowTemplate[] = [\n {\n id: 'build-feature-complete',\n name: 'Complete BUILD Feature Implementation',\n description: 'Full BUILD feature with luxury editorial design and website builder',\n agents: ['aria', 'zara', 'rachel'],\n estimatedTime: '30 minutes',\n deliverables: [\n 'EnhancedBuildVisualEditor.tsx',\n 'BuildPageLayout.tsx', \n 'VictoriaChatInterface.tsx',\n 'WebsitePreviewPanel.tsx',\n 'Updated routing and navigation'\n ]\n },\n {\n id: 'landing-page-redesign',\n name: 'Landing Page Luxury Redesign',\n description: 'Complete landing page overhaul with Times New Roman and editorial design',\n agents: ['aria', 'rachel'],\n estimatedTime: '20 minutes',\n deliverables: [\n 'LuxuryLandingPage.tsx',\n 'EditorialHeroSection.tsx',\n 'TransformationStorySection.tsx',\n 'Updated copy and messaging'\n ]\n },\n {\n id: 'admin-dashboard-enhancement',\n name: 'Admin Dashboard Power Features',\n description: 'Enhanced admin capabilities with real-time monitoring and controls',\n agents: ['zara', 'quinn'],\n estimatedTime: '25 minutes',\n deliverables: [\n 'RealTimeMetricsDashboard.tsx',\n 'AgentControlPanel.tsx',\n 'SystemHealthMonitor.tsx',\n 'Enhanced performance tracking'\n ]\n },\n {\n id: 'ai-speed-optimization',\n name: 'AI Speed & Performance Boost',\n description: 'Optimize all AI interactions for sub-second response times',\n agents: ['zara', 'ava'],\n estimatedTime: '40 minut", "reason": "🔑 Client source file, 📝 Matches: find, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 📝 Matches: system, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/CheckpointManagementInterface.tsx", "content": "import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Clock, Save, RotateCcw, Database, GitBranch, Shield } from 'lucide-react';\n\ninterface Checkpoint {\n id: string;\n timestamp: Date;\n type: 'auto' | 'manual' | 'milestone';\n description: string;\n fileCount: number;\n agentId?: string;\n status: 'success' | 'pending' | 'failed';\n}\n\nexport default function CheckpointManagementInterface() {\n const [checkpoints] = useState<Checkpoint[]>([\n {\n id: 'cp_1754040000',\n timestamp: new Date(Date.now() - 1800000), // 30 min ago\n type: 'auto',\n description: 'Auto-checkpoint: Agent file operations',\n fileCount: 12,\n agentId: 'aria',\n status: 'success'\n },\n {\n id: 'cp_1754038000',\n timestamp: new Date(Date.now() - 3600000), // 1 hour ago \n type: 'milestone',\n description: 'Enhancement Project Milestone: Backend Services Complete',\n fileCount: 28,\n status: 'success'\n },\n {\n id: 'cp_1754036000',\n timestamp: new Date(Date.now() - 5400000), // 1.5 hours ago\n type: 'manual',\n description: 'Pre-agent fix checkpoint',\n fileCount: 15,\n status: 'success'\n }\n ]);\n\n const [isCreatingCheckpoint, setIsCreatingCheckpoint] = useState(false);\n\n const handleCreateCheckpoint = async () => {\n setIsCreatingCheckpoint(true);\n // Implementation would call checkpoint API\n setTimeout(() => setIsCreatingCheckpoint(false), 2000);\n };\n\n const handleRestore = async (checkpointId: string) => {\n console.log(Restoring checkpoint: ${checkpointId});\n // Implementation would call restore API\n };\n\n const getTypeIcon = (type: Checkpoint['type']) => {\n switch (type) {\n case 'auto': return <Clock className=\"h-4 w-4\" />;\n case 'manual': retu", "reason": "🔑 Client source file, 📝 Matches: backend, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 📝 Matches: system, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/ElenaWorkflowsTab.tsx", "content": "/**\n * Elena Workflows Tab - Displays staged workflows with manual execution buttons\n * Revolutionary conversational-to-autonomous bridge interface\n */\n\nimport React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Clock, Users, Zap, AlertTriangle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface StagedWorkflow {\n id: string;\n title: string;\n description: string;\n agents: string[];\n priority: 'low' | 'medium' | 'high' | 'critical';\n estimatedDuration: string;\n tasksCount: number;\n createdAt: string;\n status: 'staged' | 'executing' | 'completed' | 'failed';\n}\n\nexport function ElenaWorkflowsTab() {\n const { toast } = useToast();\n const queryClient = useQueryClient();\n const [executingWorkflows, setExecutingWorkflows] = useState<Set<string>>(new Set());\n\n // Query staged workflows - NO POLLING in chat interface, only manual refresh\n const { data: workflowsData, isLoading } = useQuery({\n queryKey: ['/api/elena/staged-workflows'],\n staleTime: 300000, // Data is stale after 5 minutes (no auto-refresh)\n });\n\n // Mutation to execute workflow - Connected to Elena execution API\n const executeWorkflowMutation = useMutation({\n mutationFn: async (workflow: StagedWorkflow) => {\n // Execute workflow through Elena API\n \n const response = await fetch('/api/elena/execute', {\n method: 'POST',\n headers: {\n 'Content-Type': 'application/json',\n },\n credentials: 'include',\n body: JSON.stringify({\n workflowId: workflow.id,\n workflowName: workflow.title,\n agents: workflow.agents.map(agentId => ({\n agentId: agentId,\n task: Execute ${workflow.title} - ${workflow.description}", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 📝 Matches: system, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/LuxuryProgressDisplay.tsx", "content": "import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { \n CheckCircle, \n AlertCircle, \n PlayCircle, \n Clock,\n User,\n Zap\n} from 'lucide-react';\n\ninterface TaskStep {\n id: string;\n title: string;\n status: 'pending' | 'in_progress' | 'completed' | 'failed';\n progress?: number;\n description?: string;\n}\n\ninterface LuxuryProgressDisplayProps {\n taskId: string;\n agentName: string;\n steps: TaskStep[];\n overallProgress: number;\n status: 'pending' | 'planning' | 'executing' | 'validating' | 'completed' | 'failed';\n className?: string;\n}\n\nexport default function LuxuryProgressDisplay({ \n taskId, \n agentName, \n steps, \n overallProgress, \n status,\n className = ""\n}: LuxuryProgressDisplayProps) {\n const getStatusIcon = (stepStatus: TaskStep['status']) => {\n switch (stepStatus) {\n case 'completed':\n return <CheckCircle className="h-4 w-4 text-emerald-500" />;\n case 'in_progress':\n return <PlayCircle className="h-4 w-4 text-blue-500 animate-pulse" />;\n case 'failed':\n return <AlertCircle className="h-4 w-4 text-red-500" />;\n default:\n return <Clock className="h-4 w-4 text-zinc-400" />;\n }\n };\n\n const getStatusColor = (stepStatus: TaskStep['status']) => {\n switch (stepStatus) {\n case 'completed':\n return 'bg-emerald-500';\n case 'in_progress':\n return 'bg-blue-500';\n case 'failed':\n return 'bg-red-500';\n default:\n return 'bg-zinc-300';\n }\n };\n\n const getOverallStatusBadge = () => {\n switch (status) {\n case 'planning':\n return <Badge variant="secondary">Planning</Badge>;\n case 'executing':\n return <Badge variant="default" className="bg-blue-500">Executing</Badge>;\n case 'validating':\n return <Badge variant="default" className="bg-amber-500">Validating</B", "reason": "🔑 Client source file, 📝 Matches: admin, 📝 Matches: system, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/ManyChatPSIDUploader.tsx", "content": "import React, { useState, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Upload, FileText, AlertCircle, CheckCircle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ManyChatPSIDUploaderProps {\n onPSIDListReady: (psids: string[]) => void;\n}\n\nexport function ManyChatPSIDUploader({ onPSIDListReady }: ManyChatPSIDUploaderProps) {\n const [psidList, setPsidList] = useState<string[]>([]);\n const [uploadMethod, setUploadMethod] = useState<'file' | 'paste'>('file');\n const [textInput, setTextInput] = useState('');\n const [isProcessing, setIsProcessing] = useState(false);\n const fileInputRef = useRef<HTMLInputElement>(null);\n const { toast } = useToast();\n\n const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n const file = event.target.files?.[0];\n if (!file) return;\n\n setIsProcessing(true);\n try {\n const text = await file.text();\n const psids = parsePSIDText(text);\n setPsidList(psids);\n \n toast({\n title: "File processed successfully",\n description: Found ${psids.length} subscriber IDs,\n });\n } catch (error) {\n toast({\n title: "Error processing file",\n description: "Please check your file format and try again",\n variant: "destructive",\n });\n } finally {\n setIsProcessing(false);\n }\n };\n\n const handleTextInput = () => {\n setIsProcessing(true);\n try {\n const psids = parsePSIDText(textInput);\n setPsidList(psids);\n \n toast({\n title: "Text processed successfully",\n description: Found ${psids.length} subscriber IDs,\n });\n } catch (error) {\n toast({\n title: "Erro", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 📝 Matches: system, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/MayaCollectionManager.tsx", "content": "import React, { useState } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface UpdateStats {\n totalCollections: number;\n totalPrompts: number;\n timestamp: string;\n}\n\ninterface UpdateResult {\n success: boolean;\n message: string;\n upgradeStats?: UpdateStats;\n}\n\nexport default function MayaCollectionManager() {\n const [isUpdating, setIsUpdating] = useState(false);\n const [updateResult, setUpdateResult] = useState<UpdateResult | null>(null);\n const { toast } = useToast();\n\n // Get your actual AI photoshoot collections to update\n const getActualCollections = () => [\n {\n id: 'healing-mindset',\n name: 'HEALING MINDSET',\n subtitle: 'Phoenix Rising', \n description: 'For when you want to capture how far you\'ve come. You know that quiet strength you have now? The one that came from surviving what almost broke you? Let\'s photograph that.',\n prompts: [\n { id: 'morning-meditation-solitude', name: 'Morning Solitude', category: 'Inner Peace', prompt: '[triggerword], woman finding stillness in the storm through morning meditation, luxurious soft neutral cashmere layers and flowing linen, soft golden morning light streaming through floor-to-ceiling window, peaceful contemplation with eyes gently closed, raw photo, visible skin pores, film grain, unretouched natural skin texture, subsurface scattering, photographed on film' },\n { id: 'ocean-therapy-walk', name: 'Ocean Healing', category: 'Nature Therapy', prompt: '[triggerword], woman walking alone on empty beach where the ocean became her therapist, flowing ivory linen maxi dress moving in sea breeze, warm golden dawn lighting with ocean reflections creating healing solitude, contemplative expression while processing thoughts and finding peace in endless horizons, raw photo, visible skin pores, film grain, unretouched natural skin texture, subsurface scattering, photographed on film' },\n { id: 'phoenix-risi", "reason": "🔑 Client source file, 📝 Matches: find, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 💻 Code: admin, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/admin/QuickActionCard.tsx", "content": "interface QuickActionCardProps {\n title: string;\n description: string;\n buttonText: string;\n onClick?: () => void;\n}\n\nexport default function QuickActionCard({ title, description, buttonText, onClick }: QuickActionCardProps) {\n return (\n <div className="bg-gray-50 p-8 text-center hover:bg-gray-100 transition-colors duration-200">\n <h3 \n className="text-2xl font-light tracking-[0.2em] uppercase mb-4 text-black"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {title.split('').join(' ')}\n </h3>\n <p className="text-gray-600 mb-6 leading-relaxed">\n {description}\n </p>\n <button \n className="bg-black text-white px-8 py-3 text-sm tracking-[0.2em] uppercase hover:bg-gray-800 transition-colors"\n onClick={onClick}\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {buttonText.split('').join(' ')}\n </button>\n </div>\n );\n}", "reason": "🔑 Client source file, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/ServiceIntegrationUI.tsx", "content": "/\n * Service Integration UI - Luxury interface for service setup and management\n * SSELFIE Studio Enhancement Project - Aria Implementation\n /\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n CheckCircle, \n AlertCircle, \n Settings, \n Zap, \n Mail, \n CreditCard,\n MessageSquare,\n RefreshCw,\n ExternalLink,\n Shield\n} from 'lucide-react';\n\ninterface ServiceStatus {\n id: string;\n name: string;\n icon: React.ReactNode;\n status: 'connected' | 'disconnected' | 'error' | 'configuring';\n description: string;\n lastChecked: Date;\n config?: Record<string, any>;\n}\n\ninterface ServiceConfig {\n apiKey?: string;\n webhookUrl?: string;\n accountId?: string;\n secretKey?: string;\n}\n\nexport default function ServiceIntegrationUI() {\n const { toast } = useToast();\n const [services, setServices] = useState<ServiceStatus[]>([\n {\n id: 'stripe',\n name: 'Stripe',\n icon: <CreditCard className="h-5 w-5" />,\n status: 'connected',\n description: 'Payment processing and subscription management',\n lastChecked: new Date(),\n config: { accountId: 'acct_' }\n },\n {\n id: 'resend',\n name: 'Resend',\n icon: <Mail className="h-5 w-5" />,\n status: 'connected',\n description: 'Transactional email delivery',\n lastChecked: new Date(),\n config: { domain: 'sselfie.ai' }\n },\n {\n id: 'flodesk',\n name: 'Flodesk',\n icon: <Zap className="h-5 w-5" />,\n status: 'disconnected',\n description: 'Email marketing and automation',\n lastChecked: new Date(Date.now() - 2 * 60", "reason": "🔑 Client source file, 📝 Matches: find, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/ServiceSetupWizard.tsx", "content": "", "reason": "🔑 Client source file, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/StatsCard.tsx", "content": "interface StatsCardProps {\n title: string;\n value: string | number;\n change: string;\n image: string;\n onClick?: () => void;\n}\n\nexport default function StatsCard({ title, value, change, image, onClick }: StatsCardProps) {\n return (\n <div \n className="relative bg-white rounded-lg overflow-hidden cursor-pointer hover:opacity-90 transition-all duration-200 shadow-lg"\n onClick={onClick}\n >\n <div \n className="h-96 bg-cover bg-center relative"\n style={{\n backgroundImage: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)), url('${image}'),\n backgroundPosition: '50% 30%'\n }}\n >\n <div className="absolute inset-0 flex items-center justify-center">\n <div className="text-center text-white">\n <h3 \n className="text-2xl font-light tracking-[0.3em] uppercase opacity-90 mb-4"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {title.split('').join(' ')}\n </h3>\n <div \n className="text-4xl font-light mb-2" \n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {value}\n </div>\n <div className="text-sm opacity-80 tracking-[0.1em]">\n {change}\n </div>\n </div>\n </div>\n </div>\n </div>\n );\n}", "reason": "🔑 Client source file, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/TestClaudeIntegration.tsx", "content": "", "reason": "🔑 Client source file, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/UnifiedAgentInterface.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, Play, User, CheckCircle, Clock } from 'lucide-react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface Agent {\n id: string;\n name: string;\n role: string;\n status: 'available' | 'busy' | 'offline';\n}\n\ninterface ExecutionResult {\n executionId: string;\n status: 'pending' | 'running' | 'completed' | 'failed';\n result?: any;\n message?: string;\n}\n\ninterface AgentsResponse {\n success: boolean;\n agents: Agent[];\n}\n\nexport function UnifiedAgentInterface() {\n const [selectedAgent, setSelectedAgent] = useState<string>('');\n const [task, setTask] = useState<string>('');\n const [context, setContext] = useState<string>('{}');\n const [executionResults, setExecutionResults] = useState<ExecutionResult[]>([]);\n const queryClient = useQueryClient();\n\n // Fetch available agents\n const { data: agentsData, isLoading: agentsLoading } = useQuery<AgentsResponse>({\n queryKey: ['/api/unified-agents/available'],\n refetchInterval: 30000 // Refresh every 30 seconds\n });\n\n // Execute agent task mutation\n const executeTaskMutation = useMutation({\n mutationFn: async (params: { agentName: string; task: string; context: any; priority?: string }) => {\n return apiRequest('/api/unified-agents/execute', 'POST', params);\n },\n onSuccess: (data) => {\n setExecutionResults(prev => [data, ...prev]);\n setTask('');\n queryClient.invalidateQueries({ queryKey: ['/api/unified-agents/available'] });\n }\n });\n\n const handleExecuteTask = () => {\n if (!selectedAgent || !task.trim()) return;\n\n let parsedContext = {};\n try {\n ", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 📝 Matches: system, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/admin/WhiteLabelClientManager.tsx", "content": "import React from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { User, Settings, Eye } from 'lucide-react';\n\ninterface WhiteLabelClient {\n id: string;\n email: string;\n firstName: string;\n lastName: string;\n plan: string;\n mayaAiAccess: boolean;\n victoriaAiAccess: boolean;\n profile?: {\n fullName: string;\n location: string;\n instagramHandle: string;\n bio: string;\n };\n onboarding?: {\n brandStory: string;\n businessGoals: string;\n targetAudience: string;\n completed: boolean;\n };\n}\n\nexport default function WhiteLabelClientManager() {\n const { toast } = useToast();\n const queryClient = useQueryClient();\n\n // Simple Shannon access mutation\n const accessShannonMutation = useMutation({\n mutationFn: () =>\n apiRequest('/api/admin/impersonate-user', 'POST', { email: 'shannon@soulresets.com' }, {\n 'x-admin-token': 'sandra-admin-2025'\n }),\n onSuccess: () => {\n toast({\n title: "Accessing Shannon's Account",\n description: "Redirecting to Shannon's workspace...",\n });\n // Redirect to workspace after brief delay\n setTimeout(() => {\n window.location.href = '/workspace';\n }, 1000);\n },\n onError: (error) => {\n toast({\n title: "Access Failed",\n description: error.message,\n variant: "destructive",\n });\n }\n });\n\n const handleAccessShannon = () => {\n accessShannonMutation.mutate();\n };\n\n return (\n <div className="p-6 space-y-6">\n <div className="text-center">\n <h1 className="text-3xl font-bold mb-4" style={{ fontFamily: 'Times New Roman, serif' }}>\n Shannon Account Access\n </h1>\n <p className="text-gray-600 mb-8">Direct access", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/ai-photoshoot/CollectionCard.tsx", "content": "import React, { memo } from 'react';\nimport { PhotoshootCollection } from '@/types/photoshoot';\n\ninterface CollectionCardProps {\n collection: PhotoshootCollection;\n isSelected: boolean;\n onSelect: () => void;\n}\n\nexport const CollectionCard = memo<CollectionCardProps>(({\n collection,\n isSelected,\n onSelect\n}) => {\n return (\n <div\n onClick={onSelect}\n className={relative group cursor-pointer transition-all duration-500 aspect-[3/4] overflow-hidden shadow-[0_8px_30px_rgb(0,0,0,0.12)] ${\n isSelected \n ? 'ring-2 ring-black transform scale-[1.02]' \n : 'hover:scale-[1.03] hover:shadow-[0_20px_60px_rgb(0,0,0,0.25)]'\n }}\n style={{\n background: 'linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%)',\n backdropFilter: 'blur(10px)'\n }}\n role="button"\n tabIndex={0}\n aria-label={Select ${collection.name} collection}\n onKeyDown={(e) => {\n if (e.key === 'Enter' || e.key === ' ') {\n e.preventDefault();\n onSelect();\n }\n }}\n >\n {/* LUXURY IMAGE CONTAINER /}\n <div className="relative w-full h-3/4 overflow-hidden">\n <img\n src={collection.preview}\n alt={${collection.name} collection preview}\n className="w-full h-full object-cover transition-all duration-700 group-hover:scale-105"\n style={{\n filter: 'contrast(1.1) saturate(1.05)',\n }}\n loading="lazy"\n />\n {/ LUXURY OVERLAY GRADIENT /}\n <div className="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />\n </div>\n \n {/ LUXURY TYPOGRAPHY TREATMENT /}\n <div className="absolute bottom-0 left-0 right-0 p-6 bg-white/95 backdrop-blur-sm">\n <div className="text-center">\n <div className="font-serif text-sm font-light uppercase tracking-[0.3em] text-black mb-1">\n {colle", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/ai-photoshoot/PhotoshootCollectionGrid.tsx", "content": "import React, { memo } from 'react';\nimport { PhotoshootCollection } from '@/types/photoshoot';\nimport { CollectionCard } from './CollectionCard';\n\ninterface PhotoshootCollectionGridProps {\n collections: PhotoshootCollection[];\n selectedCollection: string | null;\n onSelectCollection: (collectionId: string) => void;\n}\n\nexport const PhotoshootCollectionGrid = memo<PhotoshootCollectionGridProps>(({\n collections,\n selectedCollection,\n onSelectCollection\n}) => {\n return (\n <div className="grid grid-cols-2 md:grid-cols-3 gap-8 max-w-5xl mx-auto">\n {collections.map((collection) => (\n <CollectionCard\n key={collection.id}\n collection={collection}\n isSelected={selectedCollection === collection.id}\n onSelect={() => onSelectCollection(collection.id)}\n />\n ))}\n </div>\n );\n});\n\nPhotoshootCollectionGrid.displayName = 'PhotoshootCollectionGrid';", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/ai-photoshoot/PromptCard.tsx", "content": "import React, { memo } from 'react';\nimport { PhotoshootPrompt } from '@/types/photoshoot';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface PromptCardProps {\n prompt: PhotoshootPrompt;\n collectionPreview: string;\n canGenerate: boolean;\n onGenerate: () => void;\n}\n\nexport const PromptCard = memo<PromptCardProps>(({\n prompt,\n collectionPreview,\n canGenerate,\n onGenerate\n}) => {\n const { toast } = useToast();\n\n const handleClick = () => {\n if (canGenerate) {\n onGenerate();\n } else {\n toast({\n title: "Training Required",\n description: "Please complete your AI model training first.",\n variant: "destructive",\n });\n }\n };\n\n const handleKeyDown = (e: React.KeyboardEvent) => {\n if (e.key === 'Enter' || e.key === ' ') {\n e.preventDefault();\n handleClick();\n }\n };\n\n return (\n <div\n onClick={handleClick}\n onKeyDown={handleKeyDown}\n tabIndex={0}\n role="button"\n aria-label={Generate ${prompt.name} style${!canGenerate ? ' (training required)' : ''}}\n className={relative group cursor-pointer transition-all duration-500 aspect-[3/4] overflow-hidden ${\n canGenerate \n ? 'hover:scale-[1.03] shadow-[0_8px_30px_rgb(0,0,0,0.12)] hover:shadow-[0_20px_60px_rgb(0,0,0,0.25)] focus:outline-none focus:ring-2 focus:ring-black focus:ring-offset-2' \n : 'opacity-40 cursor-not-allowed shadow-[0_4px_15px_rgb(0,0,0,0.08)]'\n }}\n style={{\n background: 'linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%)',\n backdropFilter: 'blur(5px)',\n border: '1px solid rgba(0,0,0,0.05)'\n }}\n >\n {/ Collection preview image for consistency /}\n <img\n src={collectionPreview}\n alt={${prompt.name} style preview}\n className="w-full h-full object-cover"\n loading="lazy"\n />\n \n <div className={absolute inset-0 bg-black transition-opacity duration-300 ${\n canGenerate ? 'bg-opacity-60 gr", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/ai-photoshoot/PromptGrid.tsx", "content": "import React, { memo } from 'react';\nimport { PhotoshootPrompt, PhotoshootCollection } from '@/types/photoshoot';\nimport { PromptCard } from './PromptCard';\n\ninterface PromptGridProps {\n collection: PhotoshootCollection;\n canGenerate: boolean;\n onGenerateFromPrompt: (prompt: PhotoshootPrompt) => void;\n onBack: () => void;\n}\n\nexport const PromptGrid = memo<PromptGridProps>(({\n collection,\n canGenerate,\n onGenerateFromPrompt,\n onBack\n}) => {\n return (\n <div>\n {/* Back Button */}\n <button\n onClick={onBack}\n className=\"px-6 py-3 text-xs uppercase tracking-wide border border-black bg-transparent text-black mb-10 cursor-pointer transition-all duration-300 hover:bg-black hover:text-white focus:outline-none focus:ring-2 focus:ring-black focus:ring-offset-2\"\n aria-label=\"Back to collections\"\n >\n ← Back to Collections\n </button>\n\n {/* Collection Header */}\n <div className=\"text-center mb-16\">\n <h2 \n className=\"font-serif text-[clamp(2rem,4vw,3rem)] font-light uppercase mb-2\" \n style={{ letterSpacing: '0.3em' }}\n >\n {collection.name}\n </h2>\n {collection.subtitle && (\n <h3 \n className=\"font-serif text-[clamp(1.5rem,3vw,2rem)] font-light uppercase mb-4\" \n style={{ letterSpacing: '0.3em' }}\n >\n {collection.subtitle}\n </h3>\n )}\n <p className=\"text-gray-600 max-w-2xl mx-auto text-lg font-light\">\n {collection.description}\n </p>\n </div>\n\n {/* LUXURY PROMPT CARDS GALLERY */}\n <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n {collection.prompts.map((prompt) => (\n <PromptCard\n key={prompt.id}\n prompt={prompt}\n collectionPreview={collection.preview}\n canGenerate={canGenerate}\n onGenerate={() => onGenerateFromPrompt(prompt)}\n />\n ))}\n </div>\n </di", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/brand/EditorialCard.tsx", "content": "import React from 'react';\n\ninterface EditorialCardProps {\n title: string;\n subtitle?: string;\n image?: string;\n children: React.ReactNode;\n}\n\nexport const EditorialCard: React.FC<EditorialCardProps> = ({\n title,\n subtitle,\n image,\n children\n}) => {\n return (\n <article className=\"bg-white border border-gray-200 p-8 mb-8\">\n {image && (\n <div className=\"mb-8\">\n <img\n src={image}\n alt={title}\n className=\"w-full h-[400px] object-cover\"\n />\n </div>\n )}\n \n <header className=\"mb-6\">\n <h2 className=\"font-serif text-3xl text-gray-900 mb-2\">{title}</h2>\n {subtitle && (\n <p className=\"font-serif text-xl text-gray-600 italic\">{subtitle}</p>\n )}\n </header>\n\n <div className=\"prose prose-lg font-serif\">\n {children}\n </div>\n </article>\n );\n};", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/brand/EditorialGrid.tsx", "content": "import React from 'react';\n\ninterface EditorialGridProps {\n children: React.ReactNode;\n columns?: 2 | 3 | 4;\n}\n\nexport const EditorialGrid: React.FC<EditorialGridProps> = ({\n children,\n columns = 3\n}) => {\n const gridCols = {\n 2: 'md:grid-cols-2',\n 3: 'md:grid-cols-3', \n 4: 'md:grid-cols-4'\n };\n\n return (\n <div className={grid grid-cols-1 ${gridCols[columns]} gap-8}>\n {children}\n </div>\n );\n};", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/brand/LuxuryEditorialLayout.tsx", "content": "import React from 'react';\n\ninterface LuxuryEditorialLayoutProps {\n children: React.ReactNode;\n title?: string;\n subtitle?: string;\n}\n\nexport const LuxuryEditorialLayout: React.FC<LuxuryEditorialLayoutProps> = ({\n children,\n title,\n subtitle\n}) => {\n return (\n <div className=\"min-h-screen bg-white\">\n <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n {/* Editorial Header */}\n <header className=\"py-16 text-center\">\n {title && (\n <h1 className=\"font-serif text-4xl md:text-6xl text-gray-900 tracking-tight leading-tight mb-4\">\n {title}\n </h1>\n )}\n {subtitle && (\n <p className=\"font-serif text-xl md:text-2xl text-gray-600 italic\">\n {subtitle}\n </p>\n )}\n </header>\n\n {/* Luxury Content Container */}\n <main className=\"prose prose-lg max-w-none\">\n <div className=\"grid grid-cols-1 md:grid-cols-12 gap-8\">\n <div className=\"md:col-span-2\">\n {/* Left Editorial Margin */}\n <div className=\"h-full border-r border-gray-200\" />\n </div>\n \n <div className=\"md:col-span-8\">\n {/* Main Content */}\n <div className=\"font-serif\">{children}</div>\n </div>\n\n <div className=\"md:col-span-2\">\n {/* Right Editorial Margin */}\n <div className=\"h-full border-l border-gray-200\" />\n </div>\n </div>\n </main>\n </div>\n </div>\n );\n};", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/bridge/LuxuryProgressDisplay.tsx", "content": "import React from 'react';\n\ninterface LuxuryProgressDisplayProps {\n isVisible: boolean;\n taskDescription?: string;\n progress?: number;\n className?: string;\n}\n\nexport default function LuxuryProgressDisplay({\n isVisible,\n taskDescription = \"Implementation in progress...\",\n progress = 0,\n className = \"\"\n}: LuxuryProgressDisplayProps) {\n if (!isVisible) return null;\n\n return (\n <div className={fixed bottom-6 right-6 bg-white border border-zinc-200 shadow-lg p-6 max-w-sm ${className}}>\n <div className=\"mb-4\">\n <div \n className=\"font-serif text-sm font-light text-black\"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {taskDescription}\n </div>\n </div>\n \n {/* Minimal Progress Bar */}\n <div className=\"w-full bg-zinc-100 h-1\">\n <div \n className=\"bg-black h-1 transition-all duration-500\"\n style={{ width: ${progress}%}}\n />\n </div>\n \n {progress > 0 && (\n <div \n className=\"text-xs text-zinc-500 mt-2 text-right\"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {Math.round(progress)}% Complete\n </div>\n )}\n </div>\n );\n}", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/bridge/StatusDashboard.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Clock, CheckCircle, AlertCircle, PlayCircle, Users } from 'lucide-react';\nimport TaskStatusIndicator from './TaskStatusIndicator';\n\ninterface BridgeTask {\n id: string;\n agentName: string;\n instruction: string;\n status: 'pending' | 'planning' | 'executing' | 'validating' | 'completed' | 'failed';\n priority: 'low' | 'medium' | 'high';\n createdAt: string;\n updatedAt: string;\n progress: number;\n steps: Array<{\n id: string;\n title: string;\n status: 'pending' | 'in_progress' | 'completed' | 'failed';\n progress?: number;\n }>;\n}\n\ninterface StatusDashboardProps {\n className?: string;\n}\n\nexport default function StatusDashboard({ className = \"\" }: StatusDashboardProps) {\n const [activeTasks, setActiveTasks] = useState<BridgeTask[]>([]);\n const [loading, setLoading] = useState(true);\n const [error, setError] = useState<string | null>(null);\n\n const fetchActiveTasks = async () => {\n try {\n const response = await fetch('/api/agent-bridge/active-tasks', {\n credentials: 'include'\n });\n \n if (!response.ok) {\n throw new Error('Failed to fetch active tasks');\n }\n \n const data = await response.json();\n setActiveTasks(data.tasks || []);\n setError(null);\n } catch (err) {\n setError(err instanceof Error ? err.message : 'Unknown error');\n } finally {\n setLoading(false);\n }\n };\n\n useEffect(() => {\n fetchActiveTasks();\n \n // Poll for updates every 3 seconds\n const interval = setInterval(fetchActiveTasks, 3000);\n return () => clearInterval(interval);\n }, []);\n\n const getStatusStats = () => {\n const stats = {\n total: activeTasks.length,\n active: activeTasks.filter(t => ['planning', 'executing', 'validating'].includes(t.status)).length,\n completed: activeTasks.filter(", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: system, 📁 Code file" }, { "fileName": "client/src/components/bridge/TaskStatusIndicator.tsx", "content": "import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Button } from '@/components/ui/button';\nimport { \n CheckCircle, \n AlertCircle, \n PlayCircle, \n Clock, \n ChevronDown, \n ChevronUp,\n User,\n Calendar\n} from 'lucide-react';\n\ninterface TaskStep {\n id: string;\n title: string;\n status: 'pending' | 'in_progress' | 'completed' | 'failed';\n progress?: number;\n description?: string;\n}\n\ninterface BridgeTask {\n id: string;\n agentName: string;\n instruction: string;\n status: 'pending' | 'planning' | 'executing' | 'validating' | 'completed' | 'failed';\n priority: 'low' | 'medium' | 'high';\n createdAt: string;\n updatedAt: string;\n progress: number;\n steps: TaskStep[];\n}\n\ninterface TaskStatusIndicatorProps {\n task: BridgeTask;\n className?: string;\n}\n\nexport default function TaskStatusIndicator({ task, className = \"\" }: TaskStatusIndicatorProps) {\n const [expanded, setExpanded] = useState(false);\n\n const getStatusIcon = (status: string) => {\n switch (status) {\n case 'completed':\n return <CheckCircle className=\"h-4 w-4 text-emerald-600\" />;\n case 'failed':\n return <AlertCircle className=\"h-4 w-4 text-red-600\" />;\n case 'executing':\n case 'validating':\n return <PlayCircle className=\"h-4 w-4 text-blue-600 animate-pulse\" />;\n case 'planning':\n return <Clock className=\"h-4 w-4 text-amber-600\" />;\n default:\n return <Clock className=\"h-4 w-4 text-zinc-500\" />;\n }\n };\n\n const getStatusBadge = (status: string) => {\n switch (status) {\n case 'completed':\n return <Badge className=\"bg-emerald-100 text-emerald-800 border-emerald-200\">Completed</Badge>;\n case 'failed':\n return <Badge className=\"bg-red-100 text-red-800 border-red-200\">Failed</Badge>;\n case 'executing':\n return <Badge cla", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/completion-modal.tsx", "content": "import React from 'react';\nimport { Button } from '@/components/ui/button';\n\ninterface CompletionModalProps {\n isOpen: boolean;\n onClose: () => void;\n liveUrl: string;\n brandName: string;\n}\n\nexport function CompletionModal({ isOpen, onClose, liveUrl, brandName }: CompletionModalProps) {\n if (!isOpen) return null;\n\n const copyUrlToClipboard = () => {\n navigator.clipboard.writeText(liveUrl);\n // Show brief feedback without toast\n const button = document.getElementById('copy-url-btn');\n if (button) {\n const originalText = button.textContent;\n button.textContent = 'Copied';\n setTimeout(() => {\n button.textContent = originalText;\n }, 1500);\n }\n };\n\n return (\n <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n <div className=\"bg-white w-full max-w-md mx-4 rounded-none shadow-2xl\">\n {/* Header with luxury styling */}\n <div className=\"text-center p-8 border-b border-gray-100\">\n <div className=\"mb-6\">\n <div className=\"w-16 h-16 mx-auto bg-black rounded-full flex items-center justify-center mb-4\">\n <span className=\"text-white text-2xl\">✓</span>\n </div>\n </div>\n <h2 \n className=\"text-2xl mb-2 text-black font-light tracking-wide\"\n style={{ fontFamily: \"'Times New Roman', serif\" }}\n >\n Your Brand Is Live\n </h2>\n <p className=\"text-gray-600 text-sm tracking-wide uppercase\" style={{ letterSpacing: '0.1em' }}>\n {brandName} • Published Successfully\n </p>\n </div>\n\n {/* Content */}\n <div className=\"p-8\">\n <div className=\"text-center mb-8\">\n <p className=\"text-gray-700 mb-6 leading-relaxed\">\n Your professional landing page is now live and ready for your audience.\n </p>\n \n {/* Live URL Display */}\n <div className=\"bg-gray-50 p-4", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/comprehensive-landing-template.tsx", "content": "export const COMPREHENSIVE_LANDING_TEMPLATE =<!DOCTYPE html>\n<html lang="en">\n<head>\n <meta charset="UTF-8">\n <meta name="viewport" content="width=device-width, initial-scale=1.0">\n <title>{{USER_NAME}} - {{USER_TAGLINE}}</title>\n <style>\n * { margin: 0; padding: 0; box-sizing: border-box; }\n body { font-family: system-ui, -apple-system, sans-serif; line-height: 1.6; color: #0a0a0a; }\n .serif { font-family: 'Times New Roman', serif; }\n \n / Navigation /\n .nav { position: fixed; top: 0; left: 0; right: 0; z-index: 1000; background: rgba(255,255,255,0.95); backdrop-filter: blur(10px); border-bottom: 1px solid #e5e5e5; padding: 20px 0; }\n .nav-container { max-width: 1400px; margin: 0 auto; padding: 0 40px; display: flex; justify-content: space-between; align-items: center; }\n .nav-logo { font-family: 'Times New Roman', serif; font-size: 20px; font-weight: 400; letter-spacing: -0.01em; color: #0a0a0a; text-decoration: none; }\n .nav-menu { display: flex; gap: 40px; }\n .nav-item { color: #0a0a0a; text-decoration: none; font-size: 11px; letter-spacing: 0.4em; text-transform: uppercase; transition: opacity 0.3s; }\n .nav-item:hover { opacity: 0.6; }\n \n / Hero Section /\n .hero-section { \n height: 100vh; \n background: linear-gradient(rgba(10,10,10,0.3), rgba(10,10,10,0.3)), url('{{USER_HERO_PHOTO}}') center top/cover; \n display: flex; \n flex-direction: column;\n justify-content: flex-end; \n align-items: center;\n text-align: center; \n color: white; \n position: relative;\n padding: 80px 40px;\n }\n .hero-content { max-width: 800px; }\n .hero-tagline { \n font-size: 11px; \n letter-spacing: 0.4em; \n text-transform: uppercase; \n color: rgba(255,255,255,0.7); \n margin-bottom: 24px; \n }\n", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: system, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/dashboard/ComplexDashboard.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { useDashboardData } from '../../hooks/useDashboardData';\nimport { DashboardMetrics, DashboardSection } from '../../../shared/types/dashboard';\nimport styled from 'styled-components';\n\nconst DashboardContainer = styled.div\n padding: 40px;\n background: #ffffff;\n min-height: 100vh;\n;\n\nconst DashboardHeader = styled.h1\n font-family: \"Times New Roman\", serif;\n font-size: 48px;\n color: #0a0a0a;\n margin-bottom: 40px;\n font-weight: normal;\n letter-spacing: -0.02em;\n;\n\nconst MetricsGrid = styled.div\n display: grid;\n grid-template-columns: repeat(3, 1fr);\n gap: 30px;\n margin-bottom: 60px;\n;\n\nconst MetricCard = styled.div\n background: #f5f5f5;\n padding: 40px;\n \n h3 {\n font-family: \"Times New Roman\", serif;\n font-size: 24px;\n color: #0a0a0a;\n margin-bottom: 20px;\n }\n \n p {\n font-family: \"Times New Roman\", serif;\n font-size: 36px;\n color: #0a0a0a;\n }\n;\n\nconst SectionContainer = styled.section\n margin-bottom: 80px;\n \n h2 {\n font-family: \"Times New Roman\", serif;\n font-size: 32px;\n color: #0a0a0a;\n margin-bottom: 30px;\n font-weight: normal;\n }\n;\n\nexport const ComplexDashboard: React.FC = () => {\n const { metrics, sections, loading, error } = useDashboardData();\n \n if (loading) return <div>Loading...</div>;\n if (error) return <div>Error: {error}</div>;\n\n return (\n <DashboardContainer>\n <DashboardHeader>Executive Dashboard</DashboardHeader>\n \n <MetricsGrid>\n {metrics?.map((metric, index) => (\n <MetricCard key={index}>\n <h3>{metric.label}</h3>\n <p>{metric.value}</p>\n </MetricCard>\n ))}\n </MetricsGrid>\n\n {sections?.map((section, index) => (\n <SectionContainer key={index}>\n <h2>{section.title}</h2>\n {/ Custom section content rendering based on section.type */}\n <div>{section.content}</div>\n </SectionContainer>\n ))}\n </Dash", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/dashboard/ProgressDashboard.tsx", "content": "/\n * PROGRESS DASHBOARD COMPONENT\n * Real-time visualization of multi-agent work progress\n * Generated by Aria - Luxury Design Authority\n /\n\nimport React, { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { implementationTracker, ImplementationMetrics } from '@/services/implementation-tracker';\n\nexport interface AgentWork {\n agentId: string;\n task: string;\n status: 'idle' | 'working' | 'completed' | 'error';\n progress: number;\n timestamp: string;\n value: number;\n}\n\nexport interface ProgressMetrics {\n totalTasks: number;\n completedTasks: number;\n activeTasks: number;\n systemHealth: number;\n responseTime: number;\n}\n\ninterface DashboardProps {\n metrics: ProgressMetrics;\n agentWork: AgentWork[];\n}\n\nexport const ProgressDashboard: React.FC<DashboardProps> = ({ \n metrics, \n agentWork \n}) => {\n const [implementationMetrics, setImplementationMetrics] = useState<ImplementationMetrics | null>(null);\n const [realTimeUpdates, setRealTimeUpdates] = useState<string[]>([]);\n\n useEffect(() => {\n // Update implementation metrics\n const updateMetrics = () => {\n setImplementationMetrics(implementationTracker.getMetrics());\n };\n\n updateMetrics();\n const interval = setInterval(updateMetrics, 2000);\n\n // Listen for real-time updates\n const handleUpdate = (event: CustomEvent) => {\n const { component } = event.detail;\n setRealTimeUpdates(prev => [\n ${new Date().toLocaleTimeString()}: ${component} completed,\n ...prev.slice(0, 9)\n ]);\n };\n\n window.addEventListener('implementation-update', handleUpdate as EventListener);\n\n return () => {\n clearInterval(interval);\n window.removeEventListener('implementation-update', handleUpdate as EventListener);\n };\n }, []);\n\n const getStatusColor = (status: AgentWork['status']) => {\n switch (status) {\n case 'working': return 'text-blue-400';\n case 'completed': return 'text-green-400';\n case 'error': retur", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: system, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/design/LuxuryCard.tsx", "content": "import React from 'react';\nimport styled from 'styled-components';\n\ninterface LuxuryCardProps {\n title: string;\n subtitle?: string;\n content: string;\n imageSrc?: string;\n}\n\nconst CardContainer = styled.div\n background: #ffffff;\n border: 1px solid #0a0a0a;\n padding: 2.5rem;\n margin: 2rem 0;\n max-width: 800px;\n font-family: 'Times New Roman', Times, serif;\n;\n\nconst CardTitle = styled.h2\n color: #0a0a0a;\n font-family: 'Times New Roman', Times, serif;\n font-size: 2.5rem;\n font-weight: normal;\n letter-spacing: 0.02em;\n margin: 0 0 1rem 0;\n line-height: 1.2;\n;\n\nconst CardSubtitle = styled.h3\n color: #666666;\n font-family: 'Times New Roman', Times, serif;\n font-size: 1.5rem;\n font-weight: normal;\n font-style: italic;\n margin: 0 0 2rem 0;\n;\n\nconst CardContent = styled.div\n color: #0a0a0a;\n font-family: 'Times New Roman', Times, serif;\n font-size: 1.125rem;\n line-height: 1.8;\n margin: 0;\n;\n\nconst LuxuryImage = styled.img\n width: 100%;\n height: auto;\n margin: 2rem 0;\n display: block;\n;\n\nconst LuxuryCard: React.FC<LuxuryCardProps> = ({\n title,\n subtitle,\n content,\n imageSrc\n}) => {\n return (\n <CardContainer>\n <CardTitle>{title}</CardTitle>\n {subtitle && <CardSubtitle>{subtitle}</CardSubtitle>}\n {imageSrc && <LuxuryImage src={imageSrc} alt={title} />}\n <CardContent>{content}</CardContent>\n </CardContainer>\n );\n};\n\nexport default LuxuryCard;", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/design/LuxuryComponents.tsx", "content": "import React from 'react';\n\ninterface LuxuryHeadingProps {\n children: React.ReactNode;\n size?: 'sm' | 'md' | 'lg' | 'xl';\n className?: string;\n}\n\nexport const LuxuryHeading: React.FC<LuxuryHeadingProps> = ({ \n children, \n size = 'md',\n className = ''\n}) => {\n const sizeClasses = {\n sm: 'text-lg md:text-xl',\n md: 'text-xl md:text-2xl',\n lg: 'text-2xl md:text-3xl',\n xl: 'text-3xl md:text-4xl'\n };\n\n return (\n <h2 \n className={\n font-['Times_New_Roman'] \n leading-tight \n tracking-[-0.01em]\n text-luxury-black\n ${sizeClasses[size]}\n ${className}\n }\n >\n {children}\n </h2>\n );\n};\n\ninterface EditorialTextProps {\n children: React.ReactNode;\n variant?: 'body' | 'caption' | 'detail';\n className?: string; \n}\n\nexport const EditorialText: React.FC<EditorialTextProps> = ({\n children,\n variant = 'body',\n className = ''\n}) => {\n const variantClasses = {\n body: 'text-base leading-relaxed',\n caption: 'text-sm leading-snug',\n detail: 'text-xs uppercase tracking-widest'\n };\n\n return (\n <p \n className={\n font-['Times_New_Roman']\n text-luxury-black\n ${variantClasses[variant]}\n ${className}\n }\n >\n {children}\n </p>\n );\n};\n\ninterface EditorialDividerProps {\n className?: string;\n}\n\nexport const EditorialDivider: React.FC<EditorialDividerProps> = ({\n className = ''\n}) => {\n return (\n <hr \n className={\n border-t\n border-accent-line\n my-8\n ${className}\n }\n />\n );\n};\n\ninterface EditorialContainerProps {\n children: React.ReactNode;\n className?: string;\n}\n\nexport const EditorialContainer: React.FC<EditorialContainerProps> = ({\n children,\n className = ''\n}) => {\n return (\n <div \n className={\n max-w-4xl\n mx-auto\n px-4\n md:px-8\n py-12\n md:py-16\n bg-pure-white\n ${className}\n }\n >\n {children}\n </div>\n );\n};", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/design/index.ts", "content": "export * from './LuxuryComponents';", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/dev-preview-modal.tsx", "content": "import React, { useState } from 'react';\nimport { X, Check, RotateCcw, Copy, Download } from 'lucide-react';\nimport { LiveComponentPreview } from './LiveComponentPreview';\n\ninterface DevPreviewModalProps {\n isOpen: boolean;\n onClose: () => void;\n agentName: string;\n previewData: {\n type: 'component' | 'page' | 'api' | 'database' | 'styling';\n title: string;\n description: string;\n code?: string;\n preview?: string;\n changes?: string[];\n files?: { path: string; content: string; type: 'modified' | 'created' | 'deleted' }[];\n fileContent?: string; // Victoria's component code\n filePath?: string; // The file path for the component\n };\n onApprove: () => void;\n onReject: (feedback?: string) => void;\n}\n\nexport function DevPreviewModal({ \n isOpen, \n onClose, \n agentName, \n previewData, \n onApprove, \n onReject \n}: DevPreviewModalProps) {\n const [feedback, setFeedback] = useState('');\n const [activeTab, setActiveTab] = useState<'preview' | 'code' | 'changes'>('preview');\n\n // Preview modal for agent development work\n \n if (!isOpen) return null;\n\n const copyToClipboard = (text: string) => {\n navigator.clipboard.writeText(text);\n };\n\n return (\n <div className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4">\n <div className="bg-white max-w-6xl w-full max-h-[90vh] overflow-hidden flex flex-col">\n {/ Header /}\n <div className="p-4 border-b border-gray-200 flex items-center justify-between bg-gray-50">\n <div>\n <h3 className="font-serif text-xl">{agentName} Development Preview</h3>\n <p className="text-sm text-gray-600 mt-1">{previewData.title}</p>\n </div>\n <button\n onClick={onClose}\n className="p-2 hover:bg-gray-200 rounded"\n >\n <X className="w-5 h-5" />\n </button>\n </div>\n\n {/ Tab Navigation /}\n <div className="flex border-b border-gray-200 bg-gray-50">\n ", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: and, 📝 Matches: system, 📁 Code file" }, { "fileName": "client/src/components/editorial/EditorialHeading.tsx", "content": "import React from 'react';\n\ninterface EditorialHeadingProps {\n children: React.ReactNode;\n level?: 1 | 2 | 3 | 4;\n className?: string;\n}\n\nexport const EditorialHeading: React.FC<EditorialHeadingProps> = ({\n children,\n level = 1,\n className = ''\n}) => {\n const baseClasses = 'font-serif font-bold text-zinc-900 mb-6 leading-tight';\n \n const sizeClasses = {\n 1: 'text-4xl md:text-5xl lg:text-6xl',\n 2: 'text-3xl md:text-4xl lg:text-5xl',\n 3: 'text-2xl md:text-3xl lg:text-4xl',\n 4: 'text-xl md:text-2xl lg:text-3xl'\n };\n\n const Component = h${level} as keyof JSX.IntrinsicElements;\n\n return (\n <Component className={${baseClasses} ${sizeClasses[level]} ${className}}>\n {children}\n </Component>\n );\n}", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/editorial/EditorialText.tsx", "content": "import React from 'react';\n\ninterface EditorialTextProps {\n children: React.ReactNode;\n size?: 'sm' | 'base' | 'lg';\n weight?: 'normal' | 'medium' | 'bold';\n italic?: boolean;\n}\n\nexport const EditorialText: React.FC<EditorialTextProps> = ({\n children,\n size = 'base',\n weight = 'normal',\n italic = false\n}) => {\n const sizeClasses = {\n sm: 'text-sm md:text-base',\n base: 'text-base md:text-lg',\n lg: 'text-lg md:text-xl'\n };\n\n const weightClasses = {\n normal: 'font-normal',\n medium: 'font-medium',\n bold: 'font-bold'\n };\n\n return (\n <p className={\n font-serif\n ${sizeClasses[size]}\n ${weightClasses[weight]}\n ${italic ? 'italic' : ''}\n text-zinc-800\n leading-relaxed\n mb-6\n }>\n {children}\n </p>\n );\n}", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/editorial/LuxuryHeader.tsx", "content": "import React from 'react';\n\ninterface LuxuryHeaderProps {\n title: string;\n subtitle?: string;\n alignment?: 'left' | 'center';\n}\n\nexport const LuxuryHeader: React.FC<LuxuryHeaderProps> = ({\n title,\n subtitle,\n alignment = 'left'\n}) => {\n return (\n <header className={mb-12 ${alignment === 'center' ? 'text-center' : ''}}>\n <h1 className="font-serif text-4xl md:text-5xl lg:text-6xl text-zinc-900 tracking-tight leading-none mb-4">\n {title}\n </h1>\n {subtitle && (\n <p className="font-serif text-lg md:text-xl text-zinc-600 italic leading-relaxed">\n {subtitle}\n </p>\n )}\n <div className="w-16 h-0.5 bg-zinc-900 mt-6 mb-8" \n style={{marginLeft: alignment === 'center' ? 'auto' : '0', marginRight: alignment === 'center' ? 'auto' : '0'}} />\n </header>\n );\n}", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/editorial-image-break.tsx", "content": "import React from 'react';\n\ninterface EditorialImageBreakProps {\n src: string;\n alt: string;\n height?: 'small' | 'medium' | 'large';\n overlay?: boolean;\n overlayText?: string;\n}\n\nexport const EditorialImageBreak: React.FC<EditorialImageBreakProps> = ({\n src,\n alt,\n height = 'medium',\n overlay = false,\n overlayText\n}) => {\n const heightClass = {\n small: 'h-[30vh]',\n medium: 'h-[40vh]',\n large: 'h-[60vh]'\n }[height];\n\n return (\n <section className={w-full ${heightClass} overflow-hidden relative}>\n <img \n src={src} \n alt={alt} \n className="w-full h-full object-cover editorial-hover"\n loading="lazy"\n />\n \n {overlay && (\n <div className="absolute inset-0 bg-black/40 flex items-center justify-center">\n {overlayText && (\n <blockquote \n className="text-white text-center text-2xl md:text-3xl lg:text-4xl font-light max-w-4xl px-8 md:px-12 leading-tight tracking-[-0.02em] italic"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n "{overlayText}"\n </blockquote>\n )}\n </div>\n )}\n </section>\n );\n};\n", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/editorial-spread.tsx", "content": "import React from 'react';\n\ninterface EditorialSpreadProps {\n leftImage?: string;\n rightImage?: string;\n title?: string;\n description?: string;\n leftCaption?: string;\n rightCaption?: string;\n className?: string;\n}\n\nexport default function EditorialSpread({\n leftImage = "https://images.unsplash.com/photo-1469474968028-56623f02e42e?w=800&h=600&fit=crop",\n rightImage = "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800&h=600&fit=crop",\n title = "Editorial Collection",\n description = "Curated moments that tell your story with editorial sophistication and timeless elegance.",\n leftCaption = "Left Image",\n rightCaption = "Right Image",\n className = ""\n}: EditorialSpreadProps) {\n return (\n <div className={bg-white ${className}}>\n {/ Title Section /}\n <div className="text-center py-16 px-4">\n <h2 \n className="text-4xl md:text-5xl font-light text-black mb-6 tracking-wide"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n {title}\n </h2>\n <div className="max-w-2xl mx-auto">\n <p className="text-lg text-gray-600 leading-relaxed">\n {description}\n </p>\n </div>\n </div>\n\n {/ Image Spread /}\n <div className="grid grid-cols-1 md:grid-cols-2 gap-0">\n {/ Left Image /}\n <div className="relative group overflow-hidden bg-gray-100">\n <div className="aspect-[4/5]">\n <img \n src={leftImage}\n alt={leftCaption}\n className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"\n />\n </div>\n \n {/ Left Caption Overlay /}\n <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-6 md:p-8">\n <p \n className="text-white text-lg font-light tracking-wide"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n ", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/editorial-story.tsx", "content": "import React from 'react';\n\ninterface EditorialStoryProps {\n headline: string;\n paragraphs: string[];\n imageSrc: string;\n imageAlt: string;\n backgroundColor?: string;\n textColor?: string;\n reversed?: boolean;\n button?: {\n text: string;\n href: string;\n variant?: 'primary' | 'secondary';\n };\n}\n\nexport const EditorialStory: React.FC<EditorialStoryProps> = ({\n headline,\n paragraphs,\n imageSrc,\n imageAlt,\n backgroundColor = '#f5f5f5',\n textColor = '#0a0a0a',\n reversed = false,\n button\n}) => {\n return (\n <section className="section-padding" style={{ backgroundColor }}>\n <div className="max-w-7xl mx-auto px-8">\n <div className={grid grid-cols-1 lg:grid-cols-2 gap-16 lg:gap-20 items-center ${reversed ? 'lg:grid-flow-col-dense' : ''}}>\n \n {/ Text Content - Editorial Hierarchy /}\n <div className={${reversed ? 'lg:col-start-2' : ''} editorial-text-layout}>\n \n {/ Main Headline /}\n <h2 \n className="editorial-headline"\n style={{ \n fontWeight: 300, \n letterSpacing: '-0.01em',\n color: textColor,\n fontSize: 'clamp(2.5rem, 6vw, 4rem)',\n lineHeight: 1.1,\n marginBottom: '2rem'\n }}\n >\n {headline}\n </h2>\n \n {/ Subheadline /}\n <h3 \n className="editorial-subheadline system-text"\n style={{ \n fontSize: '1.5rem',\n lineHeight: 1.4,\n fontWeight: 300,\n color: textColor,\n marginBottom: '3rem'\n }}\n >\n One year ago my marriage ended. Single mom, three kids, zero plan.\n </h3>\n\n {/ Tagline with divider /}\n <div className="editorial-tagline" style={{ marginBottom: '3rem' }}>\n <p \n className="system-te", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: system, 📁 Code file" }, { "fileName": "client/src/components/editorial-testimonials.tsx", "content": "interface Testimonial {\n quote: string;\n author: string;\n context?: string;\n featured?: boolean;\n}\n\ninterface EditorialTestimonialsProps {\n testimonials?: Testimonial[];\n backgroundColor?: string;\n className?: string;\n title?: string;\n subtitle?: string;\n}\n\nconst defaultTestimonials: Testimonial[] = [\n {\n quote: "Thank you for sharing your knowledge and being so true. I feel so motivated to start taking pictures of myself. I heard the words that I've always wanted to say but never expressed before. Today, I posted three stories talking about my journey in a raw and authentic way. I'm pursuing my dream. Thank you so much.",\n author: "Olha",\n context: "Community Member",\n featured: true\n },\n {\n quote: "You literally changed my picture taking from boring selfies to professional pictures. Like, HOW?!",\n author: "Sarah",\n context: "Instagram"\n },\n {\n quote: "You're helping me develop my 'just do it' attitude. No more waiting for perfect!",\n author: "Roxanne",\n context: "Studio Member"\n }\n];\n\nexport default function EditorialTestimonials({ \n testimonials = defaultTestimonials,\n backgroundColor = "#F1F1F1",\n className = "",\n title = "Real transformations",\n subtitle = "VOICES FROM THE COMMUNITY"\n}: EditorialTestimonialsProps) {\n return (\n <section \n className={py-20 md:py-32 px-6 md:px-12 lg:px-20 ${className}}\n style={{ backgroundColor }}\n >\n <div className="max-w-6xl mx-auto">\n {/ Header /}\n <div className="text-center mb-16 md:mb-20">\n <span \n className="text-xs tracking-[0.4em] uppercase text-[#B5B5B3] block mb-6 font-inter"\n >\n {subtitle}\n </span>\n <h2 \n className="text-4xl md:text-5xl lg:text-6xl font-light text-[#171719] leading-tight"\n style={{ fontFamily: 'Times New Roman, serif', fontWeight: 300 }}\n >\n {title}\n </h2>\n </div>\n\n {/ Testimonials Grid /}\n ", "reason": "🔑 Client source file, 📝 Matches: and, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/email-capture-modal.tsx", "content": "import React, { useState } from 'react';\nimport { SandraImages } from '@/lib/sandra-images';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface EmailCaptureModalProps {\n isOpen: boolean;\n onClose: () => void;\n onEmailCaptured?: (email: string) => void;\n plan: 'free' | 'sselfie-studio' | 'basic' | 'full-access';\n}\n\nexport const EmailCaptureModal: React.FC<EmailCaptureModalProps> = ({\n isOpen,\n onClose,\n onEmailCaptured,\n plan\n}) => {\n const [email, setEmail] = useState('');\n const [isSubmitting, setIsSubmitting] = useState(false);\n const { toast } = useToast();\n\n const handleSubmit = async (e: React.FormEvent) => {\n e.preventDefault();\n \n if (!email || !email.includes('@')) {\n toast({\n title: "Email Required",\n description: "Please enter a valid email address",\n variant: "destructive",\n });\n return;\n }\n\n setIsSubmitting(true);\n\n try {\n // Send email to your list via Resend\n const response = await fetch('/api/email-capture', {\n method: 'POST',\n headers: {\n 'Content-Type': 'application/json',\n },\n body: JSON.stringify({\n email,\n plan,\n source: 'landing_page'\n }),\n });\n\n if (!response.ok) throw new Error('Failed to capture email');\n\n // Store email captured flag\n localStorage.setItem('emailCaptured', 'true');\n localStorage.setItem('capturedEmail', email);\n \n // Success! Now redirect to authentication\n toast({\n title: "Email Captured!",\n description: "Redirecting to authentication...",\n variant: "default",\n });\n \n if (onEmailCaptured) {\n onEmailCaptured(email);\n }\n \n onClose();\n \n // Redirect to authentication after brief delay for user feedback\n setTimeout(() => {\n window.location.href = '/login';\n }, 1000);\n\n } catch (error) {\n toast({\n title: "Something went wrong",\n descri", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: and, 📝 Matches: authentication, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/enhanced-error-boundary.tsx", "content": "import React from 'react';\nimport { PreLoginNavigationUnified } from '@/components/pre-login-navigation-unified';\nimport { HeroFullBleed } from '@/components/HeroFullBleed';\nimport { SandraImages } from '@/lib/sandra-images';\n\ninterface Props {\n children: React.ReactNode;\n}\n\ninterface State {\n hasError: boolean;\n error: Error | null;\n}\n\nexport class EnhancedErrorBoundary extends React.Component<Props, State> {\n constructor(props: Props) {\n super(props);\n this.state = { hasError: false, error: null };\n }\n\n static getDerivedStateFromError(error: Error): State {\n return { hasError: true, error };\n }\n\n componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n console.error('Error caught by boundary:', error, errorInfo);\n }\n\n render() {\n if (this.state.hasError) {\n return (\n <div className="min-h-screen bg-white">\n <PreLoginNavigationUnified />\n \n <HeroFullBleed\n backgroundImage={SandraImages.editorial.luxury1}\n tagline="Something went wrong"\n title="ERROR"\n ctaText="Try Again"\n onCtaClick={() => window.location.reload()}\n fullHeight={false}\n />\n\n <main className="max-w-4xl mx-auto px-8 py-16">\n <div className="text-center mb-16">\n <h2 className="text-3xl font-light mb-6" style={{ fontFamily: 'Times New Roman, serif' }}>\n We're fixing this right now\n </h2>\n <p className="text-lg text-[#666666] max-w-2xl mx-auto font-light leading-relaxed">\n Something unexpected happened. Don't worry - this doesn't affect your account \n or any work you've saved. Try refreshing the page.\n </p>\n </div>\n\n <div className="bg-[#f5f5f5] p-12 text-center">\n <div className="space-y-6">\n <div>\n <h3 className="text-xl font-light mb-4" style={{ fontFamily: 'Times New Roman, ser", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/enhanced-hero.tsx", "content": "import React from 'react';\nimport { SandraImages } from '@/lib/sandra-images';\n\ninterface EnhancedHeroProps {\n backgroundImage?: string;\n title: string;\n tagline?: string;\n subtitle?: string;\n ctaText?: string;\n ctaSecondaryText?: string;\n onCtaClick?: () => void;\n onCtaSecondaryClick?: () => void;\n fullHeight?: boolean;\n overlay?: boolean;\n textAlign?: 'left' | 'center' | 'right';\n showStats?: boolean;\n stats?: Array<{ number: string; label: string; }>;\n}\n\nexport function EnhancedHero({\n backgroundImage = SandraImages.editorial.luxury1,\n title,\n tagline,\n subtitle,\n ctaText,\n ctaSecondaryText,\n onCtaClick,\n onCtaSecondaryClick,\n fullHeight = true,\n overlay = true,\n textAlign = 'left',\n showStats = false,\n stats = []\n}: EnhancedHeroProps) {\n return (\n <section \n className={relative bg-cover bg-center ${fullHeight ? 'h-screen' : 'h-[70vh]'} flex items-end}\n style={{\n backgroundImage: url(${backgroundImage}),\n }}\n >\n {overlay && (\n <div className="absolute inset-0 bg-black bg-opacity-20" />\n )}\n \n <div className="relative z-10 w-full max-w-7xl mx-auto px-6 pb-16">\n <div className={max-w-2xl ${textAlign === 'center' ? 'mx-auto text-center' : textAlign === 'right' ? 'ml-auto text-right' : ''}}>\n {tagline && (\n <p className="text-xs uppercase tracking-wider text-white opacity-90 mb-4">\n {tagline}\n </p>\n )}\n \n <h1 className="text-6xl md:text-8xl font-light text-white mb-6 leading-tight" style={{ fontFamily: 'Times New Roman, serif' }}>\n {title}\n </h1>\n \n {subtitle && (\n <p className="text-xl text-white opacity-90 mb-8 font-light leading-relaxed">\n {subtitle}\n </p>\n )}\n \n {showStats && stats.length > 0 && (\n <div className="flex space-x-12 mb-8">\n {stats.map((stat, index) => (\n ", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/free-tier-signup.tsx", "content": "import React, { useState } from "react";\nimport { SandraImages } from "@/lib/sandra-images";\nimport { useLocation } from "wouter";\n\nexport default function FreeTierSignup() {\n const [, setLocation] = useLocation();\n const [email, setEmail] = useState("");\n const [isSubmitted, setIsSubmitted] = useState(false);\n const [isLoading, setIsLoading] = useState(false);\n\n const handleSubmit = async (e: React.FormEvent) => {\n e.preventDefault();\n \n // Store email and redirect to login for basic tier\n localStorage.setItem('preSignupEmail', email);\n localStorage.setItem('selectedPlan', 'basic');\n window.location.href = '/login';\n };\n\n const handleDirectSignup = () => {\n localStorage.setItem('selectedPlan', 'basic');\n window.location.href = '/login';\n };\n\n return (\n <section className="py-20 bg-[#f1f1f1]">\n <div className="max-w-6xl mx-auto px-6">\n <div \n className="relative h-[650px] md:h-[600px] overflow-hidden group flex items-center justify-center"\n style={{\n backgroundImage: url(${SandraImages.editorial.laptop1}),\n backgroundSize: 'cover',\n backgroundPosition: 'center',\n backgroundRepeat: 'no-repeat',\n backgroundColor: '#171719'\n }}\n >\n <div className="absolute inset-0 z-10 bg-gradient-to-r from-[#171719]/80 via-[#171719]/60 to-[#171719]/40" />\n \n <div className="relative z-20 text-center px-8 md:px-12 max-w-2xl">\n <div className="text-xs uppercase tracking-[0.4em] text-[#f1f1f1]/70 mb-6">\n Start Basic Today\n </div>\n \n <h2 \n className="text-3xl md:text-5xl lg:text-6xl font-light text-[#f1f1f1] mb-6 leading-tight"\n style={{ fontFamily: 'Times New Roman, serif' }}\n >\n Your personal AI model<br />\n starts here\n </h2>\n \n <p \n className="text-lg md:text", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/global-footer.tsx", "content": "import React from 'react';\nimport { Link } from 'wouter';\nimport { InstallButton } from '@/components/ui/install-button';\n\nexport const GlobalFooter: React.FC = () => {\n return (\n <footer className="bg-black text-white py-16">\n <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">\n <div className="grid grid-cols-1 md:grid-cols-4 gap-12">\n {/ Brand /}\n <div className="md:col-span-1">\n <div className="font-serif text-2xl font-light mb-4">\n SSELFIE STUDIO\n </div>\n <p className="text-white/60 text-sm leading-relaxed mb-6">\n The world's first AI-powered personal branding platform. Transform selfies into complete business launches.\n </p>\n <InstallButton \n className="bg-white text-black hover:bg-gray-100 text-xs uppercase tracking-[0.3em] px-4 py-2"\n />\n </div>\n\n {/ Platform Links /}\n <div>\n <h3 className="text-xs uppercase tracking-[0.3em] text-white/80 mb-6">Platform</h3>\n <ul className="space-y-3">\n <li>\n <Link href="/ai-training" className="text-white/60 hover:text-white transition-colors text-sm">\n Train AI\n </Link>\n </li>\n <li>\n <Link href="/maya" className="text-white/60 hover:text-white transition-colors text-sm">\n Maya Photoshoot\n </Link>\n </li>\n <li>\n <Link href="/gallery" className="text-white/60 hover:text-white transition-colors text-sm">\n Gallery\n </Link>\n </li>\n <li>\n <Link href="/flatlay-library" className="text-white/60 hover:text-white transition-colors text-sm">\n Flatlay Library\n </Link>\n </li>\n </ul>\n </div>\n\n {/ Contact Info /}\n <div>\n", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: admin, 💻 Code: admin, 📁 Code file" }, { "fileName": "client/src/components/hero-full-bleed.tsx", "content": "import React from 'react';\nimport { SandraImages } from '@/lib/sandra-images';\n\ninterface HeroFullBleedProps {\n backgroundImage: string;\n tagline?: string; // The small top text\n title: string | React.ReactNode;\n subtitle?: string; // For long last names or secondary text\n ctaText?: string;\n ctaLink?: string;\n onCtaClick?: () => void;\n overlay?: number;\n alignment?: 'left' | 'center';\n fullHeight?: boolean;\n}\n\nexport const HeroFullBleed: React.FC<HeroFullBleedProps> = ({\n backgroundImage,\n tagline,\n title,\n subtitle,\n ctaText,\n ctaLink,\n onCtaClick,\n overlay = 0.6,\n alignment = 'center',\n fullHeight = true\n}) => {\n const handleCtaClick = () => {\n if (onCtaClick) {\n onCtaClick();\n } else if (ctaLink) {\n window.location.href = ctaLink;\n }\n };\n\n return (\n <section \n className={relative w-screen ${fullHeight ? 'h-screen' : 'min-h-[500px] sm:min-h-[600px] md:min-h-[700px]'} flex items-center overflow-hidden}\n style={{ \n marginLeft: 'calc(-50vw + 50%)',\n marginRight: 'calc(-50vw + 50%)',\n maxWidth: '100vw'\n }}\n >\n {/ Background Image /}\n <div className="absolute inset-0 z-0">\n <img \n src={backgroundImage} \n alt=""\n className="w-full h-full object-cover editorial-hover"\n />\n </div>\n \n {/ Gradient Overlay /}\n <div \n className="absolute inset-0 z-10 bg-black"\n style={{ opacity: overlay }}\n />\n \n {/ Content Container - positioned lower with responsive spacing /}\n <div className="relative z-20 w-full h-full flex items-end justify-center">\n <div className={max-w-6xl mx-auto px-6 sm:px-8 md:px-12 ${alignment === 'center' ? 'text-center' : 'text-left-desktop'} pb-12 sm:pb-16 md:pb-24 lg:pb-32}>\n \n {/ Top Tagline */}\n {tagline && (\n <p className="eyebrow-responsive text-white/60 mb-4 sm:mb-6 font-light font-inter">\n {tagline}\n ", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/inline-email-capture.tsx", "content": "import React, { useState } from 'react';\nimport { SandraImages } from '@/lib/sandra-images';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface InlineEmailCaptureProps {\n plan: 'free' | 'sselfie-studio' | 'basic' | 'full-access';\n onEmailCaptured?: (email: string) => void;\n}\n\nexport const InlineEmailCapture: React.FC<InlineEmailCaptureProps> = ({\n plan,\n onEmailCaptured\n}) => {\n const [email, setEmail] = useState('');\n const [isSubmitting, setIsSubmitting] = useState(false);\n const { toast } = useToast();\n\n const handleSubmit = async (e: React.FormEvent) => {\n e.preventDefault();\n \n if (!email || !email.includes('@')) {\n toast({\n title: "Email Required",\n description: "Please enter a valid email address",\n variant: "destructive",\n });\n return;\n }\n\n setIsSubmitting(true);\n\n try {\n // Send email to your list via Resend\n const response = await fetch('/api/email-capture', {\n method: 'POST',\n headers: {\n 'Content-Type': 'application/json',\n },\n body: JSON.stringify({\n email,\n plan,\n source: 'inline_form'\n }),\n });\n\n if (!response.ok) throw new Error('Failed to capture email');\n\n // Store email captured flag\n localStorage.setItem('emailCaptured', 'true');\n localStorage.setItem('capturedEmail', email);\n \n // Success! Now redirect to authentication\n toast({\n title: "Email Captured!",\n description: "Redirecting to authentication...",\n variant: "default",\n });\n \n if (onEmailCaptured) {\n onEmailCaptured(email);\n }\n \n // Redirect to authentication after brief delay for user feedback\n setTimeout(() => {\n window.location.href = '/login';\n }, 1000);\n\n } catch (error) {\n toast({\n title: "Something went wrong",\n description: "Please try again or contact support",\n variant: "destructive",\n }", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: and, 📝 Matches: authentication, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/integration/ServiceTemplateWizard.tsx", "content": "/\n * SERVICE TEMPLATE WIZARD COMPONENT\n * Luxury editorial interface for service integration\n * Generated by Aria - Luxury Design Authority\n /\n\nimport React, { useState } from 'react';\nimport { motion } from 'framer-motion';\n\nexport interface ServiceTemplate {\n id: string;\n name: string;\n description: string;\n category: 'payment' | 'email' | 'analytics' | 'storage' | 'auth';\n requiredSecrets: string[];\n configSteps: IntegrationStep[];\n}\n\nexport interface IntegrationStep {\n id: string;\n title: string;\n description: string;\n required: boolean;\n completed: boolean;\n}\n\ninterface WizardProps {\n templates: ServiceTemplate[];\n onComplete: (template: ServiceTemplate) => void;\n onCancel: () => void;\n}\n\nexport const ServiceTemplateWizard: React.FC<WizardProps> = ({ \n templates, \n onComplete, \n onCancel \n}) => {\n const [selectedTemplate, setSelectedTemplate] = useState<ServiceTemplate | null>(null);\n const [currentStep, setCurrentStep] = useState(0);\n\n const handleTemplateSelect = (template: ServiceTemplate) => {\n setSelectedTemplate(template);\n };\n\n const handleStepComplete = () => {\n if (selectedTemplate && currentStep < selectedTemplate.configSteps.length - 1) {\n setCurrentStep(currentStep + 1);\n } else if (selectedTemplate) {\n onComplete(selectedTemplate);\n }\n };\n\n return (\n <div className="min-h-screen bg-[#0a0a0a] text-[#f5f5f5] p-8">\n <div className="max-w-6xl mx-auto">\n {/ Header /}\n <header className="mb-12">\n <h1 className="font-serif text-5xl text-white mb-4">\n Service Integration\n </h1>\n <p className="text-lg text-[#f5f5f5] font-light">\n Configure professional service integrations with editorial precision\n </p>\n </header>\n\n {!selectedTemplate ? (\n / Template Selection */\n <motion.div \n initial={{ opacity: 0, y: 20 }}\n animate={{ opacity: 1, y: 0 }}\n className="grid grid-c", "reason": "🔑 Client source file, 📝 Matches: and, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/launch/LuxuryBrandAudit.tsx", "content": "import React from 'react';\nimport styled from 'styled-components';\n\nconst LuxuryContainer = styled.div\n background: #ffffff;\n color: #0a0a0a;\n padding: 4rem;\n max-width: 1200px;\n margin: 0 auto;\n;\n\nconst LuxuryHeading = styled.h1\n font-family: \"Times New Roman\", serif;\n font-size: 3.5rem;\n font-weight: 400;\n letter-spacing: -0.02em;\n margin-bottom: 3rem;\n color: #0a0a0a;\n;\n\nconst AuditSection = styled.section\n margin: 4rem 0;\n border-bottom: 1px solid #f5f5f5;\n padding-bottom: 3rem;\n;\n\nconst SectionTitle = styled.h2\n font-family: \"Times New Roman\", serif;\n font-size: 2rem;\n font-weight: 400;\n margin-bottom: 2rem;\n color: #0a0a0a;\n;\n\nconst AuditText = styled.p\n font-family: \"Times New Roman\", serif;\n font-size: 1.125rem;\n line-height: 1.8;\n margin-bottom: 1.5rem;\n color: #0a0a0a;\n;\n\nconst AuditGrid = styled.div\n display: grid;\n grid-template-columns: repeat(2, 1fr);\n gap: 3rem;\n margin: 2rem 0;\n;\n\nconst AuditCard = styled.div\n background: #f5f5f5;\n padding: 2rem;\n;\n\nconst MetricValue = styled.div\n font-family: \"Times New Roman\", serif;\n font-size: 2.5rem;\n margin: 1rem 0;\n color: #0a0a0a;\n;\n\nconst LuxuryBrandAudit: React.FC = () => {\n return (\n <LuxuryContainer>\n <LuxuryHeading>Luxury Brand Performance Audit</LuxuryHeading>\n \n <AuditSection>\n <SectionTitle>Brand Positioning Analysis</SectionTitle>\n <AuditText>\n A comprehensive evaluation of your luxury market positioning, competitive advantage,\n and brand narrative effectiveness in the high-end segment.\n </AuditText>\n \n <AuditGrid>\n <AuditCard>\n <SectionTitle>Brand Recognition</SectionTitle>\n <MetricValue>94%</MetricValue>\n <AuditText>Premium market recognition score</AuditText>\n </AuditCard>\n \n <AuditCard>\n <SectionTitle>Luxury Perception</SectionTitle>\n <MetricValue>4.8/5</MetricValue>\n <AuditTe", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/loading-screen.tsx", "content": "import React from 'react';\nimport { PreLoginNavigationUnified } from '@/components/pre-login-navigation-unified';\nimport { SandraImages } from '@/lib/sandra-images';\n\ninterface LoadingScreenProps {\n message?: string;\n showNavigation?: boolean;\n}\n\nexport function LoadingScreen({ message = "Loading...", showNavigation = true }: LoadingScreenProps) {\n return (\n <div className="min-h-screen bg-white">\n {showNavigation && <PreLoginNavigationUnified />}\n \n <div className="min-h-screen flex items-center justify-center">\n <div className="text-center">\n <div className="mb-8">\n <div className="animate-spin w-12 h-12 border-4 border-[#0a0a0a] border-t-transparent rounded-full mx-auto"></div>\n </div>\n \n <h2 className="text-2xl font-light mb-4 text-[#0a0a0a]" style={{ fontFamily: 'Times New Roman, serif' }}>\n {message}\n </h2>\n \n <p className="text-sm text-[#666666] max-w-md mx-auto">\n Building something beautiful takes a moment. Thank you for your patience.\n </p>\n </div>\n </div>\n </div>\n );\n}\n\nexport function InlineLoader({ message = "Loading..." }: { message?: string }) {\n return (\n <div className="flex items-center justify-center py-16">\n <div className="text-center">\n <div className="animate-spin w-8 h-8 border-4 border-[#0a0a0a] border-t-transparent rounded-full mx-auto mb-4"></div>\n <p className="text-sm text-[#666666]">{message}</p>\n </div>\n </div>\n );\n}\n\nexport function ProcessingLoader({ \n title = "Processing...", \n steps = [], \n currentStep = 0 \n}: { \n title?: string; \n steps?: string[]; \n currentStep?: number; \n}) {\n return (\n <div className="min-h-screen bg-white flex items-center justify-center">\n <div className="text-center max-w-md">\n <div className="mb-8">\n <div className="animate-spin w-12 h-12 border-4 border-[#0a0a0a] border-t-transparent rounded-full m", "reason": "🔑 Client source file, 📝 Matches: and, 📁 Code file" }, { "fileName": "client/src/components/luxury/AriaEditorialShowcase.tsx", "content": "import React from 'react';\nimport { cn } from "@/lib/utils";\n\nconst AriaEditorialShowcase: React.FC = () => {\n return (\n <div className="bg-white py-16 px-8 max-w-6xl mx-auto">\n <h1 className="font-serif text-5xl font-normal text-black tracking-tight leading-tight mb-8">\n The Art of Luxury Transformation\n </h1>\n \n <div className="bg-gray-50 p-12 my-8 border border-black">\n <p className="font-serif text-xl leading-relaxed text-black mb-6">\n From rock bottom to empire, every journey begins with a single step into transformation. \n This is where ambition meets destiny, where your future self emerges from the shadows of doubt.\n </p>\n </div>\n\n <div className="bg-gray-50 p-12 my-8 border border-black">\n <p className="font-serif text-xl leading-relaxed text-black mb-6">\n Embrace the power of your narrative. Your story, crafted with intention, \n becomes the foundation of your legacy. This is more than change – \n this is metamorphosis.\n </p>\n </div>\n </div>\n );\n};\n\nexport default AriaEditorialShowcase;", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/luxury/LuxuryCard.tsx", "content": "import React from 'react';\nimport { cn } from "@/lib/utils";\n\ninterface LuxuryCardProps {\n children: React.ReactNode;\n className?: string;\n variant?: "default" | "elevated" | "editorial" | "minimal";\n padding?: "none" | "sm" | "md" | "lg" | "xl";\n border?: boolean;\n background?: "white" | "gray" | "transparent";\n}\n\nexport const LuxuryCard: React.FC<LuxuryCardProps> = ({\n children,\n className,\n variant = "default",\n padding = "md",\n border = true,\n background = "white",\n ...props\n}) => {\n // Variant styling - pure editorial luxury\n const variantClasses = {\n default: "bg-white border border-black",\n elevated: "bg-white border border-black shadow-lg",\n editorial: "bg-gray-50 border border-black",\n minimal: "bg-transparent border-0"\n };\n\n // Padding scales - generous whitespace\n const paddingClasses = {\n none: "",\n sm: "p-4 md:p-6",\n md: "p-6 md:p-8",\n lg: "p-8 md:p-12",\n xl: "p-12 md:p-16"\n };\n\n // Background variations\n const backgroundClasses = {\n white: "bg-white",\n gray: "bg-gray-50", \n transparent: "bg-transparent"\n };\n\n return (\n <div\n className={cn(\n // Base editorial styling\n "transition-all duration-300",\n "font-serif", // Times New Roman globally\n \n // Variant styling\n variant !== "minimal" && variantClasses[variant],\n variant === "minimal" && backgroundClasses[background],\n \n // Padding\n paddingClasses[padding],\n \n // Border override\n !border && "border-0",\n \n // Custom className\n className\n )}\n style={{ fontFamily: 'Times New Roman, serif' }}\n {...props}\n >\n {children}\n </div>\n );\n};\n\n// Editorial Card Header Component\ninterface LuxuryCardHeaderProps {\n title: string;\n subtitle?: string;\n className?: string;\n titleSize?: "sm" | "md" | "lg" | "xl";\n}\n\nexport const LuxuryCardHeader: React.FC<LuxuryCardHeaderProps> = ({\n title,\n subtitle,\n className,\n", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/luxury/LuxuryHeading.tsx", "content": "import { cn } from "@/lib/utils";\n\ninterface LuxuryHeadingProps {\n children: React.ReactNode;\n className?: string;\n size?: "sm" | "md" | "lg" | "xl";\n as?: "h1" | "h2" | "h3" | "h4";\n}\n\nexport const LuxuryHeading = ({\n children,\n className,\n size = "lg",\n as: Component = "h2",\n}: LuxuryHeadingProps) => {\n const sizeClasses = {\n sm: "text-xl md:text-2xl",\n md: "text-2xl md:text-3xl",\n lg: "text-3xl md:text-4xl",\n xl: "text-4xl md:text-5xl"\n };\n\n return (\n <Component\n className={cn(\n "font-serif tracking-tight", // Times New Roman\n "leading-tight",\n sizeClasses[size],\n className\n )}\n >\n {children}\n </Component>\n );\n}", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/luxury/LuxurySection.tsx", "content": "import { cn } from "@/lib/utils";\n\ninterface LuxurySectionProps {\n children: React.ReactNode;\n className?: string;\n fullWidth?: boolean;\n dark?: boolean;\n}\n\nexport const LuxurySection = ({\n children,\n className,\n fullWidth = false,\n dark = false,\n}: LuxurySectionProps) => {\n return (\n <section \n className={cn(\n "py-16 px-8",\n dark ? "bg-black text-white" : "bg-white text-black",\n fullWidth ? "w-full" : "max-w-7xl mx-auto",\n "font-serif", // Times New Roman\n className\n )}\n >\n {children}\n </section>\n );\n}", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/luxury/LuxuryText.tsx", "content": "import { cn } from "@/lib/utils";\n\ninterface LuxuryTextProps {\n children: React.ReactNode;\n className?: string;\n size?: "sm" | "base" | "lg";\n as?: "p" | "span";\n}\n\nexport const LuxuryText = ({\n children,\n className,\n size = "base",\n as: Component = "p",\n}: LuxuryTextProps) => {\n const sizeClasses = {\n sm: "text-sm md:text-base",\n base: "text-base md:text-lg",\n lg: "text-lg md:text-xl"\n };\n\n return (\n <Component\n className={cn(\n "font-serif", // Times New Roman\n "leading-relaxed",\n "text-neutral-800",\n sizeClasses[size],\n className\n )}\n >\n {children}\n </Component>\n );\n}", "reason": "🔑 Client source file, 📁 Code file" }, { "fileName": "client/src/components/member-navigation.tsx", "content": "import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/use-auth';\n\ninterface MemberNavigationProps {\n transparent?: boolean;\n}\n\nexport function MemberNavigation({ transparent = true }: MemberNavigationProps) {\n const [, setLocation] = useLocation();\n const [location] = useLocation();\n const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n const [scrolled, setScrolled] = useState(false);\n const { user } = useAuth();\n\n useEffect(() => {\n const handleScroll = () => {\n const isScrolled = window.scrollY > 50;\n setScrolled(isScrolled);\n };\n\n window.addEventListener('scroll', handleScroll);\n return () => window.removeEventListener('scroll', handleScroll);\n }, []);\n\n // Ensure page starts at top\n useEffect(() => {\n window.scrollTo(0, 0);\n }, []);\n\n const isActive = (path: string) => {\n if (path === '/workspace' && (location === '/workspace' || location === '/studio')) return true;\n if (path !== '/workspace' && location.startsWith(path)) return true;\n return false;\n };\n\n // Check if user is admin (Sandra) or if we're in impersonation mode\n const isAdmin = user?.email === 'ssa@ssasocial.com';\n const isImpersonating = user?.email === 'shannon@soulresets.com' && user?.role === 'user';\n\n // Member navigation items - CLEAN (no admin access)\n // MEMBER NAVIGATION - NO ADMIN ACCESS (Use footer Legal section)\n const navItems = [\n { path: '/workspace', label: 'Studio' },\n { path: '/ai-training', label: 'Train' },\n { path: '/maya', label: 'Photoshoot' },\n { path: '/gallery', label: 'Gallery' },\n { path: '/flatlay-library', label: 'Flatlays' },\n { path: '/profile', label: 'Profile' },\n ];\n\n const handleLogout = () => {\n window.location.href = '/api/logout';\n };\n\n\n\n return (\n <nav className={fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${\n scrolled || !transparent ? 'bg-black/80 backdrop-blur-md' : 'bg-transparen", "reason": "🔑 Client source file, 📝 Matches: api, 📝 Matches: and, 📝 Matches: admin, 💻 Code: admin, 💻 Code: auth, 📁 Code file" }, { "fileName": "client/src/components/moodboard-gallery.tsx", "content": "import React from 'react';\nimport { EditorialImage } from './sandra-image-library';\n\ninterface MoodboardItem {\n src: string;\n alt: string;\n span: 3 | 4 | 6 | 8 | 12;\n aspectRatio?: 'square' | 'wide' | 'tall';\n overlayText?: string;\n overlayTitle?: string;\n}\n\ninterface MoodboardGalleryProps {\n items: MoodboardItem[];\n className?: string;\n}\n\nexport const MoodboardGallery: React.FC<MoodboardGalleryProps> = ({\n items,\n className = \"\"\n}) => {\n return (\n <section className={portfolio-grid bg-[var(--editorial-gray)] p-2 ${className}}>\n {items.map((item, index) => (\n <div key={index} className={grid-item span-${item.span} ${item.aspectRatio ? aspect-${item.aspectRatio} : 'aspect-square'}`}>\n <img \n src={item.src} \n alt={item.alt} \n className="w-full h-full object-cover editorial-hover"\n loading="lazy"\n />\n \n {(item.overlayText || item.overlayTitle) && (\n <div className="text-overlay flex items-center justify-center">\n <div className="text-center">\n {item.overlayTitle && (\n <h3 className="editorial-headline text-4xl font-light text-[var(--luxury-black)] mb-4">\n {item.overlayTitle}\n </h3>\n )}\n {item.overlayText && (\n <p className="text-[var(--soft-gray)] system-text">\n {item.overlayText}\n </p>\n )}\n </div>\n </div>\n )}\n </div>\n ))}\n </section>\n );\n};\n", "reason": "🔑 Client source file, 📝 Matches: and, 📝 Matches: system, 📁 Code file" } ], "totalFiles": 100, "accessLevel": "UNLIMITED", "note": "Complete repository access enabled - all agents can see entire codebase. Search hit maximum limit - refine query for specific files.", "searchStats": { "filesAnalyzed": 100, "maxCapacity": 100, "hitLimit": true, "suggestion": "Use more specific search terms to find exact files" } }