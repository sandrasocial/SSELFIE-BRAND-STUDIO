ROOT CAUSE ANALYSIS: WHY AGENTS BREAK RULES

COGNITIVE OVERLOAD
Problem: Agents juggle multiple mental models
Result: Default to familiar patterns instead of project standards
Impact: Create files where they "feel right" rather than where they belong
Solution: Simplify mental model with clear domain boundaries
UNCLEAR OWNERSHIP
Problem: Overlapping responsibilities between agents
Result: Multiple agents modify same areas without coordination
Impact: Duplicate functionality and conflicting implementations
Solution: Define strict domain ownership
TASK TUNNEL VISION
Problem: Agents focus on immediate task completion
Result: Ignore broader architectural implications
Impact: Create expedient but incorrect file locations
Solution: Implement pre-task architectural review
MISSING CONTEXT
Problem: Agents lack full architectural understanding
Result: Make assumptions about where files belong
Impact: Misplace files between api/ and server/
Solution: Provide clear context maps
WORKFLOW FRICTION
Problem: Correct paths require extra effort
Result: Choose path of least resistance
Impact: Create files in convenient but wrong locations
Solution: Make correct paths the easiest choice
üéØ PREVENTION STRATEGY

MENTAL MODEL SIMPLIFICATION
// tools/architectural-guide.ts
export const DOMAIN_MAP = {
  API: {
    purpose: "External interface endpoints only",
    belongsHere: ["REST controllers", "API routes", "Request handlers"],
    doesntBelongHere: ["Business logic", "Database queries", "UI components"]
  },
  SERVER: {
    purpose: "Core business logic and services",
    belongsHere: ["Service implementations", "Database operations", "Business rules"],
    doesntBelongHere: ["API endpoints", "UI logic", "Frontend code"]
  }
};
CLEAR OWNERSHIP BOUNDARIES
// tools/domain-ownership.ts
export const DOMAIN_OWNERSHIP = {
  API_ENDPOINTS: {
    owner: "elena",
    canModify: ["elena", "zara"],
    reviewRequired: true
  },
  BUSINESS_LOGIC: {
    owner: "rachel",
    canModify: ["rachel", "elena"],
    reviewRequired: true
  },
  UI_COMPONENTS: {
    owner: "victoria",
    canModify: ["victoria", "maya"],
    reviewRequired: true
  }
};
PRE-TASK CHECKLIST
// tools/task-checklist.ts
export const ARCHITECTURAL_CHECKLIST = {
  beforeStarting: [
    "Identify correct domain",
    "Check ownership permissions",
    "Review existing implementations",
    "Understand file location rules"
  ],
  duringDevelopment: [
    "Follow naming conventions",
    "Maintain TypeScript types",
    "Avoid duplicate functionality",
    "Document architectural decisions"
  ]
};
CONTEXT MAPPING
// tools/context-map.ts
export const FILE_LOCATION_GUIDE = {
  controllers: {
    location: "/api/controllers",
    purpose: "Handle HTTP requests",
    example: "UserController.ts"
  },
  services: {
    location: "/server/services",
    purpose: "Implement business logic",
    example: "AuthenticationService.ts"
  },
  components: {
    location: "/client/src/components",
    purpose: "Reusable UI elements",
    example: "Button.tsx"
  }
};
FRICTION REDUCTION
// tools/path-validator.ts
export const PATH_VALIDATOR = {
  automaticChecks: [
    "File location compliance",
    "Ownership verification",
    "Duplicate detection",
    "TypeScript compilation"
  ],
  beforeCommit: [
    "Structure validation",
    "Type checking",
    "Ownership confirmation",
    "Documentation presence"
  ]
};
üîç IMPLEMENTATION RECOMMENDATIONS:

IMMEDIATE ACTIONS (No Code Changes):
Document clear domain boundaries
Create ownership matrix
Establish pre-task review process
Set up architectural guidelines
AGENT TRAINING:
Regular architecture reviews
Domain ownership workshops
Best practices sessions
Common pitfalls awareness
MONITORING PLAN:
Regular structure audits
Ownership compliance checks
TypeScript compilation reports
Duplicate code detection
PREVENTION TOOLS:
Path validation guides
Ownership verification docs
Pre-commit checklists
Architecture decision records