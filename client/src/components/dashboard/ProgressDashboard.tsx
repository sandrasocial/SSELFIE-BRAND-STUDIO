/**
 * PROGRESS DASHBOARD COMPONENT
 * Real-time visualization of multi-agent work progress
 * Generated by Aria with hybrid Claude API system
 */

import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { implementationTracker, ImplementationMetrics } from '@/services/implementation-tracker';

export interface AgentWork {
  agentId: string;
  task: string;
  status: 'idle' | 'working' | 'completed' | 'error';
  progress: number;
  timestamp: string;
  value: number;
}

export interface ProgressMetrics {
  totalTasks: number;
  completedTasks: number;
  activeTasks: number;
  systemHealth: number;
  responseTime: number;
}

interface DashboardProps {
  metrics: ProgressMetrics;
  agentWork: AgentWork[];
}

export const ProgressDashboard: React.FC<DashboardProps> = ({ 
  metrics, 
  agentWork 
}) => {
  const [implementationMetrics, setImplementationMetrics] = useState<ImplementationMetrics | null>(null);
  const [realTimeUpdates, setRealTimeUpdates] = useState<string[]>([]);

  useEffect(() => {
    // Update implementation metrics
    const updateMetrics = () => {
      setImplementationMetrics(implementationTracker.getMetrics());
    };

    updateMetrics();
    const interval = setInterval(updateMetrics, 2000);

    // Listen for real-time updates
    const handleUpdate = (event: CustomEvent) => {
      const { component } = event.detail;
      setRealTimeUpdates(prev => [
        `${new Date().toLocaleTimeString()}: ${component} completed`,
        ...prev.slice(0, 9)
      ]);
    };

    window.addEventListener('implementation-update', handleUpdate as EventListener);

    return () => {
      clearInterval(interval);
      window.removeEventListener('implementation-update', handleUpdate as EventListener);
    };
  }, []);

  const getStatusColor = (status: AgentWork['status']) => {
    switch (status) {
      case 'working': return 'text-blue-400';
      case 'completed': return 'text-green-400';
      case 'error': return 'text-red-400';
      default: return 'text-[#f5f5f5]';
    }
  };

  const getStatusIcon = (status: AgentWork['status']) => {
    switch (status) {
      case 'working': return '⚡';
      case 'completed': return '✅';
      case 'error': return '❌';
      default: return '⏸️';
    }
  };

  return (
    <div className="bg-[#0a0a0a] text-[#f5f5f5] p-8 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <header className="mb-12">
          <h1 className="font-serif text-5xl text-white mb-4">
            Progress Overview
          </h1>
          <p className="text-lg font-light">
            Real-time monitoring of multi-agent collaboration
          </p>
        </header>

        {/* Metrics Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-[#111] border border-[#333] p-6"
          >
            <h3 className="text-sm uppercase tracking-wider text-[#f5f5f5] mb-2">
              Total Tasks
            </h3>
            <div className="text-3xl font-serif text-white mb-1">
              {metrics.totalTasks}
            </div>
            <div className="text-xs text-[#f5f5f5]">
              System-wide operations
            </div>
          </motion.div>

          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="bg-[#111] border border-[#333] p-6"
          >
            <h3 className="text-sm uppercase tracking-wider text-[#f5f5f5] mb-2">
              Completed
            </h3>
            <div className="text-3xl font-serif text-green-400 mb-1">
              {metrics.completedTasks}
            </div>
            <div className="text-xs text-[#f5f5f5]">
              Successfully finished
            </div>
          </motion.div>

          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="bg-[#111] border border-[#333] p-6"
          >
            <h3 className="text-sm uppercase tracking-wider text-[#f5f5f5] mb-2">
              Active Tasks
            </h3>
            <div className="text-3xl font-serif text-blue-400 mb-1">
              {metrics.activeTasks}
            </div>
            <div className="text-xs text-[#f5f5f5]">
              Currently processing
            </div>
          </motion.div>

          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
            className="bg-[#111] border border-[#333] p-6"
          >
            <h3 className="text-sm uppercase tracking-wider text-[#f5f5f5] mb-2">
              System Health
            </h3>
            <div className="text-3xl font-serif text-white mb-1">
              {metrics.systemHealth}%
            </div>
            <div className="text-xs text-[#f5f5f5]">
              Overall performance
            </div>
          </motion.div>
        </div>

        {/* Implementation Progress */}
        {implementationMetrics && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="bg-[#111] border border-[#333] p-8 mb-8"
          >
            <h2 className="font-serif text-2xl text-white mb-6">
              Enhancement Implementation
            </h2>
            
            <div className="mb-6">
              <div className="flex justify-between items-center mb-2">
                <span className="text-sm text-[#f5f5f5]">Overall Progress</span>
                <span className="text-sm font-medium text-white">
                  {implementationMetrics.progressPercentage.toFixed(1)}%
                </span>
              </div>
              <div className="w-full bg-[#1a1a1a] h-2">
                <motion.div 
                  initial={{ width: 0 }}
                  animate={{ width: `${implementationMetrics.progressPercentage}%` }}
                  className="bg-white h-full"
                  transition={{ duration: 0.5 }}
                />
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <h3 className="text-sm font-medium text-white mb-2">Completed</h3>
                <div className="text-2xl font-serif text-green-400">
                  {implementationMetrics.completedComponents}
                </div>
              </div>
              <div>
                <h3 className="text-sm font-medium text-white mb-2">Total Components</h3>
                <div className="text-2xl font-serif text-white">
                  {implementationMetrics.totalComponents}
                </div>
              </div>
              <div>
                <h3 className="text-sm font-medium text-white mb-2">Active Agents</h3>
                <div className="text-sm text-[#f5f5f5]">
                  {implementationMetrics.agentsActive.join(', ') || 'None'}
                </div>
              </div>
            </div>
          </motion.div>
        )}

        {/* Agent Activity */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="bg-[#111] border border-[#333] p-8"
          >
            <h2 className="font-serif text-2xl text-white mb-6">
              Agent Activity
            </h2>
            
            <div className="space-y-4">
              {agentWork.map((work, index) => (
                <div key={`${work.agentId}-${index}`} className="flex items-center justify-between p-4 bg-[#1a1a1a] border border-[#333]">
                  <div className="flex items-center space-x-3">
                    <span className="text-lg">{getStatusIcon(work.status)}</span>
                    <div>
                      <div className="font-medium text-white">{work.agentId}</div>
                      <div className="text-sm text-[#f5f5f5]">{work.task}</div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className={`text-sm font-medium ${getStatusColor(work.status)}`}>
                      {work.status}
                    </div>
                    <div className="text-xs text-[#f5f5f5]">
                      {work.progress}%
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </motion.div>

          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="bg-[#111] border border-[#333] p-8"
          >
            <h2 className="font-serif text-2xl text-white mb-6">
              Real-time Updates
            </h2>
            
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {realTimeUpdates.map((update, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="text-sm text-[#f5f5f5] p-2 bg-[#1a1a1a] border-l-2 border-white"
                >
                  {update}
                </motion.div>
              ))}
              {realTimeUpdates.length === 0 && (
                <div className="text-sm text-[#f5f5f5] italic">
                  No recent updates
                </div>
              )}
            </div>
          </motion.div>
        </div>
      </div>
    </div>
  );
};