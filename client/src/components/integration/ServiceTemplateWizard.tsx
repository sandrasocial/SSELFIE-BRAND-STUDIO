/**
 * SERVICE TEMPLATE WIZARD COMPONENT
 * Luxury editorial interface for service integration
 * Generated by Aria - Luxury Design Authority
 */

import React, { useState } from 'react';
import { motion } from 'framer-motion';

export interface ServiceTemplate {
  id: string;
  name: string;
  description: string;
  category: 'payment' | 'email' | 'analytics' | 'storage' | 'auth';
  requiredSecrets: string[];
  configSteps: IntegrationStep[];
}

export interface IntegrationStep {
  id: string;
  title: string;
  description: string;
  required: boolean;
  completed: boolean;
}

interface WizardProps {
  templates: ServiceTemplate[];
  onComplete: (template: ServiceTemplate) => void;
  onCancel: () => void;
}

export const ServiceTemplateWizard: React.FC<WizardProps> = ({ 
  templates, 
  onComplete, 
  onCancel 
}) => {
  const [selectedTemplate, setSelectedTemplate] = useState<ServiceTemplate | null>(null);
  const [currentStep, setCurrentStep] = useState(0);

  const handleTemplateSelect = (template: ServiceTemplate) => {
    setSelectedTemplate(template);
  };

  const handleStepComplete = () => {
    if (selectedTemplate && currentStep < selectedTemplate.configSteps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else if (selectedTemplate) {
      onComplete(selectedTemplate);
    }
  };

  return (
    <div className="min-h-screen bg-[#0a0a0a] text-[#f5f5f5] p-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <header className="mb-12">
          <h1 className="font-serif text-5xl text-white mb-4">
            Service Integration
          </h1>
          <p className="text-lg text-[#f5f5f5] font-light">
            Configure professional service integrations with editorial precision
          </p>
        </header>

        {!selectedTemplate ? (
          /* Template Selection */
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
          >
            {templates.map((template) => (
              <motion.div
                key={template.id}
                whileHover={{ scale: 1.02 }}
                className="border border-[#333] hover:border-white transition-all duration-300 p-8 cursor-pointer"
                onClick={() => handleTemplateSelect(template)}
              >
                <div className="mb-6">
                  <h2 className="font-serif text-2xl text-white mb-3">
                    {template.name}
                  </h2>
                  <span className="text-xs uppercase tracking-wider text-[#f5f5f5] bg-[#1a1a1a] px-3 py-1">
                    {template.category}
                  </span>
                </div>
                
                <p className="text-[#f5f5f5] font-light mb-6 leading-relaxed">
                  {template.description}
                </p>
                
                <div className="space-y-2 mb-6">
                  <h3 className="text-sm font-medium text-white">Required Configuration:</h3>
                  {template.requiredSecrets.slice(0, 3).map((secret) => (
                    <div key={secret} className="text-xs text-[#f5f5f5]">
                      • {secret}
                    </div>
                  ))}
                  {template.requiredSecrets.length > 3 && (
                    <div className="text-xs text-[#f5f5f5]">
                      • +{template.requiredSecrets.length - 3} more
                    </div>
                  )}
                </div>
                
                <button className="w-full border border-[#333] hover:border-white hover:bg-white hover:text-black transition-all duration-300 py-3 text-sm font-medium">
                  Configure Integration
                </button>
              </motion.div>
            ))}
          </motion.div>
        ) : (
          /* Configuration Steps */
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="max-w-4xl mx-auto"
          >
            <div className="mb-8">
              <button
                onClick={() => setSelectedTemplate(null)}
                className="text-[#f5f5f5] hover:text-white transition-colors mb-6"
              >
                ← Back to Templates
              </button>
              
              <h2 className="font-serif text-3xl text-white mb-2">
                {selectedTemplate.name} Configuration
              </h2>
              
              <div className="flex items-center space-x-4 text-sm text-[#f5f5f5]">
                <span>Step {currentStep + 1} of {selectedTemplate.configSteps.length}</span>
                <div className="flex-1 bg-[#1a1a1a] h-1">
                  <div 
                    className="bg-white h-full transition-all duration-300"
                    style={{ width: `${((currentStep + 1) / selectedTemplate.configSteps.length) * 100}%` }}
                  />
                </div>
              </div>
            </div>

            {selectedTemplate.configSteps[currentStep] && (
              <div className="bg-[#111] border border-[#333] p-8">
                <h3 className="font-serif text-xl text-white mb-4">
                  {selectedTemplate.configSteps[currentStep].title}
                </h3>
                
                <p className="text-[#f5f5f5] font-light mb-8 leading-relaxed">
                  {selectedTemplate.configSteps[currentStep].description}
                </p>
                
                <div className="flex justify-between">
                  <button
                    onClick={onCancel}
                    className="px-6 py-3 border border-[#333] hover:border-white transition-colors text-sm"
                  >
                    Cancel
                  </button>
                  
                  <button
                    onClick={handleStepComplete}
                    className="px-8 py-3 bg-white text-black hover:bg-[#f5f5f5] transition-colors text-sm font-medium"
                  >
                    {currentStep < selectedTemplate.configSteps.length - 1 ? 'Continue' : 'Complete Setup'}
                  </button>
                </div>
              </div>
            )}
          </motion.div>
        )}
      </div>
    </div>
  );
};