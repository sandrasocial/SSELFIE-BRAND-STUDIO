/**
 * SERVICE TEMPLATES MANAGER
 * Pre-configured setups for common services
 * Generated by Victoria - The BUILD Feature Mastermind
 */

import { ServiceTemplate, IntegrationStep } from '@/components/integration/ServiceTemplateWizard';

export class ServiceTemplateManager {
  private templates: Map<string, ServiceTemplate> = new Map();

  async loadTemplates(): Promise<void> {
    console.log('ðŸ“‹ SERVICE TEMPLATES: Loading pre-configured service templates...');
    this.initializeDefaultTemplates();
  }

  private initializeDefaultTemplates(): void {
    // Stripe Payment Integration
    this.templates.set('stripe', {
      id: 'stripe',
      name: 'Stripe Payments',
      description: 'Complete payment processing with subscriptions, invoices, and customer management',
      category: 'payment',
      requiredSecrets: ['STRIPE_SECRET_KEY', 'STRIPE_PUBLISHABLE_KEY', 'STRIPE_WEBHOOK_SECRET'],
      configSteps: [
        {
          id: 'stripe-keys',
          title: 'Configure API Keys',
          description: 'Set up your Stripe API keys for secure payment processing',
          required: true,
          completed: false
        },
        {
          id: 'stripe-products',
          title: 'Create Products',
          description: 'Define your subscription products and pricing tiers',
          required: true,
          completed: false
        },
        {
          id: 'stripe-webhooks',
          title: 'Setup Webhooks',
          description: 'Configure webhook endpoints for payment events',
          required: true,
          completed: false
        }
      ]
    });

    // SendGrid Email Integration
    this.templates.set('sendgrid', {
      id: 'sendgrid',
      name: 'SendGrid Email',
      description: 'Professional email delivery with templates, analytics, and automation',
      category: 'email',
      requiredSecrets: ['SENDGRID_API_KEY', 'SENDGRID_FROM_EMAIL'],
      configSteps: [
        {
          id: 'sendgrid-auth',
          title: 'Authenticate API',
          description: 'Connect your SendGrid account with API authentication',
          required: true,
          completed: false
        },
        {
          id: 'sendgrid-templates',
          title: 'Design Templates',
          description: 'Create email templates for different communication types',
          required: false,
          completed: false
        },
        {
          id: 'sendgrid-analytics',
          title: 'Enable Analytics',
          description: 'Track email performance and engagement metrics',
          required: false,
          completed: false
        }
      ]
    });

    // Google Analytics Integration
    this.templates.set('analytics', {
      id: 'analytics',
      name: 'Google Analytics',
      description: 'Comprehensive website analytics with user behavior tracking',
      category: 'analytics',
      requiredSecrets: ['GOOGLE_ANALYTICS_ID', 'GOOGLE_ANALYTICS_SECRET'],
      configSteps: [
        {
          id: 'analytics-setup',
          title: 'Configure Tracking',
          description: 'Set up Google Analytics tracking code and events',
          required: true,
          completed: false
        },
        {
          id: 'analytics-goals',
          title: 'Define Goals',
          description: 'Configure conversion goals and funnels',
          required: false,
          completed: false
        },
        {
          id: 'analytics-reports',
          title: 'Custom Reports',
          description: 'Create custom dashboards and automated reports',
          required: false,
          completed: false
        }
      ]
    });

    // AWS S3 Storage Integration
    this.templates.set('s3-storage', {
      id: 's3-storage',
      name: 'AWS S3 Storage',
      description: 'Scalable cloud storage for images, documents, and media files',
      category: 'storage',
      requiredSecrets: ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY', 'AWS_S3_BUCKET'],
      configSteps: [
        {
          id: 's3-credentials',
          title: 'AWS Credentials',
          description: 'Configure AWS access keys and permissions',
          required: true,
          completed: false
        },
        {
          id: 's3-bucket',
          title: 'Bucket Configuration',
          description: 'Set up S3 bucket with proper security policies',
          required: true,
          completed: false
        },
        {
          id: 's3-cdn',
          title: 'CloudFront CDN',
          description: 'Optional: Configure CloudFront for faster content delivery',
          required: false,
          completed: false
        }
      ]
    });

    // Auth0 Authentication Integration
    this.templates.set('auth0', {
      id: 'auth0',
      name: 'Auth0 Authentication',
      description: 'Enterprise-grade authentication with social logins and MFA',
      category: 'auth',
      requiredSecrets: ['AUTH0_DOMAIN', 'AUTH0_CLIENT_ID', 'AUTH0_CLIENT_SECRET'],
      configSteps: [
        {
          id: 'auth0-app',
          title: 'Create Application',
          description: 'Set up Auth0 application with callback URLs',
          required: true,
          completed: false
        },
        {
          id: 'auth0-providers',
          title: 'Social Providers',
          description: 'Configure Google, Facebook, and other social logins',
          required: false,
          completed: false
        },
        {
          id: 'auth0-rules',
          title: 'Custom Rules',
          description: 'Add custom authentication logic and user enrichment',
          required: false,
          completed: false
        }
      ]
    });
  }

  getTemplate(templateId: string): ServiceTemplate | undefined {
    return this.templates.get(templateId);
  }

  getAllTemplates(): ServiceTemplate[] {
    return Array.from(this.templates.values());
  }

  getTemplatesByCategory(category: ServiceTemplate['category']): ServiceTemplate[] {
    return Array.from(this.templates.values()).filter(t => t.category === category);
  }

  updateTemplateStep(templateId: string, stepId: string, completed: boolean): boolean {
    const template = this.templates.get(templateId);
    if (!template) return false;

    const step = template.configSteps.find(s => s.id === stepId);
    if (!step) return false;

    step.completed = completed;
    return true;
  }

  getTemplateProgress(templateId: string): number {
    const template = this.templates.get(templateId);
    if (!template) return 0;

    const completedSteps = template.configSteps.filter(s => s.completed).length;
    return (completedSteps / template.configSteps.length) * 100;
  }

  generateIntegrationCode(templateId: string): string {
    const template = this.templates.get(templateId);
    if (!template) return '';

    switch (templateId) {
      case 'stripe':
        return this.generateStripeCode();
      case 'sendgrid':
        return this.generateSendGridCode();
      case 'analytics':
        return this.generateAnalyticsCode();
      case 's3-storage':
        return this.generateS3Code();
      case 'auth0':
        return this.generateAuth0Code();
      default:
        return '';
    }
  }

  private generateStripeCode(): string {
    return `
// Stripe Integration Code
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!);

export async function createPaymentIntent(amount: number, currency = 'usd') {
  return await stripe.paymentIntents.create({
    amount: amount * 100, // Convert to cents
    currency,
    automatic_payment_methods: { enabled: true }
  });
}

export async function createSubscription(customerId: string, priceId: string) {
  return await stripe.subscriptions.create({
    customer: customerId,
    items: [{ price: priceId }],
    payment_behavior: 'default_incomplete',
    expand: ['latest_invoice.payment_intent']
  });
}
    `.trim();
  }

  private generateSendGridCode(): string {
    return `
// SendGrid Integration Code
import sgMail from '@sendgrid/mail';

sgMail.setApiKey(process.env.SENDGRID_API_KEY!);

export async function sendEmail(to: string, subject: string, html: string) {
  const msg = {
    to,
    from: process.env.SENDGRID_FROM_EMAIL!,
    subject,
    html
  };

  return await sgMail.send(msg);
}

export async function sendTemplateEmail(to: string, templateId: string, data: any) {
  const msg = {
    to,
    from: process.env.SENDGRID_FROM_EMAIL!,
    templateId,
    dynamicTemplateData: data
  };

  return await sgMail.send(msg);
}
    `.trim();
  }

  private generateAnalyticsCode(): string {
    return `
// Google Analytics Integration Code
export function initializeGA() {
  if (typeof window !== 'undefined') {
    window.gtag('config', process.env.GOOGLE_ANALYTICS_ID!);
  }
}

export function trackEvent(action: string, category: string, label?: string, value?: number) {
  if (typeof window !== 'undefined') {
    window.gtag('event', action, {
      event_category: category,
      event_label: label,
      value: value
    });
  }
}

export function trackPageView(url: string) {
  if (typeof window !== 'undefined') {
    window.gtag('config', process.env.GOOGLE_ANALYTICS_ID!, {
      page_path: url
    });
  }
}
    `.trim();
  }

  private generateS3Code(): string {
    return `
// AWS S3 Integration Code
import { S3Client, PutObjectCommand, GetObjectCommand } from '@aws-sdk/client-s3';

const s3Client = new S3Client({
  region: process.env.AWS_REGION || 'us-east-1',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!
  }
});

export async function uploadFile(key: string, body: Buffer, contentType: string) {
  const command = new PutObjectCommand({
    Bucket: process.env.AWS_S3_BUCKET!,
    Key: key,
    Body: body,
    ContentType: contentType
  });

  return await s3Client.send(command);
}

export async function getFileUrl(key: string): Promise<string> {
  return \`https://\${process.env.AWS_S3_BUCKET!}.s3.amazonaws.com/\${key}\`;
}
    `.trim();
  }

  private generateAuth0Code(): string {
    return `
// Auth0 Integration Code
import { ManagementApiAccessToken } from 'auth0';

const auth0Config = {
  domain: process.env.AUTH0_DOMAIN!,
  clientId: process.env.AUTH0_CLIENT_ID!,
  clientSecret: process.env.AUTH0_CLIENT_SECRET!
};

export async function getUserProfile(userId: string) {
  const management = new ManagementApiAccessToken({
    domain: auth0Config.domain,
    clientId: auth0Config.clientId,
    clientSecret: auth0Config.clientSecret
  });

  return await management.getUser({ id: userId });
}

export function getLoginUrl(redirectUri: string) {
  return \`https://\${auth0Config.domain}/authorize?\` +
    \`client_id=\${auth0Config.clientId}&\` +
    \`redirect_uri=\${encodeURIComponent(redirectUri)}&\` +
    \`response_type=code&scope=openid profile email\`;
}
    `.trim();
  }
}