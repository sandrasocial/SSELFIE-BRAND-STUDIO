/**
 * SYSTEM ORCHESTRATION SERVICE
 * Coordinates all enhancement implementations across agents
 * Generated by Elena - Strategic Coordinator
 */

import { APILayer } from './api-orchestration';
import { CheckpointManager } from './checkpoint-automation';
import { SearchOptimizer } from './search-optimization';
import { WorkflowVisualizer } from './workflow-visualization';
import { ServiceTemplateManager } from './service-templates';

export interface SystemOrchestrationStatus {
  serviceTemplates: boolean;
  apiOrchestration: boolean;
  checkpointAutomation: boolean;
  searchOptimization: boolean;
  workflowVisualization: boolean;
}

export class SystemOrchestrator {
  private apiLayer: APILayer;
  private checkpointManager: CheckpointManager;
  private searchOptimizer: SearchOptimizer;
  private workflowVisualizer: WorkflowVisualizer;
  private templateManager: ServiceTemplateManager;
  private status: SystemOrchestrationStatus;

  constructor() {
    this.apiLayer = new APILayer();
    this.checkpointManager = new CheckpointManager();
    this.searchOptimizer = new SearchOptimizer();
    this.workflowVisualizer = new WorkflowVisualizer();
    this.templateManager = new ServiceTemplateManager();
    
    this.status = {
      serviceTemplates: false,
      apiOrchestration: false,
      checkpointAutomation: false,
      searchOptimization: false,
      workflowVisualization: false
    };
  }

  public async initializeSystem(): Promise<void> {
    console.log('üéØ SYSTEM ORCHESTRATOR: Initializing all enhancement systems...');
    
    try {
      await this.apiLayer.initialize();
      this.status.apiOrchestration = true;
      
      await this.checkpointManager.setup();
      this.status.checkpointAutomation = true;
      
      await this.searchOptimizer.configure();
      this.status.searchOptimization = true;
      
      await this.workflowVisualizer.render();
      this.status.workflowVisualization = true;
      
      await this.templateManager.loadTemplates();
      this.status.serviceTemplates = true;
      
      console.log('‚úÖ SYSTEM ORCHESTRATOR: All systems initialized successfully');
    } catch (error) {
      console.error('‚ùå SYSTEM ORCHESTRATOR: Initialization failed:', error);
      throw error;
    }
  }

  public getStatus(): SystemOrchestrationStatus {
    return { ...this.status };
  }

  public async performHealthCheck(): Promise<boolean> {
    const statusValues = Object.values(this.status);
    return statusValues.every(status => status === true);
  }
}

export const systemOrchestrator = new SystemOrchestrator();